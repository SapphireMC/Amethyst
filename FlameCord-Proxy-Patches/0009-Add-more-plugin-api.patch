From 731022ea96d9988b3f58997de13edbee2b8400d5 Mon Sep 17 00:00:00 2001
From: DenaryDev <denaryplanet@gmail.com>
Date: Fri, 17 Dec 2021 18:59:33 +0500
Subject: [PATCH] Add more plugin api


diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java b/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
index 3d1e9a3a..aa6c8591 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
@@ -3,30 +3,49 @@ package net.md_5.bungee.api.plugin;
 import com.google.common.base.Preconditions;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
 import java.io.InputStream;
+import java.io.OutputStream;
+import java.net.URL;
+import java.net.URLConnection;
+import java.nio.file.Files;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
+import java.util.logging.Level;
 import java.util.logging.Logger;
 import lombok.Getter;
+import lombok.Setter;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.api.config.ConfigurationAdapter;
 import net.md_5.bungee.api.scheduler.GroupedThreadFactory;
+import net.md_5.bungee.config.Configuration;
+import net.md_5.bungee.config.ConfigurationProvider;
+import net.md_5.bungee.config.YamlConfiguration;
 
 /**
  * Represents any Plugin that may be loaded at runtime to enhance existing
  * functionality.
+ *
+ * Modified by DenaryDev from SapphireMC
  */
-public class Plugin
+// Amethyst - make abstract
+public abstract class Plugin
 {
 
-    @Getter
     private PluginDescription description;
-    @Getter
     private ProxyServer proxy;
-    @Getter
     private File file;
-    @Getter
     private Logger logger;
+    // Amethyst start
+    private File dataFolder;
+    private PluginClassloader pluginClassloader;
+    private PluginManager pluginManager;
+    private PluginState state;
+    private ConfigurationProvider provider;
+    private Configuration newConfig;
+    private File configFile;
+    // Amethyst end
 
     public Plugin()
     {
@@ -45,12 +64,12 @@ public class Plugin
     }
 
     // Waterfall start - Allow plugins to use SLF4J for logging
-    public org.slf4j.Logger getSLF4JLogger() {
+    public org.slf4j.Logger getSLF4JLogger()
+    {
         return org.slf4j.LoggerFactory.getLogger(logger.getName());
     }
     // Waterfall end
 
-
     /**
      * Called when the plugin has just been loaded. Most of the proxy will not
      * be initialized, so only use it for registering
@@ -67,6 +86,13 @@ public class Plugin
     {
     }
 
+    /**
+     * Called when proxy is reloaded.
+     */
+    public void onReload()
+    {
+    }
+
     /**
      * Called when this plugin is disabled.
      */
@@ -74,15 +100,179 @@ public class Plugin
     {
     }
 
+    /**
+     * Returns the Proxy instance currently running this plugin
+     *
+     * @return Proxy running this plugin
+     */
+    public ProxyServer getProxy()
+    {
+        return proxy;
+    }
+
+    /**
+     * Returns the bungee.yml file containing the details for this plugin
+     *
+     * @return Contents of the bungee.yml file
+     */
+    public PluginDescription getDescription()
+    {
+        return description;
+    }
+
+    /**
+     * Returns the file which contains this plugin
+     *
+     * @return File containing this plugin
+     */
+    public File getFile()
+    {
+        return file;
+    }
+
+    public Logger getLogger()
+    {
+        return logger;
+    }
+
+    public PluginState getState()
+    {
+        return state;
+    }
+
+    public void setState(PluginState state)
+    {
+        this.state = state;
+    }
+
+    public Configuration getConfig()
+    {
+        if (newConfig == null)
+        {
+            reloadConfig();
+        }
+
+        return newConfig;
+    }
+
+    public void reloadConfig()
+    {
+        File configFile = new File(getDataFolder(), "config.yml");
+        if (!configFile.exists())
+        {
+            try (InputStream in = getResourceAsStream("config.yml"))
+            {
+                Files.copy( in, configFile.toPath() );
+            }
+            catch (IOException ex)
+            {
+                throw new RuntimeException( "Unable to create configuration file", ex );
+            }
+        }
+        try
+        {
+            newConfig = provider.load( configFile );
+        }
+        catch (IOException ex)
+        {
+            ex.printStackTrace();
+        }
+    }
+
+    public void saveConfig()
+    {
+        try
+        {
+            provider.save( newConfig, configFile );
+        }
+        catch (IOException ex)
+        {
+            ex.printStackTrace();
+        }
+    }
+
+    public void saveResource(String resourcePath, boolean replace) {
+        if (resourcePath == null || resourcePath.equals("")) {
+            throw new IllegalArgumentException("ResourcePath cannot be null or empty");
+        }
+
+        resourcePath = resourcePath.replace('\\', '/');
+        InputStream in = getResource(resourcePath);
+        if (in == null) {
+            throw new IllegalArgumentException("The embedded resource '" + resourcePath + "' cannot be found in " + file);
+        }
+
+        File outFile = new File(dataFolder, resourcePath);
+        int lastIndex = resourcePath.lastIndexOf('/');
+        File outDir = new File(dataFolder, resourcePath.substring(0, Math.max(lastIndex, 0)));
+
+        if (!outDir.exists()) {
+            outDir.mkdirs();
+        }
+
+        try {
+            if (!outFile.exists() || replace) {
+                OutputStream out = new FileOutputStream(outFile);
+                byte[] buf = new byte[1024];
+                int len;
+                while ((len = in.read(buf)) > 0) {
+                    out.write(buf, 0, len);
+                }
+                out.close();
+                in.close();
+            } else {
+                logger.log(Level.WARNING, "Could not save " + outFile.getName() + " to " + outFile + " because " + outFile.getName() + " already exists.");
+            }
+        } catch (IOException ex) {
+            logger.log(Level.SEVERE, "Could not save " + outFile.getName() + " to " + outFile, ex);
+        }
+    }
+
+    public InputStream getResource(String filename) {
+        if (filename == null) {
+            throw new IllegalArgumentException("Filename cannot be null");
+        }
+
+        try {
+            URL url = getClassLoader().getResource(filename);
+
+            if (url == null) {
+                return null;
+            }
+
+            URLConnection connection = url.openConnection();
+            connection.setUseCaches(false);
+            return connection.getInputStream();
+        } catch (IOException ex) {
+            return null;
+        }
+    }
+
+    public PluginClassloader getClassLoader() {
+        return pluginClassloader;
+    }
+
+    /**
+     * Returns a value indicating whether or not this plugin is currently enabled
+     *
+     * @deprecated use {@link Plugin#getState()} == {@link PluginState}.ENABLED
+     * @return true if this plugin is enable, otherwise false
+     */
+    @Deprecated
+    public boolean isEnabled()
+    {
+        return state == PluginState.ENABLED;
+    }
+
     /**
      * Gets the data folder where this plugin may store arbitrary data. It will
      * be a child of {@link ProxyServer#getPluginsFolder()}.
      *
      * @return the data folder of this plugin
      */
-    public final File getDataFolder()
+    public File getDataFolder()
     {
-        return new File( getProxy().getPluginsFolder(), getDescription().getName() );
+        return dataFolder;
     }
 
     /**
@@ -104,11 +294,16 @@ public class Plugin
      * @param proxy current proxy instance
      * @param description the description that describes this plugin
      */
-    final void init(ProxyServer proxy, PluginDescription description)
+    final void init(ProxyServer proxy, PluginDescription description, PluginManager pluginManager, PluginClassloader pluginClassloader)
     {
         this.proxy = proxy;
         this.description = description;
         this.file = description.getFile();
+        this.pluginManager = pluginManager; // Amethyst
+        this.provider = ConfigurationProvider.getProvider(YamlConfiguration.class); // Amethyst
+        this.dataFolder = new File( getProxy().getPluginsFolder(), getDescription().getName() ); // Amethyst
+        this.configFile = new File( dataFolder, "config.yml" ); // Amethyst
+        this.pluginClassloader = pluginClassloader;
         this.logger = Logger.getLogger(description.getName()); // Waterfall - Handle plugin prefixes in implementation
     }
 
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
index 68157dd4..ef594e6a 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
@@ -24,6 +24,7 @@ final class PluginClassloader extends URLClassLoader
     private static final Set<PluginClassloader> allLoaders = new CopyOnWriteArraySet<>();
     //
     private final ProxyServer proxy;
+    private final PluginManager pluginManager;
     private final PluginDescription desc;
     private final JarFile jar;
     private final Manifest manifest;
@@ -37,13 +38,14 @@ final class PluginClassloader extends URLClassLoader
         ClassLoader.registerAsParallelCapable();
     }
 
-    public PluginClassloader(ProxyServer proxy, PluginDescription desc, File file, ClassLoader libraryLoader) throws IOException
+    public PluginClassloader(ProxyServer proxy, PluginManager pluginManager, PluginDescription desc, File file, ClassLoader libraryLoader) throws IOException
     {
         super( new URL[]
-        {
-            file.toURI().toURL()
-        } );
+                {
+                        file.toURI().toURL()
+                } );
         this.proxy = proxy;
+        this.pluginManager = pluginManager;
         this.desc = desc;
         this.jar = new JarFile( file );
         this.manifest = jar.getManifest();
@@ -177,6 +179,6 @@ final class PluginClassloader extends URLClassLoader
         }
 
         this.plugin = plugin;
-        plugin.init( proxy, desc );
+        plugin.init( proxy, desc, pluginManager, this ); // Amethyst
     }
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginDescription.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginDescription.java
index ea5c0d37..006f1828 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginDescription.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginDescription.java
@@ -34,6 +34,10 @@ public class PluginDescription
      * Plugin author.
      */
     private String author;
+    /**
+     * Minimum api version of this plugin
+     */
+    private String apiVersion;
     /**
      * Plugin hard dependencies.
      */
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
index 2ba0f271..92d45bca 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
@@ -40,6 +40,7 @@ import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.event.EventBus;
 import net.md_5.bungee.event.EventHandler;
 import net.md_5.bungee.event.EventHandlerMethod; //Waterfall - Exception event
+import net.md_5.bungee.util.ApiVersionChecker;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.Constructor;
 import org.yaml.snakeyaml.introspector.PropertyUtils;
@@ -66,7 +67,6 @@ public final class PluginManager
     private final Multimap<Plugin, Listener> listenersByPlugin = ArrayListMultimap.create();
     private final HashMap<String,URLClassLoader> pluginloaders = new HashMap<>();
 
-    @SuppressWarnings("unchecked")
     public PluginManager(ProxyServer proxy)
     {
         this.proxy = proxy;
@@ -109,7 +109,7 @@ public final class PluginManager
     }
 
     /**
-     * Unregister a command so it will no longer be executed.
+     * Unregister a command, so it will no longer be executed.
      *
      * @param command the command to unregister
      */
@@ -201,39 +201,39 @@ public final class PluginManager
         }
 
         String[] args = Arrays.copyOfRange( split, 1, split.length );
-            if ( tabResults == null )
-            {
-        try { // Waterfall - split command & tab complete exception handlers for exception event
+        if ( tabResults == null )
+        {
+            try { // Waterfall - split command & tab complete exception handlers for exception event
                 if ( proxy.getConfig().isLogCommands() )
                 {
                     proxy.getLogger().log( Level.INFO, "{0} executed command: /{1}", new Object[]
-                    {
-                        sender.getName(), commandLine
-                    } );
+                            {
+                                    sender.getName(), commandLine
+                            } );
                 }
                 command.execute( sender, args );
-        // Waterfall start - split command & tab complete exception handlers for exception event
-        } catch ( Exception ex ) {
-            sender.sendMessage( ChatColor.RED + "An internal error occurred whilst executing this command, please check the console log for details." );
-            ProxyServer.getInstance().getLogger().log( Level.WARNING, "Error in dispatching command", ex );
-            this.callEvent( new ProxyExceptionEvent( new ProxyCommandException( ex, command, sender, args ) ) ); //Waterfall - throw error event
-        }
-        // Waterfall end
-            } else if ( commandLine.contains( " " ) && command instanceof TabExecutor )
-            {
-        try { // Waterfall - split command & tab complete exception handlers for exception event
+                // Waterfall start - split command & tab complete exception handlers for exception event
+            } catch ( Exception ex ) {
+                sender.sendMessage( ChatColor.RED + "An internal error occurred whilst executing this command, please check the console log for details." );
+                ProxyServer.getInstance().getLogger().log( Level.WARNING, "Error in dispatching command", ex );
+                this.callEvent( new ProxyExceptionEvent( new ProxyCommandException( ex, command, sender, args ) ) ); //Waterfall - throw error event
+            }
+            // Waterfall end
+        } else if ( commandLine.contains( " " ) && command instanceof TabExecutor )
+        {
+            try { // Waterfall - split command & tab complete exception handlers for exception event
                 for ( String s : ( (TabExecutor) command ).onTabComplete( sender, args ) )
                 {
                     tabResults.add( s );
                 }
-        // Waterfall start - split command & tab complete exception handlers for exception event
-        } catch ( Exception ex ) {
-            sender.sendMessage( ChatColor.RED + "An internal error occurred whilst executing this command, please check the console log for details." );
-            ProxyServer.getInstance().getLogger().log( Level.WARNING, "Error in dispatching command", ex );
-            this.callEvent( new ProxyExceptionEvent( new ProxyTabCompleteException( ex, command, sender, args ) ) ); //Waterfall - throw error event
-        }
-        // Waterfall end
+                // Waterfall start - split command & tab complete exception handlers for exception event
+            } catch ( Exception ex ) {
+                sender.sendMessage( ChatColor.RED + "An internal error occurred whilst executing this command, please check the console log for details." );
+                ProxyServer.getInstance().getLogger().log( Level.WARNING, "Error in dispatching command", ex );
+                this.callEvent( new ProxyExceptionEvent( new ProxyTabCompleteException( ex, command, sender, args ) ) ); //Waterfall - throw error event
             }
+            // Waterfall end
+        }
         return true;
     }
 
@@ -302,6 +302,7 @@ public final class PluginManager
     // FlameCord start - Adds a method to unload plugin from proxy
     public void unloadPlugin(Plugin plugin)
     {
+        plugin.setState(PluginState.DISABLED);
         plugin.onDisable();
         this.unregisterListeners( plugin );
         this.unregisterCommands( plugin );
@@ -355,11 +356,21 @@ public final class PluginManager
             {
                 plugin.onEnable();
                 ProxyServer.getInstance().getLogger().log( Level.INFO, "Enabled plugin {0} version {1} by {2}", new Object[]
+                        {
+                                plugin.getDescription().getName(), plugin.getDescription().getVersion(), plugin.getDescription().getAuthor()
+                        } );
+                // Amethyst start
+                if (plugin.getState().equals(PluginState.DISABLED))
+                {
+                    plugin.getLogger().info( plugin.getDescription().getName() + " is disabled." );
+                } else
                 {
-                    plugin.getDescription().getName(), plugin.getDescription().getVersion(), plugin.getDescription().getAuthor()
-                } );
+                    plugin.setState(ApiVersionChecker.getPluginState(plugin.getDescription()));
+                }
+                // Amethyst end
             } catch ( Throwable t )
             {
+                plugin.setState( PluginState.ERROR ); // Amethyst
                 // Waterfall start - throw exception event
                 String msg = "Exception encountered when loading plugin: " + plugin.getDescription().getName();
                 ProxyServer.getInstance().getLogger().log( Level.WARNING, msg, t );
@@ -413,9 +424,9 @@ public final class PluginManager
             if ( dependStatus == Boolean.FALSE && plugin.getDepends().contains( dependName ) ) // only fail if this wasn't a soft dependency
             {
                 ProxyServer.getInstance().getLogger().log( Level.WARNING, "{0} (required by {1}) is unavailable", new Object[]
-                {
-                    String.valueOf( dependName ), plugin.getName()
-                } );
+                        {
+                                String.valueOf( dependName ), plugin.getName()
+                        } );
                 status = false;
             }
 
@@ -431,7 +442,7 @@ public final class PluginManager
         {
             try
             {
-                URLClassLoader loader = new PluginClassloader( proxy, plugin, plugin.getFile(), ( libraryLoader != null ) ? libraryLoader.createLoader( plugin ) : null );
+                URLClassLoader loader = new PluginClassloader( proxy, this, plugin, plugin.getFile(), ( libraryLoader != null ) ? libraryLoader.createLoader( plugin ) : null );
                 Class<?> main = loader.loadClass( plugin.getMain() );
                 Plugin clazz = (Plugin) main.getDeclaredConstructor().newInstance();
 
@@ -439,11 +450,12 @@ public final class PluginManager
                 // FlameCord start - cache url classloaders to unload plugins
                 pluginloaders.put( plugin.getName(),loader );
                 // FlameCord end
+                clazz.setState( PluginState.LOADED ); // Amethyst
                 clazz.onLoad();
                 ProxyServer.getInstance().getLogger().log( Level.INFO, "Loaded plugin {0} version {1} by {2}", new Object[]
-                {
-                    plugin.getName(), plugin.getVersion(), plugin.getAuthor()
-                } );
+                        {
+                                plugin.getName(), plugin.getVersion(), plugin.getAuthor()
+                        } );
             } catch ( Throwable t )
             {
                 proxy.getLogger().log( Level.WARNING, "Error loading plugin " + plugin.getName(), t );
@@ -514,9 +526,9 @@ public final class PluginManager
         if ( elapsed > 250000000 )
         {
             ProxyServer.getInstance().getLogger().log( Level.WARNING, "Event {0} took {1}ms to process!", new Object[]
-            {
-                event, elapsed / 1000000
-            } );
+                    {
+                            event, elapsed / 1000000
+                    } );
         }
         return event;
     }
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginState.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginState.java
new file mode 100644
index 00000000..fe37e017
--- /dev/null
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginState.java
@@ -0,0 +1,38 @@
+package net.md_5.bungee.api.plugin;
+
+/**
+ * Represents the current run-time state of a {@link Plugin}.
+ *
+ * @author DenaryDev
+ */
+public enum PluginState {
+    /**
+     * The plugin has been correctly loaded.
+     */
+    LOADED,
+
+    /**
+     * The plugin has been correctly enabled and is now fully working.
+     */
+    ENABLED,
+
+    /**
+     * The plugin is fully disabled.
+     */
+    DISABLED,
+
+    /**
+     * The plugin has not been loaded because it requires a different version of Amethyst.
+     */
+    INCOMPATIBLE,
+
+    /**
+     * The plugin doesn't contains api version.
+     */
+    UNKNOWN_API,
+
+    /**
+     * The plugin loading or enabling process has been interrupted by an unhandled error.
+     */
+    ERROR
+}
diff --git a/api/src/main/java/net/md_5/bungee/util/ApiVersionChecker.java b/api/src/main/java/net/md_5/bungee/util/ApiVersionChecker.java
new file mode 100644
index 00000000..d33a9069
--- /dev/null
+++ b/api/src/main/java/net/md_5/bungee/util/ApiVersionChecker.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright (c) 2021 DenaryDev
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program.  If not, see
+ * <http://www.gnu.org/licenses/gpl-3.0.html>.
+ */
+package net.md_5.bungee.util;
+
+import java.util.Arrays;
+import java.util.List;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.plugin.PluginDescription;
+import net.md_5.bungee.api.plugin.PluginState;
+
+/**
+ * Created 21.12.2021
+ *
+ * @author DenaryDev
+ */
+public class ApiVersionChecker {
+    private static final List<String> SUPPORTED_API_VERSIONS = Arrays.asList("1.18", "1.18.1");
+
+    public static PluginState getPluginState(PluginDescription description) {
+        String minimumVersion = ProxyServer.getInstance().getFlameCord().getFlameCordConfiguration().getMinimumApiVersion();
+        int minimumIndex = SUPPORTED_API_VERSIONS.indexOf(minimumVersion);
+
+        if (description.getApiVersion() != null) {
+            int pluginIndex = SUPPORTED_API_VERSIONS.indexOf(description.getApiVersion());
+
+            if (pluginIndex == -1)
+            {
+                ProxyServer.getInstance().getLogger().warning("Plugin " + description.getName() + " v" + description.getVersion() + " has unsupported API version.");
+                return PluginState.UNKNOWN_API;
+            }
+
+            if (pluginIndex < minimumIndex)
+            {
+                return PluginState.INCOMPATIBLE;
+            }
+        } else {
+            ProxyServer.getInstance().getLogger().warning("Legacy plugin " + description.getName() + " v" + description.getVersion() + " does not specify an api-version.");
+            return PluginState.UNKNOWN_API;
+        }
+        return PluginState.ENABLED;
+    }
+}
diff --git a/flame/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java b/flame/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java
index 4e84ce45..3b8bec29 100644
--- a/flame/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java
+++ b/flame/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java
@@ -48,6 +48,8 @@ public class FlameCordConfiguration {
     @Getter
     private boolean lobbyEnabled = true;
     @Getter
+    private String minimumApiVersion = "1.18";
+    @Getter
     private Collection<String> lobbies = new HashSet<>(List.of("lobby"));
 
     public FlameCordConfiguration(final ConfigurationProvider configurationProvider) {
@@ -78,6 +80,7 @@ public class FlameCordConfiguration {
 
             this.lobbyEnabled = setIfUnexistant("lobby.enable", lobbyEnabled, configuration);
             this.lobbies = setIfUnexistant("lobby.servers", lobbies, configuration);
+            this.minimumApiVersion = (String) setIfUnexistant("minimum-api-version", minimumApiVersion, configuration);
 
             if (!configurationExists) {
                 configurationProvider.save(configuration, configurationFile);
diff --git a/flame/src/main/java/dev/_2lstudios/flamecord/configuration/MessagesConfiguration.java b/flame/src/main/java/dev/_2lstudios/flamecord/configuration/MessagesConfiguration.java
index 45636a3f..26290c2a 100644
--- a/flame/src/main/java/dev/_2lstudios/flamecord/configuration/MessagesConfiguration.java
+++ b/flame/src/main/java/dev/_2lstudios/flamecord/configuration/MessagesConfiguration.java
@@ -36,12 +36,15 @@ public class MessagesConfiguration {
 			setIfUnexistant( "command_find_online_at", "&eИгрок &6{0} &eиграет на сервере &6{1}", configuration );
 			setIfUnexistant( "command_firewall_info","&eСуществует &6{0} &eадресов брандмауэра. Брандмауэр очистится через &6{1} &eсек.", configuration );
 			setIfUnexistant( "command_flamecord_usage", "&cИспользуйте /flame help для просмотра доступных команд", configuration );
+			setIfUnexistant( "command_flamecord_plugins", "&fУстановленные на прокси плагины ({0}): {1}", configuration );
 			setIfUnexistant( "command_flamecord_help", """
 					&7&m-----------------&r&7&l{&5Amethyst&7&l}&r&7&m-----------------
 					&8&l* &6/flame firewall &7- &eПоказывает информацию о
 					&e   брандмауэре.
 					&8&l* &6/flame about &7- &eПоказывает информацию про
 					&e   ядро сервера.
+					&8&l* &6/flame plugins &7- &eПоказывает установленные
+					&e   плагины.
 					&8&l* &6/flame help &7- &eПоказывает это сообщение!
 					""", configuration );
 			setIfUnexistant( "command_ip", "&eIP игрока &6{0}&e: &6{1}", configuration );
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index cf7bf796..4918d5fd 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -92,6 +92,7 @@ import net.md_5.bungee.command.CommandIP;
 import net.md_5.bungee.command.CommandPerms;
 import net.md_5.bungee.command.CommandReload;
 import net.md_5.bungee.command.ConsoleCommandSender;
+import net.md_5.bungee.api.plugin.PluginState;
 import net.md_5.bungee.compress.CompressFactory;
 import net.md_5.bungee.conf.*;
 import net.md_5.bungee.forge.ForgeConstants;
@@ -513,6 +514,7 @@ public class BungeeCord extends ProxyServer
             try
             {
                 plugin.onDisable();
+                plugin.setState(PluginState.DISABLED);
                 for ( Handler handler : plugin.getLogger().getHandlers() )
                 {
                     handler.close();
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandFlame.java b/proxy/src/main/java/net/md_5/bungee/command/CommandFlame.java
index 4144bd28..23dbb6c3 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandFlame.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandFlame.java
@@ -1,9 +1,14 @@
 package net.md_5.bungee.command;
 
+import java.util.Collection;
 import net.md_5.bungee.BungeeCord;
+import net.md_5.bungee.api.ChatColor;
 import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.chat.ComponentBuilder;
 import net.md_5.bungee.api.chat.TextComponent;
 import net.md_5.bungee.api.plugin.Command;
+import net.md_5.bungee.api.plugin.Plugin;
+import net.md_5.bungee.api.plugin.PluginState;
 
 public class CommandFlame extends Command
 {
@@ -30,6 +35,36 @@ public class CommandFlame extends Command
                         §6More commands §7- §e/flame help
                         §r""", BungeeCord.getInstance().getVersion() ) ) );
                 case "help" -> sender.sendMessage( BungeeCord.getInstance().getTranslationComponent( "command_flamecord_help" ) );
+                case "plugins", "pl" -> {
+                    final Collection<Plugin> plugins = BungeeCord.getInstance().getPluginManager().getPlugins();
+                    final StringBuilder builder = new StringBuilder();
+
+                    for (Plugin plugin : plugins)
+                    {
+                        if (builder.length() > 0)
+                        {
+                            builder.append( "&f" );
+                            builder.append( ", " );
+                        }
+
+                        String color = switch (plugin.getState())
+                                {
+                                    case LOADED -> "&e";
+                                    case ENABLED -> "&a";
+                                    case DISABLED -> "&7";
+                                    case INCOMPATIBLE -> "&6";
+                                    case UNKNOWN_API -> "&a&o";
+                                    case ERROR -> "&c";
+                                };
+
+                        builder.append( color ).append( plugin.getDescription().getName() );
+                        if (plugin.getState().equals(PluginState.UNKNOWN_API))
+                        {
+                            builder.append("*");
+                        }
+                    }
+                    sender.sendMessage( BungeeCord.getInstance().getTranslationComponent( "command_flamecord_plugins", plugins.size(), ChatColor.translateAlternateColorCodes( builder.toString() ) ) );
+                }
                 default -> sender.sendMessage( BungeeCord.getInstance().getTranslationComponent( "command_flamecord_usage" ) );
             }
         } else {
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java b/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
index 4d16d246..fb89dedf 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
@@ -9,6 +9,8 @@ import net.md_5.bungee.api.plugin.Command;
 
 import java.util.Collection;
 import java.util.HashSet;
+import net.md_5.bungee.api.plugin.Plugin;
+import net.md_5.bungee.api.plugin.PluginState;
 
 public class CommandReload extends Command
 {
@@ -34,6 +36,12 @@ public class CommandReload extends Command
 
         FlameCord.renew( BungeeCord.getInstance().getLogger(), whitelistedAddresses );
 
+        for ( final Plugin plugin : BungeeCord.getInstance().getPluginManager().getPlugins() ) {
+            if (plugin.getState().equals(PluginState.ENABLED)) {
+                plugin.onReload();
+            }
+        }
+
         sender.sendMessage( BungeeCord.getInstance().getTranslationComponent( "command_reload" ) );
     }
 }
-- 
2.29.2.windows.3

