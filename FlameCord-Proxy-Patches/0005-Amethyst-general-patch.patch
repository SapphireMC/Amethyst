From 45fdc71a2ee2859ae4fe8fc61751c51de863d384 Mon Sep 17 00:00:00 2001
From: Denary Planet <denaryplanet@gmail.com>
Date: Sat, 10 Jul 2021 17:22:34 +0500
Subject: [PATCH] Amethyst general patch


diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
index a4011335..7c0c36fd 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
@@ -1,13 +1,7 @@
 package net.md_5.bungee.api;
 
 import com.google.common.base.Preconditions;
-import java.io.File;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-import java.util.Collection;
-import java.util.Map;
-import java.util.UUID;
-import java.util.logging.Logger;
+import dev._2lstudios.flamecord.FlameCord;
 import lombok.Getter;
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.api.config.ConfigurationAdapter;
@@ -17,6 +11,14 @@ import net.md_5.bungee.api.plugin.Plugin;
 import net.md_5.bungee.api.plugin.PluginManager;
 import net.md_5.bungee.api.scheduler.TaskScheduler;
 
+import java.io.File;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.util.Collection;
+import java.util.Map;
+import java.util.UUID;
+import java.util.logging.Logger;
+
 public abstract class ProxyServer
 {
 
@@ -59,6 +61,15 @@ public abstract class ProxyServer
      */
     public abstract String getTranslation(String name, Object... args);
 
+    /**
+     * Gets a localizet base component from messages file.
+     *
+     * @param key translation key
+     * @param args translation arguments
+     * @return the localized base component
+     */
+    public abstract BaseComponent[] getTranslationComponent(String key, Object... args);
+
     /**
      * Gets the main logger which can be used as a suitable replacement for
      * {@link System#out} and {@link System#err}.
@@ -327,4 +338,10 @@ public abstract class ProxyServer
      */
     public abstract Title createTitle();
 
+    /**
+     * Get the FlameCord instance.
+     *
+     * @return flamecord instance
+     */
+    public abstract FlameCord getFlameCord();
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
index a190dfae..2ba0f271 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
@@ -195,7 +195,7 @@ public final class PluginManager
         {
             if ( tabResults == null )
             {
-                sender.sendMessage( ( command.getPermissionMessage() == null ) ? proxy.getTranslation( "no_permission" ) : command.getPermissionMessage() );
+                sender.sendMessage( ( command.getPermissionMessage() == null ) ? proxy.getTranslation( "error_no_permission" ) : command.getPermissionMessage() );
             }
             return true;
         }
diff --git a/flame/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java b/flame/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java
index 056dcb81..70fcae09 100644
--- a/flame/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java
+++ b/flame/src/main/java/dev/_2lstudios/flamecord/configuration/FlameCordConfiguration.java
@@ -2,10 +2,7 @@ package dev._2lstudios.flamecord.configuration;
 
 import java.io.File;
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashSet;
+import java.util.*;
 
 import lombok.Getter;
 import net.md_5.bungee.config.Configuration;
@@ -30,9 +27,16 @@ public class FlameCordConfiguration {
     @Getter
     private Collection<String> firewallNames = new HashSet<>(Arrays.asList(new String[] { "mcspam" }));
 
+    @Getter
+    private boolean lobbyEnabled = true;
+    //@Getter
+    //private boolean reconnectEnabled = false;
+    @Getter
+    private Collection<String> lobbies = new HashSet<>(Arrays.asList(new String[] { "lobby" }));
+
     public FlameCordConfiguration(final ConfigurationProvider configurationProvider) {
         try {
-            final String fileName = "./flamecord.yml";
+            final String fileName = "./flame.yml";
             final File configurationFile = new File(fileName);
             final Configuration configuration;
             final boolean configurationExists = configurationFile.exists();
@@ -53,6 +57,10 @@ public class FlameCordConfiguration {
             this.firewallSeconds = setIfUnexistant("firewall.seconds", this.firewallSeconds, configuration);
             this.firewallNames = setIfUnexistant("firewall.names", this.firewallNames, configuration);
 
+            this.lobbyEnabled = setIfUnexistant("lobby.enable", lobbyEnabled, configuration);
+            //this.reconnectEnabled = setIfUnexistant("lobby.reconnect", reconnectEnabled, configuration);
+            this.lobbies = setIfUnexistant("lobby.servers", lobbies, configuration);
+
             if (!configurationExists) {
                 configurationProvider.save(configuration, configurationFile);
             }
@@ -89,4 +97,18 @@ public class FlameCordConfiguration {
             return new HashSet<>(configuration.getStringList(arg1));
         }
     }
+
+    public String getRandomLobby()
+    {
+        Collection<String> lobbiesCollection = getLobbies();
+        List<String> lobbyServers = new ArrayList<>( lobbiesCollection );
+        if ( lobbyServers.size() == 1 )
+        {
+            return lobbyServers.get( 0 );
+        } else
+        {
+            Random random = new Random();
+            return lobbyServers.get( random.nextInt( lobbyServers.size() - 1 ) );
+        }
+    }
 }
diff --git a/flame/src/main/java/dev/_2lstudios/flamecord/configuration/MessagesConfiguration.java b/flame/src/main/java/dev/_2lstudios/flamecord/configuration/MessagesConfiguration.java
index c88077ad..f98e878b 100644
--- a/flame/src/main/java/dev/_2lstudios/flamecord/configuration/MessagesConfiguration.java
+++ b/flame/src/main/java/dev/_2lstudios/flamecord/configuration/MessagesConfiguration.java
@@ -30,71 +30,74 @@ public class MessagesConfiguration {
 				configuration = configurationProvider.load(configurationFile);
 			}
 
-			// BungeeCord
-			setIfUnexistant("alert", "&8[&4Alert&8]&r ", configuration);
-			setIfUnexistant("already_connected", "&cYou are already connected to this server!", configuration);
-			setIfUnexistant("already_connected_proxy", "&cYou are already connected to this proxy!", configuration);
-			setIfUnexistant("already_connecting", "&cAlready connecting to this server!", configuration);
-			setIfUnexistant("command_list", "&a[{0}] &e({1}): &r{2}", configuration);
-			setIfUnexistant("connect_kick", "&cKicked whilst connecting to {0}: {1}", configuration);
-			setIfUnexistant("current_server", "&6You are currently connected to {0}.", configuration);
-			setIfUnexistant("fallback_kick",
-					"&cCould not connect to a default or fallback server, please try again later: {0}", configuration);
-			setIfUnexistant("fallback_lobby",
-					"&cCould not connect to target server, you have been moved to a fallback server.", configuration);
-			setIfUnexistant("lost_connection", "[Proxy] Lost connection to server.", configuration);
-			setIfUnexistant("mojang_fail", "Error occurred while contacting login servers, are they down?",
-					configuration);
-			setIfUnexistant("no_permission", "&cYou do not have permission to execute this command!", configuration);
-			setIfUnexistant("no_server", "&cThe specified server does not exist.", configuration);
-			setIfUnexistant("no_server_permission", "&cYou don't have permission to access this server.",
-					configuration);
-			setIfUnexistant("outdated_client", "Outdated client! Please use {0}", configuration);
-			setIfUnexistant("outdated_server", "Outdated server! I'm still on {0}", configuration);
-			setIfUnexistant("proxy_full", "Server is full!", configuration);
-			setIfUnexistant("restart", "[Proxy] Proxy restarting.", configuration);
-			setIfUnexistant("server_kick", "[Kicked] ", configuration);
-			setIfUnexistant("server_list", "&6You may connect to the following servers at this time: ", configuration);
-			setIfUnexistant("server_went_down",
-					"&cThe server you were previously on went down, you have been connected to a fallback server",
-					configuration);
-			setIfUnexistant("total_players", "Total players online: {0}", configuration);
-			setIfUnexistant("name_too_long", "Cannot have username longer than 16 characters", configuration);
-			setIfUnexistant("name_invalid", "Username contains invalid characters.", configuration);
-			setIfUnexistant("ping_cannot_connect", "&c[Bungee] Can't connect to server.", configuration);
-			setIfUnexistant("offline_mode_player", "Not authenticated with Minecraft.net", configuration);
-			setIfUnexistant("message_needed", "&cYou must supply a message.", configuration);
-			setIfUnexistant("error_occurred_player",
-					"&cAn error occurred while parsing your message. (Hover for details)", configuration);
-			setIfUnexistant("error_occurred_console", "&cAn error occurred while parsing your message: {0}",
-					configuration);
-			setIfUnexistant("click_to_connect", "Click to connect to the server", configuration);
-			setIfUnexistant("username_needed", "&cPlease follow this command by a user name.", configuration);
-			setIfUnexistant("user_not_online", "&cThat user is not online.", configuration);
-			setIfUnexistant("user_online_at", "&a{0} &ris online at {1}", configuration);
-			setIfUnexistant("send_cmd_usage",
-					"&cNot enough arguments, usage: /send <server|player|all|current> <target>", configuration);
-			setIfUnexistant("player_only", "&cOnly in game players can use this command", configuration);
-			setIfUnexistant("successfully_summoned", "&aSuccessfully summoned player(s)", configuration);
-			setIfUnexistant("you_got_summoned", "&6Summoned to {0} by {1}", configuration);
-			setIfUnexistant("command_perms_groups", "&6You have the following groups: {0}", configuration);
-			setIfUnexistant("command_perms_permission", "&9- {0}", configuration);
-			setIfUnexistant("command_ip", "&9IP of {0} is {1}", configuration);
-
-			// FlameCord
-			setIfUnexistant("firewall_added", "&e{0}&c had been firewalled from the proxy!", configuration);
-			setIfUnexistant("firewall_blocked", "&e{0}&c is firewalled from the proxy, request blocked!",
-					configuration);
-			setIfUnexistant("firewall_info",
-					"&aThere are&b {0} &aaddresses firewalled!\n&aThe firewall will clear in &b{1} &aseconds!",
-					configuration);
-			setIfUnexistant("firewall_cleared", "&b{0}&a addresses had been automatically removed from the firewall!",
-					configuration);
-			setIfUnexistant("flamecord_reload", "&aAll files had been successfully reloaded!", configuration);
-			setIfUnexistant("flamecord_help",
-					"&aFlameCord&b {0}&a by&b LinsaFTW&a &&b Sammwy&r\n&e /flamecord reload&7 >&b Reloads FlameCord files!\n&e /flamecord firewall&7 >&b Shows information about the Firewall!\n&e /flamecord help&7 >&b Shows this message!",
-					configuration);
-			setIfUnexistant("flamecord_nopermission", "&cYou don't have permission to do this!", configuration);
+			// Commands
+			setIfUnexistant( "command_alert", "&c&l(&4&lОбьявление&c&l) &с&l", configuration );
+			setIfUnexistant( "command_alert_message_needed", "&cВы должны указать сообщение.", configuration );
+			setIfUnexistant( "command_find_online_at", "&7&l(&5Amethyst&7&l) &fИгрок &e{0} &fиграет на сервере &e{1}", configuration );
+			setIfUnexistant( "command_firewall_info","&7&l(&5Amethyst&7&l) &fСуществует &e{0} &fадресов брандмауэра. &fБрандмауэр очистится через &e{1} &fсек.", configuration );
+			setIfUnexistant( "command_flamecord_usage", "&7&l(&5Amethyst&7&l) &fИспользуйте /flame help для просмотра доступных команд", configuration );
+			setIfUnexistant( "command_flamecord_help", """
+						&7&m-----------------&r&7&l(&5Amethyst&7&l)&r&7&m-----------------
+						&8&l* &6/flame firewall &7- &eПоказывает информацию о брандмауэре!
+						&8&l* &6/flame help &7- &eПоказывает это сообщение!
+						&8&l* &6/flame about &7- &eИнформация про Amethyst
+						&r""", configuration );
+			setIfUnexistant( "command_ip", "&7&l(&5Amethyst&7&l) &fIP игрока &e{0}&f: &e{1}", configuration );
+			setIfUnexistant( "command_list_header", """
+						&7&m-----------------&r&7&l(&5Amethyst&7&l)&r&7&m-----------------
+						&fСписок всех серверов:""", configuration );
+			setIfUnexistant( "command_list_server", "&e{0}&8: &fОнлайн (&7{1}&f): &7{2}", configuration );
+			setIfUnexistant( "command_list_footer", "&7&m-------------------------------------------", configuration );
+			setIfUnexistant( "command_list_total", "&fВсего игроков на сервере: &e{0}", configuration );
+			setIfUnexistant( "command_lobby_already_in", "&cВы уже подключены к этому серверу!", configuration );
+			setIfUnexistant( "command_lobby_not_found", "&cНи одного лобби-сервера не найдено, сообщите администрации!", configuration );
+			setIfUnexistant( "command_lobby_teleport", "&7&l(&5Amethyst&7&l) &fТелепортируем вас в лобби.", configuration );
+			setIfUnexistant( "command_perms_groups", "&7&l(&5Amethyst&7&l) &fВаши текущие группы:&e {0}", configuration );
+			setIfUnexistant( "command_perms_permission", "&7- {0}", configuration );
+			setIfUnexistant( "command_reload", "&7&l(&5Amethyst&7&l) &aВсе файлы успешно перезагружены!", configuration );
+			setIfUnexistant( "command_server_current", "&7&l(&5Amethyst&7&l) &fВы находитесь на сервере &e{0}&f", configuration );
+			setIfUnexistant( "command_server_list", "&fВ настоящее время вы можете подключиться к следующим серверам: &e", configuration );
+			setIfUnexistant( "command_server_text", """
+						&fОнлайн: &e{0}
+						&7Нажмите, чтобы подключиться на этот сервер""", configuration );
+			setIfUnexistant(  "command_send_result", "&7&l(&5Amethyst&7&l) &fРезультаты перемещения:", configuration );
+			setIfUnexistant( "command_send_sender", "&7&l(&5Amethyst&7&l) &fПереношу &e{0} &fигрока(ов) на сервер &e{1}&f.", configuration );
+			setIfUnexistant( "command_send_target", "&7&l(&5Amethyst&7&l) &fВы были перемещены на сервер &e{0} &fигроком &e{1}", configuration );
+			setIfUnexistant( "command_send_usage", "&cНедостаточно аргументов в команде, используйте: /send <server|player|all|current> <target>", configuration );
+			// Errors
+			setIfUnexistant( "error_already_connected", "&cВы уже подключены к этому серверву!", configuration );
+			setIfUnexistant( "error_already_connected_proxy", "&cИгрок с таким-же ником уже играет на сервере!", configuration );
+			setIfUnexistant( "error_connect_kick", "&cВы были кикнуты при подключении к серверу {0}: {1}", configuration );
+			setIfUnexistant( "error_fallback_kick", "&cНе удалось подключить Вас к основному или запасному серверу, повторите попытку чуть позже : {0}", configuration );
+			setIfUnexistant( "error_illegal_chat_characters", "&cНедопустимые символы в чате ({0})", configuration );
+			setIfUnexistant( "error_lost_connection", "&c[Proxy] Потеряно соединение с сервером.", configuration );
+			setIfUnexistant( "error_message_console", "&cПроизошла ошибкa при обработке вашего сообщения: {0}", configuration );
+			setIfUnexistant( "error_message_player", "&cПроизошла ошибкa при обработке вашего сообщения. (Наведите для информации)", configuration );
+			setIfUnexistant( "error_mojang_fail", "&cНе удалось подключиться к серверу Mojang, повторите попытку чуть позже!", configuration );
+			setIfUnexistant( "error_name_invalid", "&cВаш ник содержит запрещённые символы.", configuration );
+			setIfUnexistant( "error_name_too_long", "&cМаксимальная длина ника 16 символов.", configuration );
+			setIfUnexistant( "error_no_license", "&cИспользуйте лицензионный аккаунт, чтобы зайти на сервер", configuration );
+			setIfUnexistant( "error_no_permission", "&7&l(&5Amethyst&7&l) &cНедостаточно прав!", configuration );
+			setIfUnexistant( "error_no_server", "&7&l(&5Amethyst&7&l) &cГруппа серверов не найдена, сообщите админинстрации!", configuration );
+			setIfUnexistant( "error_no_server_permission", "&7&l(&5Amethyst&7&l) &cНедостаточно прав для подключения к этому серверу!", configuration );
+			setIfUnexistant( "error_outdated_client", "&cСервер работает на версиях &a{0}", configuration );
+			setIfUnexistant( "error_outdated_server", "&cСервер работает на версиях &a{0}", configuration );
+			setIfUnexistant( "error_ping_cannot_connect", "&cНе удалось подключиться к серверу. Сообщите администрации.", configuration );
+			setIfUnexistant( "error_player_only", "&cТолько игроки могут использовать эту команду", configuration );
+			setIfUnexistant( "error_proxy_full", "&cСервер заполнен!", configuration );
+			setIfUnexistant( "error_server_kick", "&c[Кикнут]&r ", configuration );
+			setIfUnexistant( "error_timeout", "Сервер недоступен (превышено время ожидания). Не в сети? Неправильно настроенный адрес/порт/брандмауэр?", configuration );
+			setIfUnexistant( "error_user_not_online", "&cДанный игрок не онлайн.", configuration );
+			setIfUnexistant( "error_username_needed", "&cПожалуйста укажите имя игрока.", configuration );
+			// Info
+			setIfUnexistant( "info_firewall_added", "&e{0} &cбыл защищен брандмауэром от прокси!", configuration );
+			setIfUnexistant( "info_firewall_blocked", "&e{0} &cзащищен брандмауэром от прокси, запрос заблокирован!",configuration );
+			setIfUnexistant( "info_firewall_cleared", "&7&l(&5Amethyst&7&l) &e{0} &fадресов были автоматически удалены из брандмауэра!",configuration );
+			setIfUnexistant( "info_restart", "&aПрокси перезагружается...", configuration );
+			// Warnings
+			setIfUnexistant( "warning_already_connecting", "&aПодключение...", configuration );
+			setIfUnexistant( "warning_fallback",  "&cНевозможно подключиться на этот сервер, вы были перемещены на запасной сервер.", configuration );
+			setIfUnexistant( "warning_server_went_down", "&cСервер, на котором Вы играли, выключился, Вы были перемещены на запасной сервер.", configuration );
 
 			if (!configurationExists) {
 				configurationProvider.save(configuration, configurationFile);
@@ -114,7 +117,7 @@ public class MessagesConfiguration {
 
 	public String getTranslation(final String name, final Object... args) {
 		if (!messages.containsKey(name)) {
-			logger.warning("[FlameCord] Tried to get translation '" + name
+			logger.warning("[Amethyst] Tried to get translation '" + name
 					+ "' from messages.yml file but wasn't found. Please try resetting this file or report to a developer.");
 		}
 
diff --git a/module/cmd-alert/src/main/java/net/md_5/bungee/module/cmd/alert/CommandAlert.java b/module/cmd-alert/src/main/java/net/md_5/bungee/module/cmd/alert/CommandAlert.java
index 55d2f7b8..3d95b789 100644
--- a/module/cmd-alert/src/main/java/net/md_5/bungee/module/cmd/alert/CommandAlert.java
+++ b/module/cmd-alert/src/main/java/net/md_5/bungee/module/cmd/alert/CommandAlert.java
@@ -19,7 +19,7 @@ public class CommandAlert extends Command
     {
         if ( args.length == 0 )
         {
-            sender.sendMessage( ProxyServer.getInstance().getTranslation( "message_needed" ) );
+            sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "command_alert_message_needed" ) );
         } else
         {
             StringBuilder builder = new StringBuilder();
@@ -29,7 +29,7 @@ public class CommandAlert extends Command
                 args[0] = args[0].substring( 2, args[0].length() );
             } else
             {
-                builder.append( ProxyServer.getInstance().getTranslation( "alert" ) );
+                builder.append( ProxyServer.getInstance().getTranslation( "command_alert" ) );
             }
 
             for ( String s : args )
diff --git a/module/cmd-alert/src/main/java/net/md_5/bungee/module/cmd/alert/CommandAlertRaw.java b/module/cmd-alert/src/main/java/net/md_5/bungee/module/cmd/alert/CommandAlertRaw.java
index 7292899d..7daa3f18 100644
--- a/module/cmd-alert/src/main/java/net/md_5/bungee/module/cmd/alert/CommandAlertRaw.java
+++ b/module/cmd-alert/src/main/java/net/md_5/bungee/module/cmd/alert/CommandAlertRaw.java
@@ -23,7 +23,7 @@ public class CommandAlertRaw extends Command
     {
         if ( args.length == 0 )
         {
-            sender.sendMessage( ProxyServer.getInstance().getTranslation( "message_needed" ) );
+            sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "error_message_needed" ) );
         } else
         {
             String message = Joiner.on( ' ' ).join( args );
@@ -40,7 +40,7 @@ public class CommandAlertRaw extends Command
                 }
                 if ( sender instanceof ProxiedPlayer )
                 {
-                    sender.sendMessage( new ComponentBuilder( ProxyServer.getInstance().getTranslation( "error_occurred_player" ) )
+                    sender.sendMessage( new ComponentBuilder( ProxyServer.getInstance().getTranslation( "error_message_player" ) )
                             .event( new HoverEvent( HoverEvent.Action.SHOW_TEXT, new ComponentBuilder( error.getMessage() )
                                     .color( ChatColor.RED )
                                     .create() ) )
@@ -48,7 +48,7 @@ public class CommandAlertRaw extends Command
                     );
                 } else
                 {
-                    sender.sendMessage( ProxyServer.getInstance().getTranslation( "error_occurred_console", error.getMessage() ) );
+                    sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "error_message_console", error.getMessage() ) );
                 }
             }
         }
diff --git a/module/cmd-find/src/main/java/net/md_5/bungee/module/cmd/find/CommandFind.java b/module/cmd-find/src/main/java/net/md_5/bungee/module/cmd/find/CommandFind.java
index 7ea239ac..6790af6c 100644
--- a/module/cmd-find/src/main/java/net/md_5/bungee/module/cmd/find/CommandFind.java
+++ b/module/cmd-find/src/main/java/net/md_5/bungee/module/cmd/find/CommandFind.java
@@ -18,16 +18,16 @@ public class CommandFind extends PlayerCommand
     {
         if ( args.length != 1 )
         {
-            sender.sendMessage( ProxyServer.getInstance().getTranslation( "username_needed" ) );
+            sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "error_username_needed" ) );
         } else
         {
             ProxiedPlayer player = ProxyServer.getInstance().getPlayer( args[0] );
             if ( player == null || player.getServer() == null )
             {
-                sender.sendMessage( ProxyServer.getInstance().getTranslation( "user_not_online" ) );
+                sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "error_user_not_online" ) );
             } else
             {
-                sender.sendMessage( ProxyServer.getInstance().getTranslation( "user_online_at", player.getName(), player.getServer().getInfo().getName() ) );
+                sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "command_find_user_online_at", player.getName(), player.getServer().getInfo().getName() ) );
             }
         }
     }
diff --git a/module/cmd-list/src/main/java/net/md_5/bungee/module/cmd/list/CommandList.java b/module/cmd-list/src/main/java/net/md_5/bungee/module/cmd/list/CommandList.java
index c2227110..0334eb3c 100644
--- a/module/cmd-list/src/main/java/net/md_5/bungee/module/cmd/list/CommandList.java
+++ b/module/cmd-list/src/main/java/net/md_5/bungee/module/cmd/list/CommandList.java
@@ -25,7 +25,8 @@ public class CommandList extends Command
     @Override
     public void execute(CommandSender sender, String[] args)
     {
-        for ( ServerInfo server : ProxyServer.getInstance().getServers().values() )
+        sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "command_list_header" ) );
+        for ( ServerInfo server : ProxyServer.getInstance().getServersCopy().values() )
         {
             if ( !server.canAccess( sender ) )
             {
@@ -37,11 +38,13 @@ public class CommandList extends Command
             {
                 players.add( player.getDisplayName() );
             }
-            Collections.sort( players, String.CASE_INSENSITIVE_ORDER );
+            players.sort( String.CASE_INSENSITIVE_ORDER );
 
-            sender.sendMessage( ProxyServer.getInstance().getTranslation( "command_list", server.getName(), server.getPlayers().size(), Util.format( players, ChatColor.RESET + ", " ) ) );
+            sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "command_list_server", server.getName(), server.getPlayers().size(), Util.format( players, ", " ) ) );
         }
 
-        sender.sendMessage( ProxyServer.getInstance().getTranslation( "total_players", ProxyServer.getInstance().getOnlineCount() ) );
+        sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "command_list_total", ProxyServer.getInstance().getOnlineCount() ) );
+
+        sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "command_list_footer" ) );
     }
 }
diff --git a/module/cmd-send/src/main/java/net/md_5/bungee/module/cmd/send/CommandSend.java b/module/cmd-send/src/main/java/net/md_5/bungee/module/cmd/send/CommandSend.java
index f59f9457..c2def0ee 100644
--- a/module/cmd-send/src/main/java/net/md_5/bungee/module/cmd/send/CommandSend.java
+++ b/module/cmd-send/src/main/java/net/md_5/bungee/module/cmd/send/CommandSend.java
@@ -38,13 +38,13 @@ public class CommandSend extends Command implements TabExecutor
             this.sender = sender;
             for ( ServerConnectRequest.Result result : ServerConnectRequest.Result.values() )
             {
-                results.put( result, new ArrayList<String>() );
+                results.put( result, new ArrayList<>() );
             }
         }
 
         public void lastEntryDone()
         {
-            sender.sendMessage( ChatColor.GREEN.toString() + ChatColor.BOLD + "Send Results:" );
+            sender.sendMessage( ProxyServer.getInstance().getTranslationComponent("command_send_result") );
             for ( Map.Entry<ServerConnectRequest.Result, List<String>> entry : results.entrySet() )
             {
                 ComponentBuilder builder = new ComponentBuilder( "" );
@@ -53,8 +53,8 @@ public class CommandSend extends Command implements TabExecutor
                     builder.event( new HoverEvent( HoverEvent.Action.SHOW_TEXT,
                             new ComponentBuilder( Joiner.on( ", " ).join( entry.getValue() ) ).color( ChatColor.YELLOW ).create() ) );
                 }
-                builder.append( entry.getKey().name() + ": " ).color( ChatColor.GREEN );
-                builder.append( "" + entry.getValue().size() ).bold( true );
+                builder.append( entry.getKey().name() + ": " ).color( ChatColor.GOLD );
+                builder.append( "" + entry.getValue().size() ).color( ChatColor.YELLOW );
                 sender.sendMessage( builder.create() );
             }
         }
@@ -80,7 +80,7 @@ public class CommandSend extends Command implements TabExecutor
                 callback.results.get( result ).add( player.getName() );
                 if ( result == ServerConnectRequest.Result.SUCCESS )
                 {
-                    player.sendMessage( ProxyServer.getInstance().getTranslation( "you_got_summoned", target.getName(), callback.sender.getName() ) );
+                    player.sendMessage( ProxyServer.getInstance().getTranslationComponent( "command_send_target", target.getName(), callback.sender.getName() ) );
                 }
 
                 if ( --callback.count == 0 )
@@ -101,13 +101,13 @@ public class CommandSend extends Command implements TabExecutor
     {
         if ( args.length != 2 )
         {
-            sender.sendMessage( ProxyServer.getInstance().getTranslation( "send_cmd_usage" ) );
+            sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "command_send_usage" ) );
             return;
         }
         ServerInfo server = ProxyServer.getInstance().getServerInfo( args[1] );
         if ( server == null )
         {
-            sender.sendMessage( ProxyServer.getInstance().getTranslation( "no_server" ) );
+            sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "error_no_server" ) );
             return;
         }
 
@@ -119,7 +119,7 @@ public class CommandSend extends Command implements TabExecutor
         {
             if ( !( sender instanceof ProxiedPlayer ) )
             {
-                sender.sendMessage( ProxyServer.getInstance().getTranslation( "player_only" ) );
+                sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "error_player_only" ) );
                 return;
             }
             ProxiedPlayer player = (ProxiedPlayer) sender;
@@ -136,7 +136,7 @@ public class CommandSend extends Command implements TabExecutor
                 ProxiedPlayer player = ProxyServer.getInstance().getPlayer( args[0] );
                 if ( player == null )
                 {
-                    sender.sendMessage( ProxyServer.getInstance().getTranslation( "user_not_online" ) );
+                    sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "error_user_not_online" ) );
                     return;
                 }
                 targets = Collections.singletonList( player );
@@ -154,7 +154,7 @@ public class CommandSend extends Command implements TabExecutor
             player.connect( request );
         }
 
-        sender.sendMessage( ChatColor.DARK_GREEN + "Attempting to send " + targets.size() + " players to " + server.getName() );
+        sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "command_send_sender", targets.size(), server.getName() ) );
     }
 
     @Override
diff --git a/module/cmd-server/src/main/java/net/md_5/bungee/module/cmd/server/CommandServer.java b/module/cmd-server/src/main/java/net/md_5/bungee/module/cmd/server/CommandServer.java
index 698b420f..43093d21 100644
--- a/module/cmd-server/src/main/java/net/md_5/bungee/module/cmd/server/CommandServer.java
+++ b/module/cmd-server/src/main/java/net/md_5/bungee/module/cmd/server/CommandServer.java
@@ -37,10 +37,10 @@ public class CommandServer extends Command implements TabExecutor
         {
             if ( sender instanceof ProxiedPlayer )
             {
-                sender.sendMessage( ProxyServer.getInstance().getTranslation( "current_server", ( (ProxiedPlayer) sender ).getServer().getInfo().getName() ) );
+                sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "command_server_current", ( (ProxiedPlayer) sender ).getServer().getInfo().getName() ) );
             }
 
-            ComponentBuilder serverList = new ComponentBuilder().appendLegacy( ProxyServer.getInstance().getTranslation( "server_list" ) );
+            ComponentBuilder serverList = new ComponentBuilder().appendLegacy( ProxyServer.getInstance().getTranslation( "command_server_list" ) );
             boolean first = true;
             for ( ServerInfo server : servers.values() )
             {
@@ -50,7 +50,7 @@ public class CommandServer extends Command implements TabExecutor
                     int count = server.getPlayers().size();
                     serverTextComponent.setHoverEvent( new HoverEvent(
                             HoverEvent.Action.SHOW_TEXT,
-                            new ComponentBuilder( count + ( count == 1 ? " player" : " players" ) + "\n" ).appendLegacy( ProxyServer.getInstance().getTranslation( "click_to_connect" ) ).create() )
+                            new ComponentBuilder().append( ProxyServer.getInstance().getTranslationComponent( "command_server_text", count ) ).create() )
                     );
                     serverTextComponent.setClickEvent( new ClickEvent( ClickEvent.Action.RUN_COMMAND, "/server " + server.getName() ) );
                     serverList.append( serverTextComponent );
@@ -60,19 +60,18 @@ public class CommandServer extends Command implements TabExecutor
             sender.sendMessage( serverList.create() );
         } else
         {
-            if ( !( sender instanceof ProxiedPlayer ) )
+            if ( !( sender instanceof ProxiedPlayer player ) )
             {
                 return;
             }
-            ProxiedPlayer player = (ProxiedPlayer) sender;
 
             ServerInfo server = servers.get( args[0] );
             if ( server == null )
             {
-                player.sendMessage( ProxyServer.getInstance().getTranslation( "no_server" ) );
+                player.sendMessage( ProxyServer.getInstance().getTranslationComponent( "error_no_server" ) );
             } else if ( !server.canAccess( player ) )
             {
-                player.sendMessage( ProxyServer.getInstance().getTranslation( "no_server_permission" ) );
+                player.sendMessage( ProxyServer.getInstance().getTranslationComponent( "error_no_server_permission" ) );
             } else
             {
                 player.connect( server, ServerConnectEvent.Reason.COMMAND );
diff --git a/proxy/src/main/java/dev/_2lstudios/flamecord/commands/FlameCordCommand.java b/proxy/src/main/java/dev/_2lstudios/flamecord/commands/FlameCordCommand.java
index fa0b59c2..08502063 100644
--- a/proxy/src/main/java/dev/_2lstudios/flamecord/commands/FlameCordCommand.java
+++ b/proxy/src/main/java/dev/_2lstudios/flamecord/commands/FlameCordCommand.java
@@ -16,7 +16,7 @@ public class FlameCordCommand extends Command {
 private final BungeeCord bungeeCord;
 
     public FlameCordCommand(final BungeeCord bungeeCord) {
-        super("flamecord");
+        super("flamecord", "flamecord.usage", "flame");
 
         this.bungeeCord = bungeeCord;
     }
@@ -26,46 +26,41 @@ private final BungeeCord bungeeCord;
         final FlameCord flameCord = FlameCord.getInstance();
         final MessagesConfiguration messagesConfiguration = flameCord.getMessagesConfiguration();
 
-        if (sender.hasPermission("flamecord.usage")) {
-            if (args.length > 0) {
-                final String arg0 = args[0];
+        if (args.length > 0) {
+            final String arg0 = args[0];
 
-                switch (arg0) {
-                    case "firewall": {
-                        final FirewallManager firewallManager = flameCord.getFirewallManager();
-                        final int amount = firewallManager.getFirewalled().size(),
-                                seconds = firewallManager.getSeconds();
+            switch (arg0) {
+                case "firewall": {
+                    final FirewallManager firewallManager = flameCord.getFirewallManager();
+                    final int amount = firewallManager.getFirewalled().size(),
+                            seconds = firewallManager.getSeconds();
 
-                        sender.sendMessage(TextComponent.fromLegacyText(
-                                messagesConfiguration.getTranslation("firewall_info", amount, seconds)));
-                        break;
-                    }
-                    case "reload": {
-                        // FlameCord - Collect ips from servers
-                        final Collection<String> whitelistedAddresses = new HashSet<>();
-
-                        for (final ServerInfo serverInfo : bungeeCord.getServers().values()) {
-                            whitelistedAddresses.add(serverInfo.getSocketAddress().toString());
-                        }
+                    sender.sendMessage(TextComponent.fromLegacyText(
+                            messagesConfiguration.getTranslation("command_firewall_info", amount, seconds)));
+                    break;
+                }
+                case "reload": {
+                    // FlameCord - Collect ips from servers
+                    final Collection<String> whitelistedAddresses = new HashSet<>();
 
-                        FlameCord.renew(bungeeCord.getLogger(), whitelistedAddresses);
-                        sender.sendMessage(TextComponent
-                                .fromLegacyText(messagesConfiguration.getTranslation("flamecord_reload")));
-                        break;
-                    }
-                    default: {
-                        sender.sendMessage(TextComponent.fromLegacyText(
-                                messagesConfiguration.getTranslation("flamecord_help", bungeeCord.getVersion())));
-                        break;
+                    for (final ServerInfo serverInfo : bungeeCord.getServers().values()) {
+                        whitelistedAddresses.add(serverInfo.getSocketAddress().toString());
                     }
+
+                    FlameCord.renew(bungeeCord.getLogger(), whitelistedAddresses);
+                    sender.sendMessage(TextComponent
+                            .fromLegacyText(messagesConfiguration.getTranslation("command_reload")));
+                    break;
+                }
+                default: {
+                    sender.sendMessage(TextComponent.fromLegacyText(
+                            messagesConfiguration.getTranslation("command_flamecord_help", bungeeCord.getVersion())));
+                    break;
                 }
-            } else {
-                sender.sendMessage(TextComponent
-                        .fromLegacyText(messagesConfiguration.getTranslation("flamecord_help", bungeeCord.getVersion())));
             }
-        } else {
-            sender.sendMessage(TextComponent
-                    .fromLegacyText(messagesConfiguration.getTranslation("flamecord_nopermission")));
+            } else {
+            sender.sendMessage(TextComponent.fromLegacyText(
+                    messagesConfiguration.getTranslation("command_flamecord_help", bungeeCord.getVersion())));
         }
     }
 }
diff --git a/proxy/src/main/java/io/amethystmc/amethyst/command/CommandLobby.java b/proxy/src/main/java/io/amethystmc/amethyst/command/CommandLobby.java
new file mode 100644
index 00000000..0178cc92
--- /dev/null
+++ b/proxy/src/main/java/io/amethystmc/amethyst/command/CommandLobby.java
@@ -0,0 +1,46 @@
+package io.amethystmc.amethyst.command;
+
+import dev._2lstudios.flamecord.FlameCord;
+import net.md_5.bungee.BungeeCord;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.api.plugin.Command;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+public class CommandLobby extends Command {
+
+    public CommandLobby() {
+        super( "lobby", "amethyst.command.lobby", "hub" );
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args) {
+        if ( !( sender instanceof ProxiedPlayer player ) ) {
+            sender.sendMessage( BungeeCord.getInstance().getTranslationComponent( "error_player_only" ) );
+            return;
+        }
+
+        Collection<String> lobbiesCollection = FlameCord.getInstance().getFlameCordConfiguration().getLobbies();
+        List<String> lobbies = new ArrayList<>(lobbiesCollection);
+        if (lobbies.isEmpty()) {
+            player.sendMessage( BungeeCord.getInstance().getTranslationComponent( "command_lobby_not_found" ) );
+            return;
+        }
+
+        if ( lobbies.contains( player.getServer().getInfo().getName() ) ) {
+            player.sendMessage( BungeeCord.getInstance().getTranslationComponent( "command_lobby_already_in" ) );
+            return;
+        }
+
+        String lobby = FlameCord.getInstance().getFlameCordConfiguration().getRandomLobby();
+        if ( lobby == null ) {
+            return;
+        }
+
+        player.connect( BungeeCord.getInstance().getServerInfo( lobby ) );
+        player.sendMessage( BungeeCord.getInstance().getTranslationComponent( "command_lobby_teleport" ) );
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 7dcf6669..ae1562f4 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -9,82 +9,30 @@ import com.google.common.collect.Sets;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
-
 import dev._2lstudios.flamecord.FlameCord;
 import dev._2lstudios.flamecord.commands.FlameCordCommand;
 import dev._2lstudios.flamecord.configuration.ModulesConfiguration;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
+import io.amethystmc.amethyst.command.CommandLobby;
 import io.github.waterfallmc.waterfall.conf.WaterfallConfiguration;
 import io.github.waterfallmc.waterfall.event.ProxyExceptionEvent;
 import io.github.waterfallmc.waterfall.exception.ProxyPluginEnableDisableException;
 import io.netty.bootstrap.ServerBootstrap;
-import io.netty.channel.Channel;
-import io.netty.channel.ChannelException;
-import io.netty.channel.ChannelFuture;
-import io.netty.channel.ChannelFutureListener;
-import io.netty.channel.ChannelOption;
-import io.netty.channel.EventLoopGroup;
+import io.netty.channel.*;
 import io.netty.util.ResourceLeakDetector;
-import java.io.File;
-import java.io.FileReader;
-import java.io.IOException;
-import java.io.PrintStream;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-import java.text.MessageFormat;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Locale;
-import java.util.Map;
-import java.util.MissingResourceException;
-import java.util.PropertyResourceBundle;
-import java.util.ResourceBundle;
-import java.util.Timer;
-import java.util.TimerTask;
-import java.util.UUID;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.locks.ReadWriteLock;
-import java.util.concurrent.locks.ReentrantLock;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
-import java.util.logging.Handler;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 import lombok.Getter;
 import lombok.Setter;
 import lombok.Synchronized;
-import net.md_5.bungee.api.CommandSender;
-import net.md_5.bungee.api.Favicon;
-import net.md_5.bungee.api.ProxyServer;
-import net.md_5.bungee.api.ReconnectHandler;
-import net.md_5.bungee.api.ServerPing;
-import net.md_5.bungee.api.Title;
-import net.md_5.bungee.api.chat.BaseComponent;
-import net.md_5.bungee.api.chat.KeybindComponent;
-import net.md_5.bungee.api.chat.ScoreComponent;
-import net.md_5.bungee.api.chat.SelectorComponent;
-import net.md_5.bungee.api.chat.TextComponent;
-import net.md_5.bungee.api.chat.TranslatableComponent;
+import net.md_5.bungee.api.*;
+import net.md_5.bungee.api.chat.*;
 import net.md_5.bungee.api.config.ConfigurationAdapter;
 import net.md_5.bungee.api.config.ListenerInfo;
 import net.md_5.bungee.api.config.ServerInfo;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.api.plugin.Plugin;
 import net.md_5.bungee.api.plugin.PluginManager;
-import net.md_5.bungee.chat.ComponentSerializer;
-import net.md_5.bungee.chat.KeybindComponentSerializer;
-import net.md_5.bungee.chat.ScoreComponentSerializer;
-import net.md_5.bungee.chat.SelectorComponentSerializer;
-import net.md_5.bungee.chat.TextComponentSerializer;
-import net.md_5.bungee.chat.TranslatableComponentSerializer;
-import net.md_5.bungee.command.CommandBungee;
-import net.md_5.bungee.command.CommandEnd;
-import net.md_5.bungee.command.CommandIP;
-import net.md_5.bungee.command.CommandPerms;
-import net.md_5.bungee.command.CommandReload;
-import net.md_5.bungee.command.ConsoleCommandSender;
+import net.md_5.bungee.chat.*;
+import net.md_5.bungee.command.*;
 import net.md_5.bungee.compress.CompressFactory;
 import net.md_5.bungee.conf.Configuration;
 import net.md_5.bungee.conf.YamlConfig;
@@ -104,6 +52,19 @@ import net.md_5.bungee.query.RemoteQuery;
 import net.md_5.bungee.scheduler.BungeeScheduler;
 import net.md_5.bungee.util.CaseInsensitiveMap;
 
+import java.io.File;
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.util.*;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+import java.util.logging.Handler;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
 /**
  * Main BungeeCord proxy class.
  */
@@ -207,7 +168,7 @@ public class BungeeCord extends ProxyServer
         {
             baseBundle = ResourceBundle.getBundle( "messages", Locale.ENGLISH );
         }
-        reloadMessages();
+        // reloadMessages(); // Amethyst - use FlameCord message system
 
         // This is a workaround for quite possibly the weirdest bug I have ever encountered in my life!
         // When jansi attempts to extract its natives, by default it tries to extract a specific version,
@@ -296,7 +257,7 @@ public class BungeeCord extends ProxyServer
         for (final ServerInfo serverInfo : getServers().values()) {
             whitelistedAddresses.add(serverInfo.getSocketAddress().toString());
         }
-        
+
         FlameCord.renew(logger, whitelistedAddresses);
         registerModules();
 
@@ -335,7 +296,7 @@ public class BungeeCord extends ProxyServer
             @Override
             public void run()
             {
-                independentThreadStop( getTranslation( "restart" ), false );
+                independentThreadStop( getTranslation( "info_restart" ), false );
             }
         } );
     }
@@ -422,7 +383,7 @@ public class BungeeCord extends ProxyServer
     @Override
     public void stop()
     {
-        stop( getTranslation( "restart" ) );
+        stop( getTranslation( "info_restart" ) );
     }
 
     @Override
@@ -570,6 +531,8 @@ public class BungeeCord extends ProxyServer
         return "1.17.1-1";
     }
 
+    // Amethyst - use FlameCord message system
+    /*
     public void reloadMessages()
     {
         File file = new File( "messages.properties" );
@@ -584,7 +547,7 @@ public class BungeeCord extends ProxyServer
             }
         }
     }
-
+*/
     @Override
     public String getTranslation(String name, Object... args)
     {
@@ -592,6 +555,12 @@ public class BungeeCord extends ProxyServer
         return FlameCord.getInstance().getMessagesConfiguration().getTranslation(name, args);
     }
 
+    @Override
+    public BaseComponent[] getTranslationComponent(String name, Object... args)
+    {
+        return TextComponent.fromLegacyText( getTranslation( name, args ) );
+    }
+
     @Override
     @SuppressWarnings("unchecked")
     public Collection<ProxiedPlayer> getPlayers()
@@ -871,7 +840,17 @@ public class BungeeCord extends ProxyServer
             logger.warning("Reconnect module is not able to work on Amethyst!");
         }
 
+        // Amethyst commands
+        if (getFlameCord().getFlameCordConfiguration().isLobbyEnabled()) {
+            pluginManager.registerCommand(null, new CommandLobby());
+        }
+
         // Flamecord - Commands (Had to make it like this because of maven limitations)
         pluginManager.registerCommand(null, new FlameCordCommand(this));
     }
+
+    @Override
+    public FlameCord getFlameCord() {
+        return FlameCord.getInstance();
+    }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index d57a0516..106478a2 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -398,7 +398,7 @@ public class ServerConnector extends PacketHandler
     @Override
     public void handle(EncryptionRequest encryptionRequest) throws Exception
     {
-        throw new QuietException( "Server is online mode!" );
+        throw new QuietException( "Please disable online mode on all spigot servers except BungeeCord" );
     }
 
     @Override
@@ -419,7 +419,7 @@ public class ServerConnector extends PacketHandler
             throw CancelSendSignal.INSTANCE;
         }
 
-        String message = bungee.getTranslation( "connect_kick", target.getName(), event.getKickReason() );
+        String message = bungee.getTranslation( "error_connect_kick", target.getName(), event.getKickReason() );
         if ( user.isDimensionChange() )
         {
             user.disconnect( message );
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index a847c049..66367b1f 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -327,7 +327,7 @@ public final class UserConnection implements ProxiedPlayer
                 callback.done( ServerConnectRequest.Result.ALREADY_CONNECTED, null );
             }
 
-            sendMessage( bungee.getTranslation( "already_connected" ) );
+            sendMessage( bungee.getTranslation( "error_already_connected" ) );
             return;
         }
         if ( pendingConnects.contains( target ) )
@@ -337,7 +337,7 @@ public final class UserConnection implements ProxiedPlayer
                 callback.done( ServerConnectRequest.Result.ALREADY_CONNECTING, null );
             }
 
-            sendMessage( bungee.getTranslation( "already_connecting" ) );
+            sendMessage( bungee.getTranslation( "warning_already_connecting" ) );
             return;
         }
 
@@ -373,14 +373,14 @@ public final class UserConnection implements ProxiedPlayer
                     ServerInfo def = updateAndGetNextServer( target );
                     if ( request.isRetry() && def != null && ( getServer() == null || def != getServer().getInfo() ) )
                     {
-                        sendMessage( bungee.getTranslation( "fallback_lobby" ) );
+                        sendMessage( bungee.getTranslation( "warning_fallback" ) );
                         connect( def, null, true, ServerConnectEvent.Reason.LOBBY_FALLBACK, request.getConnectTimeout() ); // Waterfall
                     } else if ( dimensionChange )
                     {
-                        disconnect( bungee.getTranslation( "fallback_kick", connectionFailMessage( future.cause() ) ) );
+                        disconnect( bungee.getTranslation( "error_fallback_kick", connectionFailMessage( future.cause() ) ) );
                     } else
                     {
-                        sendMessage( bungee.getTranslation( "fallback_kick", connectionFailMessage( future.cause() ) ) );
+                        sendMessage( bungee.getTranslation( "error_fallback_kick", connectionFailMessage( future.cause() ) ) );
                     }
                 }
             }
@@ -405,7 +405,7 @@ public final class UserConnection implements ProxiedPlayer
     {
         if ( cause instanceof ConnectTimeoutException )
         {
-            return bungee.getTranslation( "timeout" );
+            return bungee.getTranslation( "error_timeout" );
         } else
         {
             return cause.getClass().getName();
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandIP.java b/proxy/src/main/java/net/md_5/bungee/command/CommandIP.java
index 1fd5a546..97c70f5c 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandIP.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandIP.java
@@ -17,16 +17,16 @@ public class CommandIP extends PlayerCommand
     {
         if ( args.length < 1 )
         {
-            sender.sendMessage( ProxyServer.getInstance().getTranslation( "username_needed" ) );
+            sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "error_username_needed" ) );
             return;
         }
         ProxiedPlayer user = ProxyServer.getInstance().getPlayer( args[0] );
         if ( user == null )
         {
-            sender.sendMessage( ProxyServer.getInstance().getTranslation( "user_not_online" ) );
+            sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "error_user_not_online" ) );
         } else
         {
-            sender.sendMessage( ProxyServer.getInstance().getTranslation( "command_ip", args[0], user.getSocketAddress() ) );
+            sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "command_ip", args[0], user.getSocketAddress() ) );
         }
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandPerms.java b/proxy/src/main/java/net/md_5/bungee/command/CommandPerms.java
index 18422669..06147382 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandPerms.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandPerms.java
@@ -23,11 +23,11 @@ public class CommandPerms extends Command
         {
             permissions.addAll( ProxyServer.getInstance().getConfigurationAdapter().getPermissions( group ) );
         }
-        sender.sendMessage( ProxyServer.getInstance().getTranslation( "command_perms_groups", Util.csv( sender.getGroups() ) ) );
+        sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "command_perms_groups", Util.csv( sender.getGroups() ) ) );
 
         for ( String permission : permissions )
         {
-            sender.sendMessage( ProxyServer.getInstance().getTranslation( "command_perms_permission", permission ) );
+            sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "command_perms_permission", permission ) );
         }
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java b/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
index 4eba24fa..065bb51a 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
@@ -18,12 +18,12 @@ public class CommandReload extends Command
     public void execute(CommandSender sender, String[] args)
     {
         BungeeCord.getInstance().config.load();
-        BungeeCord.getInstance().reloadMessages();
+        // BungeeCord.getInstance().reloadMessages(); // Amethyst - use FlameCord message system
         BungeeCord.getInstance().stopListeners();
         BungeeCord.getInstance().startListeners();
         BungeeCord.getInstance().getPluginManager().callEvent( new ProxyReloadEvent( sender ) );
 
-        sender.sendMessage( ChatColor.BOLD.toString() + ChatColor.RED.toString() + "Amethyst has been reloaded."
+        sender.sendMessage( ChatColor.BOLD.toString() + ChatColor.RED + "Amethyst has been reloaded."
                 + " This is NOT advisable and you will not be supported with any issues that arise! Please restart Amethyst ASAP." );
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
index c41930ae..055cafe4 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
@@ -133,13 +133,13 @@ public abstract class Configuration implements ProxyConfig
                         ServerInfo destination = newServers.get(destinationName);
                         if (destination == null) {
                             BungeeCord.getInstance().getLogger().severe("Couldn't find server " + listener.getDefaultServer() + " or " + listener.getFallbackServer() + " to put player " + player.getName() + " on");
-                            player.disconnect(BungeeCord.getInstance().getTranslation("fallback_kick", "Not found on reload"));
+                            player.disconnect(BungeeCord.getInstance().getTranslation("error_fallback_kick", "Not found on reload"));
                             continue;
                         }
                         player.connect(destination, (success, cause) -> {
                             if (!success) {
                                 BungeeCord.getInstance().getLogger().log(Level.WARNING, "Failed to connect " + player.getName() + " to " + destination.getName(), cause);
-                                player.disconnect(BungeeCord.getInstance().getTranslation("fallback_kick", cause.getCause().getClass().getName()));
+                                player.disconnect(BungeeCord.getInstance().getTranslation("error_fallback_kick", cause.getCause().getClass().getName()));
                             }
                         });
                     }
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
index ae4c7ac2..dd69c6a5 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
@@ -51,7 +51,7 @@ public class YamlConfig implements ConfigurationAdapter
     private final File file;
 
     public YamlConfig() {
-        this(new File("config.yml"));
+        this(new File("proxy.yml"));
     }
 
     public YamlConfig(File file)
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index 40c016d6..d09e5531 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -88,7 +88,7 @@ public class DownstreamBridge extends PacketHandler
 
         // Waterfall start
         ServerInfo def = con.updateAndGetNextServer( server.getInfo() );
-        ServerKickEvent event = bungee.getPluginManager().callEvent( new ServerKickEvent( con, server.getInfo(), TextComponent.fromLegacyText( bungee.getTranslation( "server_went_down" ) ), def, ServerKickEvent.State.CONNECTED, ServerKickEvent.Cause.EXCEPTION ) );
+        ServerKickEvent event = bungee.getPluginManager().callEvent( new ServerKickEvent( con, server.getInfo(), TextComponent.fromLegacyText( bungee.getTranslation( "warning_server_went_down" ) ), def, ServerKickEvent.State.CONNECTED, ServerKickEvent.Cause.EXCEPTION ) );
         if ( event.isCancelled() && event.getCancelServer() != null )
         {
             server.setObsolete( true );
@@ -115,7 +115,7 @@ public class DownstreamBridge extends PacketHandler
         {
             // Waterfall start
             ServerInfo def = con.updateAndGetNextServer( server.getInfo() );
-            ServerKickEvent event = bungee.getPluginManager().callEvent( new ServerKickEvent( con, server.getInfo(), TextComponent.fromLegacyText( bungee.getTranslation( "lost_connection" ) ), def, ServerKickEvent.State.CONNECTED, ServerKickEvent.Cause.LOST_CONNECTION ) );
+            ServerKickEvent event = bungee.getPluginManager().callEvent( new ServerKickEvent( con, server.getInfo(), TextComponent.fromLegacyText( bungee.getTranslation( "error_lost_connection" ) ), def, ServerKickEvent.State.CONNECTED, ServerKickEvent.Cause.LOST_CONNECTION ) );
             if ( event.isCancelled() && event.getCancelServer() != null )
             {
                 server.setObsolete( true );
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 9805cff1..17b5c830 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -173,7 +173,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     public void handle(LegacyHandshake legacyHandshake) throws Exception
     {
         this.legacy = true;
-        ch.close( bungee.getTranslation( "outdated_client", bungee.getGameVersion() ) );
+        ch.close( bungee.getTranslation( "error_outdated_client", bungee.getGameVersion() ) );
     }
 
     @Override
@@ -260,7 +260,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             {
                 if ( error != null )
                 {
-                    result = getPingInfo( bungee.getTranslation( "ping_cannot_connect" ), protocol );
+                    result = getPingInfo( bungee.getTranslation( "error_ping_cannot_connect" ), protocol );
                     bungee.getLogger().log( Level.WARNING, "Error pinging remote server", error );
                 }
 
@@ -375,10 +375,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 {
                     if ( handshake.getProtocolVersion() > bungee.getProtocolVersion() )
                     {
-                        disconnect( bungee.getTranslation( "outdated_server", bungee.getGameVersion() ) );
+                        disconnect( bungee.getTranslation( "error_outdated_server", bungee.getGameVersion() ) );
                     } else
                     {
-                        disconnect( bungee.getTranslation( "outdated_client", bungee.getGameVersion() ) );
+                        disconnect( bungee.getTranslation( "error_outdated_client", bungee.getGameVersion() ) );
                     }
                     return;
                 }
@@ -402,14 +402,14 @@ public class InitialHandler extends PacketHandler implements PendingConnection
 
         if ( name.contains( " " ) || name.contains( "." ) )
         {
-            disconnect( bungee.getTranslation( "name_invalid" ) );
+            disconnect( bungee.getTranslation( "error_name_invalid" ) );
             return;
         }
 
         int limit = BungeeCord.getInstance().config.getPlayerLimit();
         if ( limit > 0 && bungee.getOnlineCount() >= limit )
         {
-            disconnect( bungee.getTranslation( "proxy_full" ) );
+            disconnect( bungee.getTranslation( "error_proxy_full" ) );
             return;
         }
 
@@ -417,7 +417,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         // We can just check by UUID here as names are based on UUID
         if ( !isOnlineMode() && bungee.getPlayer( getUniqueId() ) != null )
         {
-            disconnect( bungee.getTranslation( "already_connected_proxy" ) );
+            disconnect( bungee.getTranslation( "error_already_connected_proxy" ) );
             return;
         }
 
@@ -507,10 +507,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                         finish();
                         return;
                     }
-                    disconnect( bungee.getTranslation( "offline_mode_player" ) );
+                    disconnect( bungee.getTranslation( "error_no_license" ) );
                 } else
                 {
-                    disconnect( bungee.getTranslation( "mojang_fail" ) );
+                    disconnect( bungee.getTranslation( "error_mojang_fail" ) );
                     bungee.getLogger().log( Level.SEVERE, "Error authenticating " + getName() + " with minecraft.net", error );
                 }
             }
@@ -532,14 +532,14 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             if ( oldName != null )
             {
                 // TODO See #1218
-                oldName.disconnect( bungee.getTranslation( "already_connected_proxy" ) );
+                oldName.disconnect( bungee.getTranslation( "error_already_connected_proxy" ) );
             }
             // And then also for their old UUID
             ProxiedPlayer oldID = bungee.getPlayer( getUniqueId() );
             if ( oldID != null )
             {
                 // TODO See #1218
-                oldID.disconnect( bungee.getTranslation( "already_connected_proxy" ) );
+                oldID.disconnect( bungee.getTranslation( "error_already_connected_proxy" ) );
             }
         } else
         {
@@ -548,7 +548,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             if ( oldName != null )
             {
                 // TODO See #1218
-                disconnect( bungee.getTranslation( "already_connected_proxy" ) );
+                disconnect( bungee.getTranslation( "error_already_connected_proxy" ) );
                 return;
             }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index d93d8851..2461a022 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -153,7 +153,7 @@ public class UpstreamBridge extends PacketHandler
             // Section symbol, control sequences, and delete
             if ( c == '\u00A7' || c < ' ' || c == 127 )
             {
-                con.disconnect( bungee.getTranslation( "illegal_chat_characters", String.format( "\\u%04x", (int) c ) ) );
+                con.disconnect( bungee.getTranslation( "error_illegal_chat_characters", String.format( "\\u%04x", (int) c ) ) );
                 throw CancelSendSignal.INSTANCE;
             } else if (empty && !Character.isWhitespace(c)) {
                 empty = false;
-- 
2.29.2.windows.3

