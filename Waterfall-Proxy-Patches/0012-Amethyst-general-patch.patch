From ed55b3f5eaca22ca5c95f5719c767c534e39bf2f Mon Sep 17 00:00:00 2001
From: DenaryDev <denaryplanet@gmail.com>
Date: Mon, 3 Jan 2022 01:19:36 +0500
Subject: [PATCH] Amethyst general patch


diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
index 8d4b3ee5..0fa0c0dd 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
@@ -1,6 +1,7 @@
 package net.md_5.bungee.api;
 
 import com.google.common.base.Preconditions;
+import io.sapphiremc.amethyst.Amethyst;
 import java.io.File;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
@@ -334,4 +335,14 @@ public abstract class ProxyServer
      */
     public abstract Title createTitle();
 
+    // Amethyst start
+    /**
+     * Returns an instance of an amethyst, with which you can get
+     * its configuration.
+     *
+     * @return Amethyst instance
+     * @see Amethyst
+     */
+    public abstract Amethyst getAmethyst();
+    // Amethyst end
 }
diff --git a/bootstrap/src/main/java/net/md_5/bungee/Bootstrap.java b/bootstrap/src/main/java/net/md_5/bungee/Bootstrap.java
index 73006e0c..6e3ac9ac 100644
--- a/bootstrap/src/main/java/net/md_5/bungee/Bootstrap.java
+++ b/bootstrap/src/main/java/net/md_5/bungee/Bootstrap.java
@@ -1,16 +1,42 @@
 package net.md_5.bungee;
 
+import java.io.File;
+
 public class Bootstrap
 {
 
     public static void main(String[] args) throws Exception
     {
+        // Amethyst start - improve checks
+        /*
         if ( Float.parseFloat( System.getProperty( "java.class.version" ) ) < 52.0 )
         {
             System.err.println( "*** ERROR *** Amethyst requires Java 8 or above to function! Please download and install it!" );
             System.out.println( "You can check your Java version with the command: java -version" );
             return;
         }
+        */
+        float javaVersion = Float.parseFloat( System.getProperty( "java.class.version" ) );
+        if ( javaVersion < 52.0 )
+        {
+            System.err.println( "Unsupported Java detected (" + javaVersion + "). This version of Amethyst requires at least Java 8." );
+            System.err.println( " Check your Java version with the command 'java -version'." );
+            return;
+        }
+        if ( javaVersion > 61.0 )
+        {
+            System.err.println( "Unsupported Java detected (" + javaVersion + "). Only up to Java 17 is supported." );
+            if ( !Boolean.getBoolean( "Amethyst.IgnoreJavaVersion" ) ) return; // Amethyst
+        }
+
+        // Do you love Java using + and ! as string based identifiers? I sure do!
+        String path = new File( "." ).getAbsolutePath();
+        if ( path.contains( "!" ) || path.contains( "+" ) )
+        {
+            System.err.println( "Cannot run Amethyst in a directory with ! or + in the pathname. Please rename the affected folders and try again." );
+            return;
+        }
+        // Amethyst end
 
         BungeeCordLauncher.main( args );
     }
diff --git a/flame/pom.xml b/flame/pom.xml
new file mode 100644
index 00000000..e689d482
--- /dev/null
+++ b/flame/pom.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>io.sapphiremc.amethyst</groupId>
+        <artifactId>amethyst-parent</artifactId>
+        <version>1.18-R0.1-SNAPSHOT</version>
+        <relativePath>../pom.xml</relativePath>
+    </parent>
+
+    <artifactId>amethyst-flame</artifactId>
+    <version>1.18-R0.1-SNAPSHOT</version>
+    <packaging>jar</packaging>
+
+    <name>Amethyst-Flame</name>
+    <description>Amethyst adds security essentials, new commands and new configuration options</description>
+
+    <dependencies>
+        <dependency>
+            <groupId>io.sapphiremc.amethyst</groupId>
+            <artifactId>amethyst-config</artifactId>
+            <version>${project.version}</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>io.sapphiremc.amethyst</groupId>
+            <artifactId>amethyst-chat</artifactId>
+            <version>${project.version}</version>
+            <scope>compile</scope>
+        </dependency>
+    </dependencies>
+</project>
\ No newline at end of file
diff --git a/flame/src/main/java/io/sapphiremc/amethyst/Amethyst.java b/flame/src/main/java/io/sapphiremc/amethyst/Amethyst.java
new file mode 100644
index 00000000..aad66497
--- /dev/null
+++ b/flame/src/main/java/io/sapphiremc/amethyst/Amethyst.java
@@ -0,0 +1,51 @@
+package io.sapphiremc.amethyst;
+
+import io.sapphiremc.amethyst.conf.AmethystConfig;
+import java.util.logging.Logger;
+import lombok.Getter;
+import net.md_5.bungee.config.ConfigurationProvider;
+import net.md_5.bungee.config.YamlConfiguration;
+
+/**
+ * Amethyst main class
+ * Use this only to get parameter values!
+ */
+public class Amethyst {
+
+    private static Amethyst instance;
+    /**
+     * Instance of this class.
+     * @see Amethyst
+     */
+    public static Amethyst getInstance() {
+        if (instance == null) instance = new Amethyst();
+        return instance;
+    }
+
+    /**
+     * Configuration provider for our configs.
+     * @see YamlConfiguration
+     */
+    @Getter
+    private final ConfigurationProvider provider = ConfigurationProvider.getProvider(YamlConfiguration.class);
+    /**
+     * Proxy logger instance
+     */
+    @Getter
+    private Logger logger;
+    /**
+     * Amethyst main config.
+     * @see AmethystConfig
+     */
+    @Getter
+    private AmethystConfig config;
+
+    /**
+     * This method is used by the proxy to initialize this
+     * Doesn't use this if you don't know what you are doing
+     */
+    public void load(Logger logger) {
+        this.logger = logger;
+        this.config = new AmethystConfig(provider);
+    }
+}
diff --git a/flame/src/main/java/io/sapphiremc/amethyst/conf/AbstractYamlConfig.java b/flame/src/main/java/io/sapphiremc/amethyst/conf/AbstractYamlConfig.java
new file mode 100644
index 00000000..35780a69
--- /dev/null
+++ b/flame/src/main/java/io/sapphiremc/amethyst/conf/AbstractYamlConfig.java
@@ -0,0 +1,194 @@
+package io.sapphiremc.amethyst.conf;
+
+import io.sapphiremc.amethyst.Amethyst;
+import java.io.File;
+import java.io.IOException;
+import java.util.List;
+import java.util.logging.Level;
+import lombok.Getter;
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.config.Configuration;
+import net.md_5.bungee.config.ConfigurationProvider;
+
+/**
+ * Abstract class for our configurations.
+ */
+public abstract class AbstractYamlConfig {
+
+    /**
+     * The folder that the proxy data's files are located in.
+     */
+    @Getter
+    protected final File dataFolder = new File(new File("").getAbsolutePath());
+
+    /**
+     * The {@link ConfigurationProvider} provider for this configuration.
+     */
+    @Getter
+    protected final ConfigurationProvider provider;
+
+    /**
+     * File name of this configuration.
+     */
+    @Getter
+    protected final String filename;
+
+    /**
+     * File of this configuration.
+     */
+    @Getter
+    protected final File file;
+
+    /**
+     * Yaml configuration instance of this config.
+     */
+    @Getter
+    protected Configuration config;
+
+    /**
+     * Constructor for setting provider value.
+     *
+     * @param provider provider for this configuration
+     */
+    protected AbstractYamlConfig(ConfigurationProvider provider, String filename) {
+        this.provider = provider;
+        this.filename = filename;
+        this.file = new File(getDataFolder(), filename);
+    }
+
+    /**
+     * This method using for loading configuration from its file.
+     */
+    protected void init() {
+        if (!file.exists()) {
+            try {
+                file.createNewFile();
+            } catch (IOException e) {
+                throw new RuntimeException("Failed to create configuration file " + file.getName(), e);
+            }
+        }
+
+        try {
+            if (!file.exists()) throw new NullPointerException("Failed to load configuration from file " + file.toPath() + " because 'file' is null!");
+
+            this.config = provider.load(file);
+        } catch (IOException ex) {
+            throw new RuntimeException("Failed to load configuration from file " + file.toPath(), ex);
+        }
+        loadContent();
+    }
+
+    /**
+     * This method is used to load the content of this config.
+     * Doesn't use this if you don't know what you are doing.
+     *
+     * @throws UnsupportedOperationException if not implemented.
+     */
+    protected void loadContent() {
+        throw new UnsupportedOperationException("Not implemented yet");
+    }
+
+    /**
+     * Gets a {@link Boolean} from this config
+     * or writes a default value to it.
+     *
+     * @param key key
+     * @param def default value
+     * @return value from config or default value
+     */
+    protected boolean getBoolean(String key, boolean def) {
+        return (boolean) get(key, def);
+    }
+
+    /**
+     * Gets a {@link Integer} from this config
+     * or writes a default value to it.
+     *
+     * @param key key
+     * @param def default value
+     * @return value from config or default value
+     */
+    protected int getInt(String key, int def) {
+        return (int) get(key, def);
+    }
+
+    /**
+     * Gets a {@link Double} from this config
+     * or writes a default value to it.
+     *
+     * @param key key
+     * @param def default value
+     * @return value from config or default value
+     */
+    protected double getDouble(String key, double def) {
+        return (double) get(key, def);
+    }
+
+    /**
+     * Gets a {@link String} from this config
+     * or writes a default value to it.
+     *
+     * @param key key
+     * @param def default value
+     * @return value from config or default value
+     */
+    protected String getString(String key, String def) {
+        return (String) get( key, def );
+    }
+
+    /**
+     * Gets a formatted {@link String} from this config
+     * or writes a default value to it.
+     *
+     * @param key key
+     * @param def default value
+     * @return value from config or default value
+     */
+    protected String getFormattedString(String key, String def) {
+        return ChatColor.translateAlternateColorCodes('&', getString(key, def));
+    }
+
+    /**
+     * Gets a {@link List<>} of stings from this config
+     * or writes a default value to it.
+     *
+     * @param key key
+     * @param def default value
+     * @return value from config or default value
+     */
+    protected List<String> getStringList(String key, List<String> def) {
+        if (!config.contains(key)) {
+            config.set(key, def);
+            return def;
+        } else {
+            return config.getStringList(key);
+        }
+    }
+
+    /**
+     * Gets an {@link Object} from this config
+     * or writes a default value to it.
+     *
+     * @param key key
+     * @param def default value
+     * @return value from config or default value
+     */
+    protected Object get(String key, Object def) {
+        if (!config.contains(key)) {
+            config.set(key, def);
+            return def;
+        }
+        return config.get(key);
+    }
+
+    /**
+     * Save this config to its file.
+     */
+    protected void save() {
+        try {
+            provider.save(config, file);
+        } catch (IOException ex) {
+            Amethyst.getInstance().getLogger().log(Level.SEVERE, "Failed to save configuration file " + file.getName(), ex);
+        }
+    }
+}
diff --git a/flame/src/main/java/io/sapphiremc/amethyst/conf/AmethystConfig.java b/flame/src/main/java/io/sapphiremc/amethyst/conf/AmethystConfig.java
new file mode 100644
index 00000000..8b16caf7
--- /dev/null
+++ b/flame/src/main/java/io/sapphiremc/amethyst/conf/AmethystConfig.java
@@ -0,0 +1,16 @@
+package io.sapphiremc.amethyst.conf;
+
+import net.md_5.bungee.config.ConfigurationProvider;
+
+/**
+ * Amethyst main configuration class
+ * Use this only to get parameter values!
+ */
+public class AmethystConfig extends AbstractYamlConfig {
+
+    public AmethystConfig(ConfigurationProvider provider) {
+        super(provider, "amethyst.yml");
+        init();
+        save();
+    }
+}
diff --git a/pom.xml b/pom.xml
index aed1838d..61513b4e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -51,6 +51,8 @@
         <module>query</module>
         <!--<module>slf4j</module>-->
         <module>native</module>
+        <!-- Amethyst - add our module -->
+        <module>flame</module>
     </modules>
 
     <scm>
diff --git a/protocol/pom.xml b/protocol/pom.xml
index fa8f6511..5c908a10 100644
--- a/protocol/pom.xml
+++ b/protocol/pom.xml
@@ -63,5 +63,12 @@
             <version>1.3.0</version>
             <scope>compile</scope>
         </dependency>
+        <!-- Amethyst - add our dependencies -->
+        <dependency>
+            <groupId>${project.groupId}</groupId>
+            <artifactId>amethyst-flame</artifactId>
+            <version>${project.version}</version>
+            <scope>compile</scope>
+        </dependency>
     </dependencies>
 </project>
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java b/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
index 6360818c..21329e93 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
@@ -6,7 +6,7 @@ import java.util.List;
 public class ProtocolConstants
 {
 
-    private static final boolean SNAPSHOT_SUPPORT = Boolean.getBoolean( "net.md_5.bungee.protocol.snapshot" );
+   // private static final boolean SNAPSHOT_SUPPORT = Boolean.getBoolean( "net.md_5.bungee.protocol.snapshot" ); // Amethyst - remove this because its no longer needed
     public static final int MINECRAFT_1_8 = 47;
     public static final int MINECRAFT_1_9 = 107;
     public static final int MINECRAFT_1_9_1 = 108;
@@ -90,22 +90,26 @@ public class ProtocolConstants
                 ProtocolConstants.MINECRAFT_1_18_2
         );
 
+        // Amethyst start - remove this because its no longer needed
+        /*
         if ( SNAPSHOT_SUPPORT )
         {
-            // supportedVersions.add( "1.18.x" );
-            // supportedVersionIds.add( ProtocolConstants.MINECRAFT_1_18 );
+             supportedVersions.add( "1.18.x" );
+             supportedVersionIds.add( ProtocolConstants.MINECRAFT_1_18 );
         }
+        */
+        // Amethyst end
 
         SUPPORTED_VERSIONS = supportedVersions.build();
         SUPPORTED_VERSION_IDS = supportedVersionIds.build();
     }
 
-    public static final boolean isBeforeOrEq(int before, int other)
+    public static boolean isBeforeOrEq(int before, int other) // Amethyst - remove final modifier
     {
             return before <= other;
     }
 
-    public static final boolean isAfterOrEq(int after, int other)
+    public static boolean isAfterOrEq(int after, int other) // Amethyst - remove final modifier
     {
             return after >= other;
     }
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index ae2fe176..a11a7304 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -22,6 +22,7 @@ import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoopGroup;
 import io.netty.util.ResourceLeakDetector;
 import io.sapphiremc.amethyst.BuildData;
+import io.sapphiremc.amethyst.Amethyst;
 import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
@@ -173,6 +174,7 @@ public class BungeeCord extends ProxyServer
     @Getter
     private ConnectionThrottle connectionThrottle;
     private final ModuleManager moduleManager = new ModuleManager();
+    private final long serverStartTime; // Amethyst - add logging on startup
 
     {
         // TODO: Proper fallback when we interface the manager
@@ -188,7 +190,7 @@ public class BungeeCord extends ProxyServer
     public BungeeCord() throws IOException
     {
         // Java uses ! to indicate a resource inside of a jar/zip/other container. Running Bungee from within a directory that has a ! will cause this to muck up.
-        Preconditions.checkState( new File( "." ).getAbsolutePath().indexOf( '!' ) == -1, "Cannot use Amethyst in directory with ! in path." );
+        // Preconditions.checkState( new File( "." ).getAbsolutePath().indexOf( '!' ) == -1, "Cannot use Amethyst in directory with ! in path." ); // Amethyst - move this to bootstrap
 
         try
         {
@@ -224,6 +226,9 @@ public class BungeeCord extends ProxyServer
         logger = io.github.waterfallmc.waterfall.log4j.WaterfallLogger.create();
         // Waterfall end
 
+        logger.info("Booting up proxy server for minecraft 1.8 - 1.18.2"); // Amethyst - add logging on startup
+        serverStartTime = System.nanoTime(); // Amethyst - add logging on startup
+
         pluginManager = new PluginManager( this );
         getPluginManager().registerCommand( null, new CommandReload() );
         getPluginManager().registerCommand( null, new CommandEnd() );
@@ -248,6 +253,8 @@ public class BungeeCord extends ProxyServer
                 logger.info( "Using standard Java compressor." );
             }
         }
+
+        logger.info("This proxy is running " + getName() + " version " + getGitInfo() + " (MC: 1.8-1.18.2) (Implementing API version " + getVersion() + ")"); // Amethyst - add logging on startup
     }
 
     /**
@@ -278,6 +285,8 @@ public class BungeeCord extends ProxyServer
         pluginManager.loadPlugins();
         config.load();
 
+        Amethyst.getInstance().load(logger); // Amethyst - load our configs
+
         if ( config.isForgeSupport() )
         {
             registerChannel( ForgeConstants.FML_TAG );
@@ -316,6 +325,9 @@ public class BungeeCord extends ProxyServer
                 independentThreadStop( getTranslation( "restart" ), false );
             }
         } );
+
+        String done = String.format(Locale.ROOT, "%.3fs", (double) (System.nanoTime() - serverStartTime) / 1.0E9D); // Amethyst - add logging on startup
+        logger.info("Done (" + done + ")!"); // Amethyst - add logging on startup
     }
 
     public void startListeners()
@@ -816,4 +828,12 @@ public class BungeeCord extends ProxyServer
     {
         return new BungeeTitle();
     }
+
+    // Amethyst start
+    @Override
+    public Amethyst getAmethyst()
+    {
+        return Amethyst.getInstance();
+    }
+    // Amethyst end
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java b/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
index 632ff922..4373b97c 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
@@ -61,6 +61,19 @@ public class BungeeCordLauncher
             }
         }
 
+        // Amethyst start - Log Java and OS versioning to help with debugging plugin issues
+        java.lang.management.RuntimeMXBean runtimeMX = java.lang.management.ManagementFactory.getRuntimeMXBean();
+        java.lang.management.OperatingSystemMXBean osMX = java.lang.management.ManagementFactory.getOperatingSystemMXBean();
+        if (runtimeMX != null && osMX != null) {
+            String javaInfo = "Java " + runtimeMX.getSpecVersion() + " (" + runtimeMX.getVmName() + " " + runtimeMX.getVmVersion() + ")";
+            String osInfo = "Host: " + osMX.getName() + " " + osMX.getVersion() + " (" + osMX.getArch() + ")";
+
+            System.out.println("System Info: " + javaInfo + " " + osInfo);
+        } else {
+            System.out.println("Unable to read system info");
+        }
+        // Amethyst end
+
         BungeeCord bungee = new BungeeCord();
         ProxyServer.setInstance( bungee );
         bungee.getLogger().info( "Enabled " + bungee.getName() + " version " + bungee.getVersion() ); // Amethyst - use bungee name
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index 9e74d158..e1c7879d 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -164,7 +164,7 @@ public class ServerConnector extends PacketHandler
     {
         if ( packet.packet == null )
         {
-            throw new QuietException( "Unexpected packet received during server login process!\n" + BufUtil.dump( packet.buf, 16 ) );
+            throw new QuietException( "Unexpected packet received during server connector process!\n" + BufUtil.dump( packet.buf, 16 ) ); // Amethyst
         }
     }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index af81ee4a..45d97fa5 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -35,6 +35,7 @@ import net.md_5.bungee.api.SkinConfiguration;
 import net.md_5.bungee.api.Title;
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.api.chat.TextComponent;
+import net.md_5.bungee.api.config.ListenerInfo;
 import net.md_5.bungee.api.config.ServerInfo;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.api.event.PermissionCheckEvent;
@@ -392,9 +393,10 @@ public final class UserConnection implements ProxiedPlayer
                 .option( ChannelOption.CONNECT_TIMEOUT_MILLIS, request.getConnectTimeout() )
                 .remoteAddress( target.getAddress() );
         // Windows is bugged, multi homed users will just have to live with random connecting IPs
-        if ( getPendingConnection().getListener().isSetLocalAddress() && !PlatformDependent.isWindows() && getPendingConnection().getListener().getSocketAddress() instanceof InetSocketAddress )
+        final ListenerInfo listenerInfo = getPendingConnection().getListener(); // Amethyst - use local variable
+        if ( listenerInfo.isSetLocalAddress() && !PlatformDependent.isWindows() && listenerInfo.getSocketAddress() instanceof InetSocketAddress ) // Amethyst
         {
-            b.localAddress( getPendingConnection().getListener().getHost().getHostString(), 0 );
+            b.localAddress( listenerInfo.getHost().getHostString(), 0 ); // Amethyst
         }
         b.connect().addListener( listener );
     }
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java b/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
index d97c640f..fe643a8e 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
@@ -1,5 +1,6 @@
 package net.md_5.bungee.command;
 
+import io.sapphiremc.amethyst.Amethyst;
 import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.api.ChatColor;
 import net.md_5.bungee.api.CommandSender;
@@ -24,6 +25,8 @@ public class CommandReload extends Command
         proxy.startListeners();
         proxy.getPluginManager().callEvent( new ProxyReloadEvent( sender ) );
 
+        Amethyst.getInstance().load( BungeeCord.getInstance().getLogger() ); // Amethyst - load our configs
+
         sender.sendMessage( ChatColor.BOLD.toString() + ChatColor.RED.toString() + "Amethyst has been reloaded."
                 + " This is NOT advisable and you will not be supported with any issues that arise! Please restart Amethyst ASAP." );
     }
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
index 85d2197a..5d8b4edf 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
@@ -69,7 +69,7 @@ public abstract class Configuration implements ProxyConfig
     private Favicon favicon;
     private int compressionThreshold = 256;
     private boolean preventProxyConnections;
-    private boolean forgeSupport = true; // Waterfall: default to enabled
+    private boolean forgeSupport = false; // Amethyst - default to disabled -> Waterfall - default to enabled
 
     @Synchronized("serversLock") // Waterfall
     public void load()
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
index 10ccb6b7..787172e4 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
@@ -131,7 +131,7 @@ public class YamlConfig implements ConfigurationAdapter
         Map<String, Object> groups = get( "groups", null );
         if ( groups == null )
         {
-            set( "groups.md_5", Collections.singletonList( "admin" ) );
+            set( "groups.md_5", Collections.singletonList( "default" ) ); // Amethyst - set this to default, fix security issue
         }
     }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index e3557816..e0bd05ed 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -154,7 +154,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         if ( packet.packet == null )
         {
-            throw new QuietException( "Unexpected packet received during login process! " + BufUtil.dump( packet.buf, 16 ) );
+            throw new QuietException( "Unexpected packet received during server login process! " + BufUtil.dump( packet.buf, 16 ) ); // Amethyst
         }
     }
 
-- 
2.36.1.windows.1

