From 4b17d420a8062179528755326a08f4a401f62393 Mon Sep 17 00:00:00 2001
From: DenaryDev <denaryplanet@gmail.com>
Date: Mon, 3 Jan 2022 17:46:53 +0500
Subject: [PATCH] Port Velocity ProtocolVersion


diff --git a/api/src/main/java/net/md_5/bungee/api/connection/PendingConnection.java b/api/src/main/java/net/md_5/bungee/api/connection/PendingConnection.java
index f497395e..9e78f2c1 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/PendingConnection.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/PendingConnection.java
@@ -3,6 +3,7 @@ package net.md_5.bungee.api.connection;
 import java.net.InetSocketAddress;
 import java.util.UUID;
 import net.md_5.bungee.api.config.ListenerInfo;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 
 /**
  * Represents a user attempting to log into the proxy.
@@ -24,6 +25,14 @@ public interface PendingConnection extends Connection
      */
     int getVersion();
 
+    /**
+     * Get the client protocol version of the player attempting to log in.
+     *
+     * @see ProtocolVersion
+     * @return the protocol version of the remote client
+     */
+    ProtocolVersion getProtocol();
+
     /**
      * Get the requested virtual host that the client tried to connect to.
      *
diff --git a/protocol/src/main/java/io/sapphiremc/amethyst/api/protocol/ProtocolDirection.java b/protocol/src/main/java/io/sapphiremc/amethyst/api/protocol/ProtocolDirection.java
new file mode 100644
index 00000000..7c74af73
--- /dev/null
+++ b/protocol/src/main/java/io/sapphiremc/amethyst/api/protocol/ProtocolDirection.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) 2022 DenaryDev
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program.  If not, see
+ * <http://www.gnu.org/licenses/gpl-3.0.html>.
+ */
+package io.sapphiremc.amethyst.api.protocol;
+
+/**
+ * Created 03.01.2022
+ *
+ * @author DenaryDev
+ */
+public enum ProtocolDirection {
+    TO_CLIENT,
+    TO_SERVER
+}
diff --git a/protocol/src/main/java/io/sapphiremc/amethyst/api/protocol/ProtocolVersion.java b/protocol/src/main/java/io/sapphiremc/amethyst/api/protocol/ProtocolVersion.java
new file mode 100644
index 00000000..7793437a
--- /dev/null
+++ b/protocol/src/main/java/io/sapphiremc/amethyst/api/protocol/ProtocolVersion.java
@@ -0,0 +1,308 @@
+/*
+ * Copyright (c) 2022 DenaryDev
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation, either version 3 of the
+ * License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public
+ * License along with this program.  If not, see
+ * <http://www.gnu.org/licenses/gpl-3.0.html>.
+ */
+package io.sapphiremc.amethyst.api.protocol;
+
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Sets;
+import java.util.EnumSet;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+/**
+ * Represents each Minecraft protocol version.
+ *
+ * Created 03.01.2022
+ *
+ * @author Velocity Team, DenaryDev
+ */
+public enum ProtocolVersion {
+    UNKNOWN(-1, "Unknown"),
+    LEGACY(-2, "Legacy"),
+    MINECRAFT_1_7_2(4,
+            "1.7.2", "1.7.3", "1.7.4", "1.7.5"),
+    MINECRAFT_1_7_6(5,
+            "1.7.6", "1.7.7", "1.7.8", "1.7.9", "1.7.10"),
+    MINECRAFT_1_8(47,
+            "1.8", "1.8.1", "1.8.2", "1.8.3", "1.8.4", "1.8.5", "1.8.6", "1.8.7", "1.8.8", "1.8.9"),
+    MINECRAFT_1_9(107, "1.9"),
+    MINECRAFT_1_9_1(108, "1.9.1"),
+    MINECRAFT_1_9_2(109, "1.9.2"),
+    MINECRAFT_1_9_4(110, "1.9.3", "1.9.4"),
+    MINECRAFT_1_10(210, "1.10", "1.10.1", "1.10.2"),
+    MINECRAFT_1_11(315, "1.11"),
+    MINECRAFT_1_11_1(316, "1.11.1", "1.11.2"),
+    MINECRAFT_1_12(335, "1.12"),
+    MINECRAFT_1_12_1(338, "1.12.1"),
+    MINECRAFT_1_12_2(340, "1.12.2"),
+    MINECRAFT_1_13(393, "1.13"),
+    MINECRAFT_1_13_1(401, "1.13.1"),
+    MINECRAFT_1_13_2(404, "1.13.2"),
+    MINECRAFT_1_14(477, "1.14"),
+    MINECRAFT_1_14_1(480, "1.14.1"),
+    MINECRAFT_1_14_2(485, "1.14.2"),
+    MINECRAFT_1_14_3(490, "1.14.3"),
+    MINECRAFT_1_14_4(498, "1.14.4"),
+    MINECRAFT_1_15(573, "1.15"),
+    MINECRAFT_1_15_1(575, "1.15.1"),
+    MINECRAFT_1_15_2(578, "1.15.2"),
+    MINECRAFT_1_16(735, "1.16"),
+    MINECRAFT_1_16_1(736, "1.16.1"),
+    MINECRAFT_1_16_2(751, "1.16.2"),
+    MINECRAFT_1_16_3(753, "1.16.3"),
+    MINECRAFT_1_16_4(754, "1.16.4", "1.16.5"),
+    MINECRAFT_1_17(755, "1.17"),
+    MINECRAFT_1_17_1(756, "1.17.1"),
+    MINECRAFT_1_18(757, "1.18", "1.18.1");
+
+    private static final int SNAPSHOT_BIT = 30;
+
+    private final int protocol;
+    private final int snapshotProtocol;
+    private final String[] names;
+
+    /**
+     * Represents the lowest supported version.
+     */
+    public static final ProtocolVersion MINIMUM_VERSION = MINECRAFT_1_8;
+    /**
+     * Represents the highest supported version.
+     */
+    public static final ProtocolVersion MAXIMUM_VERSION = values()[values().length - 1];
+
+    /**
+     * The user-friendly representation of the lowest and highest supported versions.
+     */
+    public static final String SUPPORTED_VERSION_STRING = String
+            .format("%s-%s", MINIMUM_VERSION.getVersionIntroducedIn(),
+                    MAXIMUM_VERSION.getMostRecentSupportedVersion());
+
+    /**
+     * A map linking the protocol version number to its {@link ProtocolVersion} representation.
+     */
+    public static final ImmutableMap<Integer, ProtocolVersion> ID_TO_PROTOCOL_CONSTANT;
+
+    static {
+        Map<Integer, ProtocolVersion> versions = new HashMap<>();
+        for (ProtocolVersion version : values()) {
+            // For versions where the snapshot is compatible with the prior release version, Mojang will
+            // default to that. Follow that behavior since there is precedent (all the Minecraft 1.8
+            // minor releases use the same protocol version).
+            versions.putIfAbsent(version.protocol, version);
+            if (version.snapshotProtocol != -1) {
+                versions.put(version.snapshotProtocol, version);
+            }
+        }
+
+        ID_TO_PROTOCOL_CONSTANT = ImmutableMap.copyOf(versions);
+    }
+
+    /**
+     * A set containing all the protocols that the proxy actually supports, excluding special-purpose
+     * "versions" like {@link #LEGACY} and {@link #UNKNOWN}.
+     */
+    public static final Set<ProtocolVersion> SUPPORTED_VERSIONS;
+
+    static {
+        Set<ProtocolVersion> versions = EnumSet.noneOf(ProtocolVersion.class);
+        for (ProtocolVersion value : values()) {
+            if (!value.isUnknown() && !value.isLegacy()) {
+                versions.add(value);
+            }
+        }
+
+        SUPPORTED_VERSIONS = Sets.immutableEnumSet(versions);
+    }
+
+    ProtocolVersion(int protocol, String... names) {
+        this(protocol, -1, names);
+    }
+
+    ProtocolVersion(int protocol, int snapshotProtocol, String... names) {
+        if (snapshotProtocol != -1) {
+            this.snapshotProtocol = (1 << SNAPSHOT_BIT) | snapshotProtocol;
+        } else {
+            this.snapshotProtocol = -1;
+        }
+
+        this.protocol = protocol;
+        this.names = names;
+    }
+
+    /**
+     * Returns the protocol as an int.
+     *
+     * @return the protocol version
+     */
+    public int getProtocol() {
+        return protocol == -1 ? snapshotProtocol : protocol;
+    }
+
+    /**
+     * Returns the user-friendly name for this protocol.
+     *
+     * @return the protocol name
+     * @deprecated A protocol may be shared by multiple versions. Use @link{#getVersionIntroducedIn()}
+     *     or @link{#getVersionsSupportedBy()} to get more accurate version names.
+     */
+    @Deprecated
+    public String getName() {
+        return getVersionIntroducedIn();
+    }
+
+    /**
+     * Returns the user-friendly name of the version
+     * this protocol was introduced in.
+     *
+     * @return the version name
+     */
+    public String getVersionIntroducedIn() {
+        return names[0];
+    }
+
+    /**
+     * Returns the user-friendly name of the last
+     * version this protocol is valid for.
+     *
+     * @return the version name
+     */
+    public String getMostRecentSupportedVersion() {
+        return names[names.length - 1];
+    }
+
+    /**
+     * Returns all versions this protocol is valid for.
+     *
+     * @return the version names
+     */
+    public List<String> getVersionsSupportedBy(){
+        return ImmutableList.copyOf(names);
+    }
+
+    /**
+     * Gets the {@link ProtocolVersion} for the given protocol.
+     *
+     * @param protocol the protocol as an int
+     * @return the protocol version
+     */
+    public static ProtocolVersion getProtocolVersion(int protocol) {
+        return ID_TO_PROTOCOL_CONSTANT.getOrDefault(protocol, UNKNOWN);
+    }
+
+    /**
+     * Returns whether the protocol is supported.
+     *
+     * @param protocol the protocol as an int
+     * @return if the protocol supported
+     */
+    public static boolean isSupported(int protocol) {
+        ProtocolVersion version = ID_TO_PROTOCOL_CONSTANT.get(protocol);
+
+        return version != null && !version.isUnknown();
+    }
+
+    /**
+     * Returns whether the {@link ProtocolVersion} is supported.
+     *
+     * @param version the protocol version
+     * @return if the protocol supported
+     */
+    public static boolean isSupported(ProtocolVersion version) {
+        return version != null && !version.isUnknown();
+    }
+
+    /**
+     * Returns whether this {@link ProtocolVersion} is unknown to the proxy.
+     *
+     * @return if the protocol is unknown
+     */
+    public boolean isUnknown() {
+        return this == UNKNOWN;
+    }
+
+    /**
+     * Returns whether this {@link ProtocolVersion} is a legacy protocol.
+     *
+     * @return if the protocol is legacy
+     */
+    public boolean isLegacy() {
+        return this == LEGACY;
+    }
+
+    /**
+     * Returns whether this {@link ProtocolVersion} is before
+     * than other protocol version.
+     *
+     * @param protocol other protocol version
+     * @return if the protocol is before than other
+     */
+    public boolean isBefore(int protocol) {
+        return this.protocol < protocol;
+    }
+
+    /**
+     * Returns whether this {@link ProtocolVersion} is before
+     * or equals than other protocol version.
+     *
+     * @param protocol other protocol version
+     * @return if the protocol is before or equals than other
+     */
+    public boolean isBeforeOrEq(int protocol) {
+        return this.protocol <= protocol;
+    }
+
+    /**
+     * Returns whether this {@link ProtocolVersion} is equals
+     * other protocol version.
+     *
+     * @param protocol other protocol version
+     * @return if the protocol equals other
+     */
+    public boolean isEquals(int protocol) {
+        return this.protocol == protocol;
+    }
+
+    /**
+     * Returns whether this {@link ProtocolVersion} is after
+     * or equals than other protocol version.
+     *
+     * @param protocol other protocol version
+     * @return if the protocol is after or equals than other
+     */
+    public boolean isAfterOrEq(int protocol) {
+        return this.protocol >= protocol;
+    }
+
+    /**
+     * Returns whether this {@link ProtocolVersion} is after
+     * than other protocol version.
+     *
+     * @param protocol other protocol version
+     * @return if the protocol is after than other
+     */
+    public boolean isAfter(int protocol) {
+        return this.protocol > protocol;
+    }
+
+    @Override
+    public String toString() {
+        return getVersionIntroducedIn();
+    }
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
index a310844d..bd543076 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
@@ -5,6 +5,7 @@ import com.google.common.base.Preconditions;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufInputStream;
 import io.netty.buffer.ByteBufOutputStream;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.IOException;
@@ -153,8 +154,7 @@ public abstract class DefinedPacket
         int out = 0;
         int bytes = 0;
         byte in;
-        while ( true )
-        {
+        do {
             // Waterfall start
             if (input.readableBytes() == 0) {
                 throw PROCESS_TRACES ? new BadPacketException("No more bytes reading varint") : NO_MORE_BYTES_EXCEPTION;
@@ -169,11 +169,7 @@ public abstract class DefinedPacket
                 throw PROCESS_TRACES ? new BadPacketException( "VarInt too big" ) : OVERSIZED_VAR_INT_EXCEPTION;
             }
 
-            if ( ( in & 0x80 ) != 0x80 )
-            {
-                break;
-            }
-        }
+        } while ( ( in & 0x80 ) == 0x80 );
 
         return out;
     }
@@ -181,8 +177,7 @@ public abstract class DefinedPacket
     public static void writeVarInt(int value, ByteBuf output)
     {
         int part;
-        while ( true )
-        {
+        do {
             part = value & 0x7F;
 
             value >>>= 7;
@@ -193,11 +188,7 @@ public abstract class DefinedPacket
 
             output.writeByte( part );
 
-            if ( value == 0 )
-            {
-                break;
-            }
-        }
+        } while ( value != 0 );
     }
 
     public static int readVarShort(ByteBuf buf)
@@ -261,7 +252,7 @@ public abstract class DefinedPacket
         throw new UnsupportedOperationException( "Packet must implement read method" );
     }
 
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         read( buf );
     }
@@ -271,7 +262,7 @@ public abstract class DefinedPacket
         throw new UnsupportedOperationException( "Packet must implement write method" );
     }
 
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         write( buf );
     }
@@ -295,11 +286,11 @@ public abstract class DefinedPacket
             = new OverflowPacketException("A string had more data than allowed. For more "
             + "information, launch Waterfall with -Dwaterfall.packet-decode-logging=true");
 
-    public int expectedMaxLength(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
+    public int expectedMaxLength(ByteBuf buf, ProtocolDirection direction, int protocolVersion) {
         return -1;
     }
 
-    public int expectedMinLength(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
+    public int expectedMinLength(ByteBuf buf, ProtocolDirection direction, int protocolVersion) {
         return 0;
     }
     // Waterfall end
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
index cde732f7..dfe60ab5 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
@@ -5,6 +5,7 @@ import io.netty.buffer.ByteBufUtil;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.CorruptedFrameException;
 import io.netty.handler.codec.MessageToMessageDecoder;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import java.util.List;
 import lombok.AllArgsConstructor;
 import lombok.Setter;
@@ -130,7 +131,7 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
 
 
     private void doLengthSanityChecks(ByteBuf buf, DefinedPacket packet,
-                                      ProtocolConstants.Direction direction, int packetId) throws Exception {
+                                      ProtocolDirection direction, int packetId) throws Exception {
         int expectedMinLen = packet.expectedMinLength(buf, direction, protocolVersion);
         int expectedMaxLen = packet.expectedMaxLength(buf, direction, protocolVersion);
         if (expectedMaxLen != -1 && buf.readableBytes() > expectedMaxLen) {
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index 7f0b71c9..9d2c3ed2 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -6,6 +6,8 @@ import gnu.trove.map.TIntObjectMap;
 import gnu.trove.map.TObjectIntMap;
 import gnu.trove.map.hash.TIntObjectHashMap;
 import gnu.trove.map.hash.TObjectIntHashMap;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.util.function.Supplier;
 import lombok.Data;
 import lombok.Getter;
@@ -47,6 +49,7 @@ import net.md_5.bungee.protocol.packet.Title;
 import net.md_5.bungee.protocol.packet.TitleTimes;
 import net.md_5.bungee.protocol.packet.ViewDistance;
 
+// Amethyst - use velocity protocol api
 public enum Protocol
 {
 
@@ -58,7 +61,7 @@ public enum Protocol
             TO_SERVER.registerPacket(
                     Handshake.class,
                     Handshake::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x00 )
             );
         }
     },
@@ -70,301 +73,301 @@ public enum Protocol
             TO_CLIENT.registerPacket(
                     KeepAlive.class,
                     KeepAlive::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x1F ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x21 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x20 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x21 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x20 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x1F ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x21 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x00 ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x1F ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x21 ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x20 ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x21 ),
+                    map( ProtocolVersion.MINECRAFT_1_16, 0x20 ),
+                    map( ProtocolVersion.MINECRAFT_1_16_2, 0x1F ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x21 )
             );
             TO_CLIENT.registerPacket(
                     Login.class,
                     Login::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x23 ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x25 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x26 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x25 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x24 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x26 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x01 ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x23 ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x25 ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x26 ),
+                    map( ProtocolVersion.MINECRAFT_1_16, 0x25 ),
+                    map( ProtocolVersion.MINECRAFT_1_16_2, 0x24 ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x26 )
             );
             TO_CLIENT.registerPacket(
                     Chat.class,
                     Chat::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x02 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x0F ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x0E ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x0F ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x0E ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x0F )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x02 ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x0F ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x0E ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x0F ),
+                    map( ProtocolVersion.MINECRAFT_1_16, 0x0E ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x0F )
             );
             TO_CLIENT.registerPacket(
                     Respawn.class,
                     Respawn::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x07 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x33 ),
-                    map( ProtocolConstants.MINECRAFT_1_12, 0x34 ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x35 ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x38 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x3A ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x3B ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x3A ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x39 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x3D )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x07 ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x33 ),
+                    map( ProtocolVersion.MINECRAFT_1_12, 0x34 ),
+                    map( ProtocolVersion.MINECRAFT_1_12_1, 0x35 ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x38 ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x3A ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x3B ),
+                    map( ProtocolVersion.MINECRAFT_1_16, 0x3A ),
+                    map( ProtocolVersion.MINECRAFT_1_16_2, 0x39 ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x3D )
             );
             TO_CLIENT.registerPacket(
                     BossBar.class,
                     BossBar::new,
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x0C ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x0D ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x0C ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x0D )
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x0C ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x0D ),
+                    map( ProtocolVersion.MINECRAFT_1_16, 0x0C ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x0D )
             );
             // Waterfall start
             TO_CLIENT.registerPacket(
                     EntityEffect.class,
                     EntityEffect::new,
-                    map(ProtocolConstants.MINECRAFT_1_8, 0x1D),
-                    map(ProtocolConstants.MINECRAFT_1_9, Integer.MIN_VALUE)
+                    map(ProtocolVersion.MINECRAFT_1_8, 0x1D),
+                    map(ProtocolVersion.MINECRAFT_1_9, Integer.MIN_VALUE)
             );
             TO_CLIENT.registerPacket(
                     EntityRemoveEffect.class,
                     EntityRemoveEffect::new,
-                    map(ProtocolConstants.MINECRAFT_1_8, 0x1E),
-                    map(ProtocolConstants.MINECRAFT_1_9, Integer.MIN_VALUE)
+                    map(ProtocolVersion.MINECRAFT_1_8, 0x1E),
+                    map(ProtocolVersion.MINECRAFT_1_9, Integer.MIN_VALUE)
             );
             // Waterfall end
             TO_CLIENT.registerPacket(
                     PlayerListItem.class, // PlayerInfo
                     PlayerListItem::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x38 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x2D ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x2E ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x30 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x33 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x34 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x33 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x32 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x36 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x38 ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x2D ),
+                    map( ProtocolVersion.MINECRAFT_1_12_1, 0x2E ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x30 ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x33 ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x34 ),
+                    map( ProtocolVersion.MINECRAFT_1_16, 0x33 ),
+                    map( ProtocolVersion.MINECRAFT_1_16_2, 0x32 ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x36 )
             );
             TO_CLIENT.registerPacket(
                     TabCompleteResponse.class,
                     TabCompleteResponse::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x3A ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x0E ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x10 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x11 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x10 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x0F ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x11 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x3A ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x0E ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x10 ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x11 ),
+                    map( ProtocolVersion.MINECRAFT_1_16, 0x10 ),
+                    map( ProtocolVersion.MINECRAFT_1_16_2, 0x0F ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x11 )
             );
             TO_CLIENT.registerPacket(
                     ScoreboardObjective.class,
                     ScoreboardObjective::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x3B ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x3F ),
-                    map( ProtocolConstants.MINECRAFT_1_12, 0x41 ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x42 ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x45 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x49 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x4A ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x53 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x3B ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x3F ),
+                    map( ProtocolVersion.MINECRAFT_1_12, 0x41 ),
+                    map( ProtocolVersion.MINECRAFT_1_12_1, 0x42 ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x45 ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x49 ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x4A ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x53 )
             );
             TO_CLIENT.registerPacket(
                     ScoreboardScore.class,
                     ScoreboardScore::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x3C ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x42 ),
-                    map( ProtocolConstants.MINECRAFT_1_12, 0x44 ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x45 ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x48 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x4C ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x4D ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x56 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x3C ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x42 ),
+                    map( ProtocolVersion.MINECRAFT_1_12, 0x44 ),
+                    map( ProtocolVersion.MINECRAFT_1_12_1, 0x45 ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x48 ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x4C ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x4D ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x56 )
             );
             TO_CLIENT.registerPacket(
                     ScoreboardDisplay.class,
                     ScoreboardDisplay::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x3D ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x38 ),
-                    map( ProtocolConstants.MINECRAFT_1_12, 0x3A ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x3B ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x3E ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x42 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x43 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x4C )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x3D ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x38 ),
+                    map( ProtocolVersion.MINECRAFT_1_12, 0x3A ),
+                    map( ProtocolVersion.MINECRAFT_1_12_1, 0x3B ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x3E ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x42 ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x43 ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x4C )
             );
             TO_CLIENT.registerPacket(
                     Team.class,
                     Team::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x3E ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x41 ),
-                    map( ProtocolConstants.MINECRAFT_1_12, 0x43 ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x44 ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x47 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x4B ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x4C ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x55 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x3E ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x41 ),
+                    map( ProtocolVersion.MINECRAFT_1_12, 0x43 ),
+                    map( ProtocolVersion.MINECRAFT_1_12_1, 0x44 ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x47 ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x4B ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x4C ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x55 )
             );
             TO_CLIENT.registerPacket(
                     PluginMessage.class,
                     PluginMessage::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x3F ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x18 ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x19 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x18 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x19 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x18 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x17 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x18 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x3F ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x18 ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x19 ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x18 ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x19 ),
+                    map( ProtocolVersion.MINECRAFT_1_16, 0x18 ),
+                    map( ProtocolVersion.MINECRAFT_1_16_2, 0x17 ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x18 )
             );
             TO_CLIENT.registerPacket(
                     Kick.class,
                     Kick::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x40 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x1A ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x1B ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x1A ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x1B ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x1A ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x19 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x1A )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x40 ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x1A ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x1B ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x1A ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x1B ),
+                    map( ProtocolVersion.MINECRAFT_1_16, 0x1A ),
+                    map( ProtocolVersion.MINECRAFT_1_16_2, 0x19 ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x1A )
             );
             TO_CLIENT.registerPacket(
                     Title.class,
                     Title::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x45 ),
-                    map( ProtocolConstants.MINECRAFT_1_12, 0x47 ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x48 ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x4B ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x4F ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x50 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x4F ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x59 ),
-                    map( ProtocolConstants.MINECRAFT_1_18, 0x5A )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x45 ),
+                    map( ProtocolVersion.MINECRAFT_1_12, 0x47 ),
+                    map( ProtocolVersion.MINECRAFT_1_12_1, 0x48 ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x4B ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x4F ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x50 ),
+                    map( ProtocolVersion.MINECRAFT_1_16, 0x4F ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x59 ),
+                    map( ProtocolVersion.MINECRAFT_1_18, 0x5A )
             );
             TO_CLIENT.registerPacket(
                     ClearTitles.class,
                     ClearTitles::new,
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x10 )
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x10 )
             );
             TO_CLIENT.registerPacket(
                     Subtitle.class,
                     Subtitle::new,
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x57 ),
-                    map( ProtocolConstants.MINECRAFT_1_18, 0x58 )
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x57 ),
+                    map( ProtocolVersion.MINECRAFT_1_18, 0x58 )
             );
             TO_CLIENT.registerPacket(
                     TitleTimes.class,
                     TitleTimes::new,
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x5A ),
-                    map( ProtocolConstants.MINECRAFT_1_18, 0x5B )
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x5A ),
+                    map( ProtocolVersion.MINECRAFT_1_18, 0x5B )
             );
             TO_CLIENT.registerPacket(
                     PlayerListHeaderFooter.class,
                     PlayerListHeaderFooter::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x47 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x48 ),
-                    map( ProtocolConstants.MINECRAFT_1_9_4, 0x47 ),
-                    map( ProtocolConstants.MINECRAFT_1_12, 0x49 ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x4A ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x4E ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x53 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x54 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x53 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x5E ),
-                    map( ProtocolConstants.MINECRAFT_1_18, 0x5F )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x47 ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x48 ),
+                    map( ProtocolVersion.MINECRAFT_1_9_4, 0x47 ),
+                    map( ProtocolVersion.MINECRAFT_1_12, 0x49 ),
+                    map( ProtocolVersion.MINECRAFT_1_12_1, 0x4A ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x4E ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x53 ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x54 ),
+                    map( ProtocolVersion.MINECRAFT_1_16, 0x53 ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x5E ),
+                    map( ProtocolVersion.MINECRAFT_1_18, 0x5F )
             );
             TO_CLIENT.registerPacket(
                     EntityStatus.class,
                     EntityStatus::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x1A ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x1B ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x1C ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x1B ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x1C ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x1B ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x1A ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x1B )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x1A ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x1B ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x1C ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x1B ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x1C ),
+                    map( ProtocolVersion.MINECRAFT_1_16, 0x1B ),
+                    map( ProtocolVersion.MINECRAFT_1_16_2, 0x1A ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x1B )
             );
             TO_CLIENT.registerPacket(
                     Commands.class,
                     Commands::new,
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x11 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x12 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x11 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x10 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x12 )
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x11 ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x12 ),
+                    map( ProtocolVersion.MINECRAFT_1_16, 0x11 ),
+                    map( ProtocolVersion.MINECRAFT_1_16_2, 0x10 ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x12 )
             );
             TO_CLIENT.registerPacket(
                     GameState.class,
                     GameState::new,
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x1F ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x1E ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x1D ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x1E )
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x1F ),
+                    map( ProtocolVersion.MINECRAFT_1_16, 0x1E ),
+                    map( ProtocolVersion.MINECRAFT_1_16_2, 0x1D ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x1E )
             );
             TO_CLIENT.registerPacket(
                     ViewDistance.class,
                     ViewDistance::new,
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x41 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x42 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x41 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x4A )
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x41 ),
+                    map( ProtocolVersion.MINECRAFT_1_15, 0x42 ),
+                    map( ProtocolVersion.MINECRAFT_1_16, 0x41 ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x4A )
             );
 
             TO_SERVER.registerPacket(
                     KeepAlive.class,
                     KeepAlive::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x0B ),
-                    map( ProtocolConstants.MINECRAFT_1_12, 0x0C ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x0B ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x0E ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x0F ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x10 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x0F )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x00 ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x0B ),
+                    map( ProtocolVersion.MINECRAFT_1_12, 0x0C ),
+                    map( ProtocolVersion.MINECRAFT_1_12_1, 0x0B ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x0E ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x0F ),
+                    map( ProtocolVersion.MINECRAFT_1_16, 0x10 ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x0F )
             );
             TO_SERVER.registerPacket(
                     Chat.class,
                     Chat::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x02 ),
-                    map( ProtocolConstants.MINECRAFT_1_12, 0x03 ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x02 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x03 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x01 ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x02 ),
+                    map( ProtocolVersion.MINECRAFT_1_12, 0x03 ),
+                    map( ProtocolVersion.MINECRAFT_1_12_1, 0x02 ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x03 )
             );
             TO_SERVER.registerPacket(
                     TabCompleteRequest.class,
                     TabCompleteRequest::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x14 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x01 ),
-                    map( ProtocolConstants.MINECRAFT_1_12, 0x02 ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x01 ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x05 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x06 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x14 ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x01 ),
+                    map( ProtocolVersion.MINECRAFT_1_12, 0x02 ),
+                    map( ProtocolVersion.MINECRAFT_1_12_1, 0x01 ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x05 ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x06 )
             );
             TO_SERVER.registerPacket(
                     ClientSettings.class,
                     ClientSettings::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x15 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x04 ),
-                    map( ProtocolConstants.MINECRAFT_1_12, 0x05 ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x04 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x05 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x15 ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x04 ),
+                    map( ProtocolVersion.MINECRAFT_1_12, 0x05 ),
+                    map( ProtocolVersion.MINECRAFT_1_12_1, 0x04 ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x05 )
             );
             TO_SERVER.registerPacket(
                     PluginMessage.class,
                     PluginMessage::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x17 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x09 ),
-                    map( ProtocolConstants.MINECRAFT_1_12, 0x0A ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x09 ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x0A ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x0B ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x0A )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x17 ),
+                    map( ProtocolVersion.MINECRAFT_1_9, 0x09 ),
+                    map( ProtocolVersion.MINECRAFT_1_12, 0x0A ),
+                    map( ProtocolVersion.MINECRAFT_1_12_1, 0x09 ),
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x0A ),
+                    map( ProtocolVersion.MINECRAFT_1_14, 0x0B ),
+                    map( ProtocolVersion.MINECRAFT_1_17, 0x0A )
             );
         }
     },
@@ -376,23 +379,23 @@ public enum Protocol
             TO_CLIENT.registerPacket(
                     StatusResponse.class,
                     StatusResponse::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x00 )
             );
             TO_CLIENT.registerPacket(
                     PingPacket.class,
                     PingPacket::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x01 )
             );
 
             TO_SERVER.registerPacket(
                     StatusRequest.class,
                     StatusRequest::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x00 )
             );
             TO_SERVER.registerPacket(
                     PingPacket.class,
                     PingPacket::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x01 )
             );
         }
     },
@@ -404,65 +407,65 @@ public enum Protocol
             TO_CLIENT.registerPacket(
                     Kick.class,
                     Kick::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x00 )
             );
             TO_CLIENT.registerPacket(
                     EncryptionRequest.class,
                     EncryptionRequest::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x01 )
             );
             TO_CLIENT.registerPacket(
                     LoginSuccess.class,
                     LoginSuccess::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x02 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x02 )
             );
             TO_CLIENT.registerPacket(
                     SetCompression.class,
                     SetCompression::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x03 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x03 )
             );
             TO_CLIENT.registerPacket(
                     LoginPayloadRequest.class,
                     LoginPayloadRequest::new,
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x04 )
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x04 )
             );
 
             TO_SERVER.registerPacket(
                     LoginRequest.class,
                     LoginRequest::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x00 )
             );
             TO_SERVER.registerPacket(
                     EncryptionResponse.class,
                     EncryptionResponse::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 )
+                    map( ProtocolVersion.MINECRAFT_1_8, 0x01 )
             );
             TO_SERVER.registerPacket(
                     LoginPayloadResponse.class,
                     LoginPayloadResponse::new,
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x02 )
+                    map( ProtocolVersion.MINECRAFT_1_13, 0x02 )
             );
         }
     };
     /*========================================================================*/
     public static final int MAX_PACKET_ID = 0xFF;
     /*========================================================================*/
-    final DirectionData TO_SERVER = new DirectionData( this, ProtocolConstants.Direction.TO_SERVER );
-    final DirectionData TO_CLIENT = new DirectionData( this, ProtocolConstants.Direction.TO_CLIENT );
+    final DirectionData TO_SERVER = new DirectionData( this, ProtocolDirection.TO_SERVER );
+    final DirectionData TO_CLIENT = new DirectionData( this, ProtocolDirection.TO_CLIENT );
 
     public static void main(String[] args)
     {
-        for ( int version : ProtocolConstants.SUPPORTED_VERSION_IDS )
+        for ( ProtocolVersion protocolVersion : ProtocolVersion.SUPPORTED_VERSIONS )
         {
-            dump( version );
+            dump( protocolVersion );
         }
     }
 
-    private static void dump(int version)
+    private static void dump(ProtocolVersion version)
     {
         for ( Protocol protocol : Protocol.values() )
         {
-            dump( version, protocol );
+            dump( version.getProtocol(), protocol );
         }
     }
 
@@ -487,8 +490,8 @@ public enum Protocol
     @Data
     private static class ProtocolData
     {
-
-        private final int protocolVersion;
+       // private final int protocolVersion;
+        private final ProtocolVersion protocolVersion;
         private final TObjectIntMap<Class<? extends DefinedPacket>> packetMap = new TObjectIntHashMap<>( MAX_PACKET_ID );
         @SuppressWarnings("unchecked")
         private final Supplier<? extends DefinedPacket>[] packetConstructors = new Supplier[ MAX_PACKET_ID ];
@@ -497,15 +500,15 @@ public enum Protocol
     @Data
     private static class ProtocolMapping
     {
-
-        private final int protocolVersion;
+       // private final int protocolVersion;
+        private final ProtocolVersion protocolVersion;
         private final int packetID;
     }
 
     // Helper method
-    private static ProtocolMapping map(int protocol, int id)
+    private static ProtocolMapping map(ProtocolVersion protocolVersion, int id)
     {
-        return new ProtocolMapping( protocol, id );
+        return new ProtocolMapping( protocolVersion, id );
     }
 
     static final class DirectionData
@@ -515,16 +518,16 @@ public enum Protocol
         //
         private final Protocol protocolPhase;
         @Getter
-        private final ProtocolConstants.Direction direction;
+        private final ProtocolDirection direction;
 
-        public DirectionData(Protocol protocolPhase, ProtocolConstants.Direction direction)
+        public DirectionData(Protocol protocolPhase, ProtocolDirection direction)
         {
             this.protocolPhase = protocolPhase;
             this.direction = direction;
 
-            for ( int protocol : ProtocolConstants.SUPPORTED_VERSION_IDS )
+            for ( ProtocolVersion protocol : ProtocolVersion.SUPPORTED_VERSIONS )
             {
-                protocols.put( protocol, new ProtocolData( protocol ) );
+                protocols.put( protocol.getProtocol(), new ProtocolData( protocol ) );
             }
         }
 
@@ -542,12 +545,12 @@ public enum Protocol
             return supportsForge || i >= 0 && i <= MAX_PACKET_ID;
         }
 
-        public final DefinedPacket createPacket(int id, int version)
+        public DefinedPacket createPacket(int id, int version)
         {
             return createPacket(id, version, true);
         }
 
-        public final DefinedPacket createPacket(int id, int version, boolean supportsForge)
+        public DefinedPacket createPacket(int id, int version, boolean supportsForge)
         {
             ProtocolData protocolData = getProtocolData( version );
             if ( protocolData == null )
@@ -567,21 +570,23 @@ public enum Protocol
         {
             int mappingIndex = 0;
             ProtocolMapping mapping = mappings[mappingIndex];
-            for ( int protocol : ProtocolConstants.SUPPORTED_VERSION_IDS )
+            for ( ProtocolVersion version : ProtocolVersion.SUPPORTED_VERSIONS )
             {
-                if ( protocol < mapping.protocolVersion )
+                int protocol = version.getProtocol();
+                int mappingProtocol = mapping.protocolVersion.getProtocol();
+                if ( protocol < mappingProtocol )
                 {
                     // This is a new packet, skip it till we reach the next protocol
                     continue;
                 }
 
-                if ( mapping.protocolVersion < protocol && mappingIndex + 1 < mappings.length )
+                if ( mappingProtocol < protocol && mappingIndex + 1 < mappings.length )
                 {
                     // Mapping is non current, but the next one may be ok
                     ProtocolMapping nextMapping = mappings[mappingIndex + 1];
-                    if ( nextMapping.protocolVersion == protocol )
+                    if ( nextMapping.protocolVersion.getProtocol() == protocol )
                     {
-                        Preconditions.checkState( nextMapping.packetID != mapping.packetID, "Duplicate packet mapping (%s, %s)", mapping.protocolVersion, nextMapping.protocolVersion );
+                        Preconditions.checkState( nextMapping.packetID != mapping.packetID, "Duplicate packet mapping (%s, %s)", mappingProtocol, nextMapping.protocolVersion.getProtocol() );
 
                         mapping = nextMapping;
                         mappingIndex++;
@@ -595,7 +600,7 @@ public enum Protocol
             }
         }
 
-        final int getId(Class<? extends DefinedPacket> packet, int version)
+        int getId(Class<? extends DefinedPacket> packet, int version)
         {
 
             ProtocolData protocolData = getProtocolData( version );
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java b/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
index eef72175..2dbfb161 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
@@ -2,7 +2,14 @@ package net.md_5.bungee.protocol;
 
 import com.google.common.collect.ImmutableList;
 import java.util.List;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion; // Amethyst - This need for javadoc
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection; // Amethyst - This need for javadoc
 
+/**
+ * BungeeCord protocol version constants class.
+ *
+ * @deprecated use {@link ProtocolVersion}.
+ */
 public class ProtocolConstants
 {
 
@@ -112,6 +119,11 @@ public class ProtocolConstants
             return after >= other;
     }
 
+    /**
+     * BungeeCord protocol directions enum.
+     *
+     * @deprecated Use {@link ProtocolDirection}.
+     */
     public enum Direction
     {
 
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/BossBar.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/BossBar.java
index a26fba6e..f47f6306 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/BossBar.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/BossBar.java
@@ -1,13 +1,13 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import java.util.UUID;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -30,7 +30,7 @@ public class BossBar extends DefinedPacket
     }
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         uuid = readUUID( buf );
         action = readVarInt( buf );
@@ -66,7 +66,7 @@ public class BossBar extends DefinedPacket
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         writeUUID( uuid, buf );
         writeVarInt( action, buf );
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java
index 6034fc18..9780fb04 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java
@@ -1,13 +1,14 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.util.UUID;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -38,13 +39,13 @@ public class Chat extends DefinedPacket
     }
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
-        message = readString( buf, ( direction == ProtocolConstants.Direction.TO_CLIENT ) ? 262144 : ( protocolVersion >= ProtocolConstants.MINECRAFT_1_11 ? 256 : 100 ) );
-        if ( direction == ProtocolConstants.Direction.TO_CLIENT )
+        message = readString( buf, ( direction == ProtocolDirection.TO_CLIENT ) ? 262144 : ( ProtocolVersion.MINECRAFT_1_11.isBeforeOrEq( protocolVersion ) ? 256 : 100 ) );
+        if ( direction == ProtocolDirection.TO_CLIENT )
         {
             position = buf.readByte();
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+            if ( ProtocolVersion.MINECRAFT_1_16.isBeforeOrEq( protocolVersion ) )
             {
                 sender = readUUID( buf );
             }
@@ -52,18 +53,18 @@ public class Chat extends DefinedPacket
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         // Waterfall start
-        if (direction == ProtocolConstants.Direction.TO_CLIENT) {
+        if (direction == ProtocolDirection.TO_CLIENT) {
             writeString(this.message, Short.MAX_VALUE * 8 + 8, buf);
         } else
         // Waterfall end
         writeString( message, buf );
-        if ( direction == ProtocolConstants.Direction.TO_CLIENT )
+        if ( direction == ProtocolDirection.TO_CLIENT )
         {
             buf.writeByte( position );
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+            if ( ProtocolVersion.MINECRAFT_1_16.isBeforeOrEq( protocolVersion ) )
             {
                 writeUUID( sender, buf );
             }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClearTitles.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClearTitles.java
index c37c0285..ee9a9587 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClearTitles.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClearTitles.java
@@ -1,13 +1,13 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -19,13 +19,13 @@ public class ClearTitles extends DefinedPacket
     private boolean reset;
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         reset = buf.readBoolean();
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         buf.writeBoolean( reset );
     }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java
index d7d4e6ab..15489048 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java
@@ -1,13 +1,14 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -27,33 +28,33 @@ public class ClientSettings extends DefinedPacket
     private boolean allowServerListing;
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         locale = readString( buf, 16 );
         viewDistance = buf.readByte();
-        chatFlags = protocolVersion >= ProtocolConstants.MINECRAFT_1_9 ? DefinedPacket.readVarInt( buf ) : buf.readUnsignedByte();
+        chatFlags = ProtocolVersion.MINECRAFT_1_9.isBeforeOrEq( protocolVersion ) ? DefinedPacket.readVarInt( buf ) : buf.readUnsignedByte();
         chatColours = buf.readBoolean();
         skinParts = buf.readByte();
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_9 )
+        if ( ProtocolVersion.MINECRAFT_1_9.isBeforeOrEq( protocolVersion ) )
         {
             mainHand = DefinedPacket.readVarInt( buf );
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_17 )
+        if ( ProtocolVersion.MINECRAFT_1_17.isBeforeOrEq( protocolVersion ) )
         {
             disableTextFiltering = buf.readBoolean();
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_18 )
+        if ( ProtocolVersion.MINECRAFT_1_18.isBeforeOrEq( protocolVersion ) )
         {
             allowServerListing = buf.readBoolean();
         }
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         writeString( locale, buf );
         buf.writeByte( viewDistance );
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_9 )
+        if ( ProtocolVersion.MINECRAFT_1_9.isBeforeOrEq( protocolVersion ) )
         {
             DefinedPacket.writeVarInt( chatFlags, buf );
         } else
@@ -62,15 +63,15 @@ public class ClientSettings extends DefinedPacket
         }
         buf.writeBoolean( chatColours );
         buf.writeByte( skinParts );
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_9 )
+        if ( ProtocolVersion.MINECRAFT_1_9.isBeforeOrEq( protocolVersion ) )
         {
             DefinedPacket.writeVarInt( mainHand, buf );
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_17 )
+        if ( ProtocolVersion.MINECRAFT_1_17.isBeforeOrEq( protocolVersion ) )
         {
             buf.writeBoolean( disableTextFiltering );
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_18 )
+        if ( ProtocolVersion.MINECRAFT_1_18.isBeforeOrEq( protocolVersion ) )
         {
             buf.writeBoolean( allowServerListing );
         }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/EncryptionRequest.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/EncryptionRequest.java
index a29524ca..24f94ad8 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/EncryptionRequest.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/EncryptionRequest.java
@@ -1,13 +1,13 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -21,7 +21,7 @@ public class EncryptionRequest extends DefinedPacket
     private byte[] verifyToken;
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         serverId = readString( buf );
         publicKey = readArray( buf );
@@ -29,7 +29,7 @@ public class EncryptionRequest extends DefinedPacket
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         writeString( serverId, buf );
         writeArray( publicKey, buf );
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/EncryptionResponse.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/EncryptionResponse.java
index 53575ce0..a222e129 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/EncryptionResponse.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/EncryptionResponse.java
@@ -1,13 +1,13 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -20,14 +20,14 @@ public class EncryptionResponse extends DefinedPacket
     private byte[] verifyToken;
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         sharedSecret = readArray( buf, 128 );
         verifyToken = readArray( buf, 128 );
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         writeArray( sharedSecret, buf );
         writeArray( verifyToken, buf );
@@ -40,13 +40,13 @@ public class EncryptionResponse extends DefinedPacket
     }
 
     // Waterfall start: Additional DoS mitigations, courtesy of Velocity
-    public int expectedMaxLength(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
+    public int expectedMaxLength(ByteBuf buf, ProtocolDirection direction, int protocolVersion) {
         // It turns out these come out to the same length, whether we're talking >=1.8 or not.
         // The length prefix always winds up being 2 bytes.
         return 260;
     }
 
-    public int expectedMinLength(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
+    public int expectedMinLength(ByteBuf buf, ProtocolDirection direction, int protocolVersion) {
         return expectedMaxLength(buf, direction, protocolVersion);
     }
     // Waterfall end
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/KeepAlive.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/KeepAlive.java
index b004bc41..bb8c3eef 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/KeepAlive.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/KeepAlive.java
@@ -1,13 +1,14 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -19,15 +20,15 @@ public class KeepAlive extends DefinedPacket
     private long randomId;
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
-        randomId = ( protocolVersion >= ProtocolConstants.MINECRAFT_1_12_2 ) ? buf.readLong() : readVarInt( buf );
+        randomId = ( ProtocolVersion.MINECRAFT_1_12_2.isBeforeOrEq( protocolVersion ) ) ? buf.readLong() : readVarInt( buf );
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_12_2 )
+        if (ProtocolVersion.MINECRAFT_1_12_2.isBeforeOrEq( protocolVersion ) )
         {
             buf.writeLong( randomId );
         } else
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Login.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Login.java
index 3cab0d3d..2664584e 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Login.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Login.java
@@ -1,6 +1,8 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.util.HashSet;
 import java.util.Set;
 import lombok.AllArgsConstructor;
@@ -9,7 +11,6 @@ import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 import se.llbit.nbt.Tag;
 
 @Data
@@ -39,15 +40,15 @@ public class Login extends DefinedPacket
     private boolean flat;
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         entityId = buf.readInt();
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16_2 )
+        if ( ProtocolVersion.MINECRAFT_1_16_2.isBeforeOrEq( protocolVersion ) )
         {
             hardcore = buf.readBoolean();
         }
         gameMode = buf.readUnsignedByte();
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        if ( ProtocolVersion.MINECRAFT_1_16.isBeforeOrEq( protocolVersion ) )
         {
             previousGameMode = buf.readUnsignedByte();
 
@@ -61,9 +62,9 @@ public class Login extends DefinedPacket
             dimensions = readTag( buf );
         }
 
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        if ( ProtocolVersion.MINECRAFT_1_16.isBeforeOrEq( protocolVersion ) )
         {
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16_2 )
+            if ( ProtocolVersion.MINECRAFT_1_16_2.isBeforeOrEq( protocolVersion ) )
             {
                 dimension = readTag( buf );
             } else
@@ -71,37 +72,37 @@ public class Login extends DefinedPacket
                 dimension = readString( buf );
             }
             worldName = readString( buf );
-        } else if ( protocolVersion > ProtocolConstants.MINECRAFT_1_9 )
+        } else if ( ProtocolVersion.MINECRAFT_1_9.isBefore( protocolVersion ) )
         {
             dimension = buf.readInt();
         } else
         {
             dimension = (int) buf.readByte();
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_15 )
+        if ( ProtocolVersion.MINECRAFT_1_15.isBeforeOrEq( protocolVersion ) )
         {
             seed = buf.readLong();
         }
-        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_14 )
+        if ( ProtocolVersion.MINECRAFT_1_14.isAfter( protocolVersion ) )
         {
             difficulty = buf.readUnsignedByte();
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16_2 )
+        if ( ProtocolVersion.MINECRAFT_1_16_2.isBeforeOrEq( protocolVersion ) )
         {
             maxPlayers = readVarInt( buf );
         } else
         {
             maxPlayers = buf.readUnsignedByte();
         }
-        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_16 )
+        if ( ProtocolVersion.MINECRAFT_1_16.isAfter( protocolVersion ) )
         {
             levelType = readString( buf );
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_14 )
+        if ( ProtocolVersion.MINECRAFT_1_14.isBeforeOrEq( protocolVersion ) )
         {
             viewDistance = readVarInt( buf );
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_18 )
+        if ( ProtocolVersion.MINECRAFT_1_18.isBeforeOrEq( protocolVersion ) )
         {
             simulationDistance = readVarInt( buf );
         }
@@ -109,11 +110,11 @@ public class Login extends DefinedPacket
         {
             reducedDebugInfo = buf.readBoolean();
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_15 )
+        if ( ProtocolVersion.MINECRAFT_1_15.isBeforeOrEq( protocolVersion ) )
         {
             normalRespawn = buf.readBoolean();
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        if ( ProtocolVersion.MINECRAFT_1_16.isBeforeOrEq( protocolVersion ) )
         {
             debug = buf.readBoolean();
             flat = buf.readBoolean();
@@ -121,15 +122,15 @@ public class Login extends DefinedPacket
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         buf.writeInt( entityId );
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16_2 )
+        if ( ProtocolVersion.MINECRAFT_1_16_2.isBeforeOrEq( protocolVersion ) )
         {
             buf.writeBoolean( hardcore );
         }
         buf.writeByte( gameMode );
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        if ( ProtocolVersion.MINECRAFT_1_16.isBeforeOrEq( protocolVersion ) )
         {
             buf.writeByte( previousGameMode );
 
@@ -142,9 +143,9 @@ public class Login extends DefinedPacket
             writeTag( dimensions, buf );
         }
 
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        if ( ProtocolVersion.MINECRAFT_1_16.isBeforeOrEq( protocolVersion ) )
         {
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16_2 )
+            if ( ProtocolVersion.MINECRAFT_1_16_2.isBeforeOrEq( protocolVersion ) )
             {
                 writeTag( (Tag) dimension, buf );
             } else
@@ -152,37 +153,37 @@ public class Login extends DefinedPacket
                 writeString( (String) dimension, buf );
             }
             writeString( worldName, buf );
-        } else if ( protocolVersion > ProtocolConstants.MINECRAFT_1_9 )
+        } else if ( ProtocolVersion.MINECRAFT_1_9.isBefore( protocolVersion ) )
         {
             buf.writeInt( (Integer) dimension );
         } else
         {
             buf.writeByte( (Integer) dimension );
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_15 )
+        if ( ProtocolVersion.MINECRAFT_1_15.isBeforeOrEq( protocolVersion ) )
         {
             buf.writeLong( seed );
         }
-        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_14 )
+        if ( ProtocolVersion.MINECRAFT_1_14.isAfter( protocolVersion ) )
         {
             buf.writeByte( difficulty );
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16_2 )
+        if ( ProtocolVersion.MINECRAFT_1_16_2.isBeforeOrEq( protocolVersion ) )
         {
             writeVarInt( maxPlayers, buf );
         } else
         {
             buf.writeByte( maxPlayers );
         }
-        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_16 )
+        if ( ProtocolVersion.MINECRAFT_1_16.isAfter( protocolVersion ) )
         {
             writeString( levelType, buf );
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_14 )
+        if ( ProtocolVersion.MINECRAFT_1_14.isBeforeOrEq( protocolVersion ) )
         {
             writeVarInt( viewDistance, buf );
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_18 )
+        if ( ProtocolVersion.MINECRAFT_1_18.isBeforeOrEq( protocolVersion ) )
         {
             writeVarInt( simulationDistance, buf );
         }
@@ -190,11 +191,11 @@ public class Login extends DefinedPacket
         {
             buf.writeBoolean( reducedDebugInfo );
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_15 )
+        if ( ProtocolVersion.MINECRAFT_1_15.isBeforeOrEq( protocolVersion ) )
         {
             buf.writeBoolean( normalRespawn );
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        if ( ProtocolVersion.MINECRAFT_1_16.isBeforeOrEq( protocolVersion ) )
         {
             buf.writeBoolean( debug );
             buf.writeBoolean( flat );
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginRequest.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginRequest.java
index cfd8e64e..f291a85b 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginRequest.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginRequest.java
@@ -1,13 +1,13 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -37,7 +37,7 @@ public class LoginRequest extends DefinedPacket
     }
 
     // Waterfall start: Additional DoS mitigations, courtesy of Velocity
-    public int expectedMaxLength(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
+    public int expectedMaxLength(ByteBuf buf, ProtocolDirection direction, int protocolVersion) {
         // Accommodate the rare (but likely malicious) use of UTF-8 usernames, since it is technically
         // legal on the protocol level.
         return 1 + (16 * 4);
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
index 551bd104..49e4fb7f 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
@@ -1,6 +1,8 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.util.UUID;
 import lombok.AllArgsConstructor;
 import lombok.Data;
@@ -8,7 +10,6 @@ import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -21,9 +22,9 @@ public class LoginSuccess extends DefinedPacket
     private String username;
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        if ( ProtocolVersion.MINECRAFT_1_16.isBeforeOrEq( protocolVersion ) )
         {
             uuid = readUUID( buf );
         } else
@@ -34,9 +35,9 @@ public class LoginSuccess extends DefinedPacket
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        if ( ProtocolVersion.MINECRAFT_1_16.isBeforeOrEq( protocolVersion ) )
         {
             writeUUID( uuid, buf );
         } else
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PingPacket.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PingPacket.java
index 3163a771..edb5865c 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PingPacket.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PingPacket.java
@@ -1,13 +1,13 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -37,11 +37,11 @@ public class PingPacket extends DefinedPacket
     }
 
     // Waterfall start: Additional DoS mitigations, courtesy of Velocity
-    public int expectedMaxLength(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
+    public int expectedMaxLength(ByteBuf buf, ProtocolDirection direction, int protocolVersion) {
         return 8;
     }
 
-    public int expectedMinLength(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
+    public int expectedMinLength(ByteBuf buf, ProtocolDirection direction, int protocolVersion) {
         return 8;
     }
     // Waterfall end
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListHeaderFooter.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListHeaderFooter.java
index 470deab0..f08e2bbd 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListHeaderFooter.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListHeaderFooter.java
@@ -1,13 +1,13 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -20,14 +20,14 @@ public class PlayerListHeaderFooter extends DefinedPacket
     private String footer;
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         header = readString( buf );
         footer = readString( buf );
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         writeString( header, buf );
         writeString( footer, buf );
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListItem.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListItem.java
index 92bacc7c..e4d98e81 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListItem.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerListItem.java
@@ -1,13 +1,13 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import java.util.UUID;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -19,7 +19,7 @@ public class PlayerListItem extends DefinedPacket
     private Item[] items;
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         action = Action.values()[DefinedPacket.readVarInt( buf )];
         items = new Item[ DefinedPacket.readVarInt( buf ) ];
@@ -73,7 +73,7 @@ public class PlayerListItem extends DefinedPacket
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         DefinedPacket.writeVarInt( action.ordinal(), buf );
         DefinedPacket.writeVarInt( items.length, buf );
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PluginMessage.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PluginMessage.java
index 4f3a8c72..38dbdf0f 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PluginMessage.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PluginMessage.java
@@ -4,6 +4,8 @@ import com.google.common.base.Function;
 import com.google.common.base.Preconditions;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil; // Waterfall
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.io.ByteArrayInputStream;
 import java.io.DataInput;
 import java.io.DataInputStream;
@@ -14,7 +16,6 @@ import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -71,19 +72,19 @@ public class PluginMessage extends DefinedPacket
     private boolean allowExtendedPacket = false;
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
-        tag = ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 ) ? MODERNISE.apply( readString( buf ) ) : readString( buf, 20 );
-        int maxSize = direction == ProtocolConstants.Direction.TO_SERVER ? Short.MAX_VALUE : 0x100000;
+        tag = ( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( protocolVersion ) ) ? MODERNISE.apply( readString( buf ) ) : readString( buf, 20 );
+        int maxSize = direction == ProtocolDirection.TO_SERVER ? Short.MAX_VALUE : 0x100000;
         Preconditions.checkArgument( buf.readableBytes() < maxSize );
         data = new byte[ buf.readableBytes() ];
         buf.readBytes( data );
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
-        writeString( ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 ) ? MODERNISE.apply( tag ) : tag, buf );
+        writeString( ( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( protocolVersion ) ) ? MODERNISE.apply( tag ) : tag, buf );
         buf.writeBytes( data );
     }
 
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java
index 36db3d49..641667e4 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java
@@ -1,13 +1,14 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 import se.llbit.nbt.Tag;
 
 @Data
@@ -29,11 +30,11 @@ public class Respawn extends DefinedPacket
     private boolean copyMeta;
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        if ( ProtocolVersion.MINECRAFT_1_16.isBeforeOrEq( protocolVersion ) )
         {
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16_2 )
+            if ( ProtocolVersion.MINECRAFT_1_16_2.isBeforeOrEq( protocolVersion ) )
             {
                 dimension = readTag( buf );
             } else
@@ -45,16 +46,16 @@ public class Respawn extends DefinedPacket
         {
             dimension = buf.readInt();
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_15 )
+        if ( ProtocolVersion.MINECRAFT_1_15.isBeforeOrEq( protocolVersion ) )
         {
             seed = buf.readLong();
         }
-        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_14 )
+        if ( ProtocolVersion.MINECRAFT_1_14.isAfter( protocolVersion ) )
         {
             difficulty = buf.readUnsignedByte();
         }
         gameMode = buf.readUnsignedByte();
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        if ( ProtocolVersion.MINECRAFT_1_16.isBeforeOrEq( protocolVersion ) )
         {
             previousGameMode = buf.readUnsignedByte();
             debug = buf.readBoolean();
@@ -67,11 +68,11 @@ public class Respawn extends DefinedPacket
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        if ( ProtocolVersion.MINECRAFT_1_16.isBeforeOrEq( protocolVersion ) )
         {
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16_2 )
+            if ( ProtocolVersion.MINECRAFT_1_16_2.isBeforeOrEq( protocolVersion ) )
             {
                 writeTag( (Tag) dimension, buf );
             } else
@@ -83,16 +84,16 @@ public class Respawn extends DefinedPacket
         {
             buf.writeInt( ( (Integer) dimension ) );
         }
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_15 )
+        if ( ProtocolVersion.MINECRAFT_1_15.isBeforeOrEq( protocolVersion ) )
         {
             buf.writeLong( seed );
         }
-        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_14 )
+        if ( ProtocolVersion.MINECRAFT_1_14.isAfter( protocolVersion ) )
         {
             buf.writeByte( difficulty );
         }
         buf.writeByte( gameMode );
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_16 )
+        if ( ProtocolVersion.MINECRAFT_1_16.isBeforeOrEq( protocolVersion ) )
         {
             buf.writeByte( previousGameMode );
             buf.writeBoolean( debug );
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ScoreboardObjective.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ScoreboardObjective.java
index 3c7905d5..6e8ff252 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ScoreboardObjective.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ScoreboardObjective.java
@@ -1,6 +1,8 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.util.Locale;
 import lombok.AllArgsConstructor;
 import lombok.Data;
@@ -8,7 +10,6 @@ import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -26,14 +27,14 @@ public class ScoreboardObjective extends DefinedPacket
     private byte action;
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         name = readString( buf );
         action = buf.readByte();
         if ( action == 0 || action == 2 )
         {
             value = readString( buf );
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 )
+            if ( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( protocolVersion ) )
             {
                 type = HealthDisplay.values()[readVarInt( buf )];
             } else
@@ -44,14 +45,14 @@ public class ScoreboardObjective extends DefinedPacket
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         writeString( name, buf );
         buf.writeByte( action );
         if ( action == 0 || action == 2 )
         {
             writeString( value, buf );
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 )
+            if ( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( protocolVersion ) )
             {
                 writeVarInt( type.ordinal(), buf );
             } else
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ScoreboardScore.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ScoreboardScore.java
index 0b27fc86..5f9a4b53 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ScoreboardScore.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ScoreboardScore.java
@@ -1,13 +1,13 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -25,7 +25,7 @@ public class ScoreboardScore extends DefinedPacket
     private int value;
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         itemName = readString( buf );
         action = buf.readByte();
@@ -37,7 +37,7 @@ public class ScoreboardScore extends DefinedPacket
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         writeString( itemName, buf );
         buf.writeByte( action );
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/SetCompression.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/SetCompression.java
index 086e3e6e..67f73dc7 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/SetCompression.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/SetCompression.java
@@ -1,13 +1,13 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -19,13 +19,13 @@ public class SetCompression extends DefinedPacket
     private int threshold;
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         threshold = DefinedPacket.readVarInt( buf );
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         DefinedPacket.writeVarInt( threshold, buf );
     }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/StatusRequest.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/StatusRequest.java
index ec33d337..d6f99ae6 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/StatusRequest.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/StatusRequest.java
@@ -1,12 +1,12 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -31,7 +31,7 @@ public class StatusRequest extends DefinedPacket
     }
 
     // Waterfall start: Additional DoS mitigations, courtesy of Velocity
-    public int expectedMaxLength(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
+    public int expectedMaxLength(ByteBuf buf, ProtocolDirection direction, int protocolVersion) {
         return 0;
     }
     // Waterfall end
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Subtitle.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Subtitle.java
index 6c842f03..69cb549d 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Subtitle.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Subtitle.java
@@ -1,12 +1,12 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -17,13 +17,13 @@ public class Subtitle extends DefinedPacket
     private String text;
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         text = readString( buf );
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         writeString( text, buf );
     }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/TabCompleteRequest.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/TabCompleteRequest.java
index 80e4f85a..77fd4d09 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/TabCompleteRequest.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/TabCompleteRequest.java
@@ -1,12 +1,13 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -35,17 +36,17 @@ public class TabCompleteRequest extends DefinedPacket
     }
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 )
+        if ( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( protocolVersion ) )
         {
             transactionId = readVarInt( buf );
         }
-        cursor = readString( buf, ( protocolVersion > ProtocolConstants.MINECRAFT_1_13 ? 32500 : ( protocolVersion == ProtocolConstants.MINECRAFT_1_13 ? 256 : 32767 ) ) );
+        cursor = readString( buf, ( ProtocolVersion.MINECRAFT_1_13.isEquals( protocolVersion ) ? 32500 : ( ProtocolVersion.MINECRAFT_1_13.isEquals( protocolVersion ) ? 256 : 32767 ) ) );
 
-        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_13 )
+        if ( ProtocolVersion.MINECRAFT_1_13.isAfter( protocolVersion ) )
         {
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_9 )
+            if ( ProtocolVersion.MINECRAFT_1_9.isBeforeOrEq( protocolVersion ) )
             {
                 assumeCommand = buf.readBoolean();
             }
@@ -58,17 +59,17 @@ public class TabCompleteRequest extends DefinedPacket
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 )
+        if ( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( protocolVersion ) )
         {
             writeVarInt( transactionId, buf );
         }
         writeString( cursor, buf );
 
-        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_13 )
+        if ( ProtocolVersion.MINECRAFT_1_13.isAfter( protocolVersion ) )
         {
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_9 )
+            if ( ProtocolVersion.MINECRAFT_1_9.isBeforeOrEq( protocolVersion ) )
             {
                 buf.writeBoolean( assumeCommand );
             }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/TabCompleteResponse.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/TabCompleteResponse.java
index 21aa9675..98202d4d 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/TabCompleteResponse.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/TabCompleteResponse.java
@@ -5,6 +5,8 @@ import com.mojang.brigadier.context.StringRange;
 import com.mojang.brigadier.suggestion.Suggestion;
 import com.mojang.brigadier.suggestion.Suggestions;
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.util.LinkedList;
 import java.util.List;
 import lombok.Data;
@@ -12,7 +14,6 @@ import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -37,9 +38,9 @@ public class TabCompleteResponse extends DefinedPacket
     }
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 )
+        if ( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( protocolVersion ) )
         {
             transactionId = readVarInt( buf );
             int start = readVarInt( buf );
@@ -64,9 +65,9 @@ public class TabCompleteResponse extends DefinedPacket
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 )
+        if ( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( protocolVersion ) )
         {
             writeVarInt( transactionId, buf );
             writeVarInt( suggestions.getRange().getStart(), buf );
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Team.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Team.java
index a5555f6a..4de5b5b7 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Team.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Team.java
@@ -1,13 +1,14 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import lombok.AllArgsConstructor;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -42,26 +43,26 @@ public class Team extends DefinedPacket
     }
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         name = readString( buf );
         mode = buf.readByte();
         if ( mode == 0 || mode == 2 )
         {
             displayName = readString( buf );
-            if ( protocolVersion < ProtocolConstants.MINECRAFT_1_13 )
+            if ( ProtocolVersion.MINECRAFT_1_13.isAfter( protocolVersion ) )
             {
                 prefix = readString( buf );
                 suffix = readString( buf );
             }
             friendlyFire = buf.readByte();
             nameTagVisibility = readString( buf );
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_9 )
+            if ( ProtocolVersion.MINECRAFT_1_9.isBeforeOrEq( protocolVersion ) )
             {
                 collisionRule = readString( buf );
             }
-            color = ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 ) ? readVarInt( buf ) : buf.readByte();
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 )
+            color = ( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( protocolVersion ) ) ? readVarInt( buf ) : buf.readByte();
+            if ( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( protocolVersion ) )
             {
                 prefix = readString( buf );
                 suffix = readString( buf );
@@ -79,26 +80,26 @@ public class Team extends DefinedPacket
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         writeString( name, buf );
         buf.writeByte( mode );
         if ( mode == 0 || mode == 2 )
         {
             writeString( displayName, buf );
-            if ( protocolVersion < ProtocolConstants.MINECRAFT_1_13 )
+            if ( ProtocolVersion.MINECRAFT_1_13.isAfter( protocolVersion ) )
             {
                 writeString( prefix, buf );
                 writeString( suffix, buf );
             }
             buf.writeByte( friendlyFire );
             writeString( nameTagVisibility, buf );
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_9 )
+            if ( ProtocolVersion.MINECRAFT_1_9.isBeforeOrEq( protocolVersion ) )
             {
                 writeString( collisionRule, buf );
             }
 
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 )
+            if ( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( protocolVersion ) )
             {
                 writeVarInt( color, buf );
                 writeString( prefix, buf );
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Title.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Title.java
index 331ac5c9..a130ceed 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Title.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Title.java
@@ -1,12 +1,13 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -30,9 +31,9 @@ public class Title extends DefinedPacket
     }
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_17 )
+        if ( ProtocolVersion.MINECRAFT_1_17.isBeforeOrEq( protocolVersion ) )
         {
             text = readString( buf );
             return;
@@ -41,7 +42,7 @@ public class Title extends DefinedPacket
         int index = readVarInt( buf );
 
         // If we're working on 1.10 or lower, increment the value of the index so we pull out the correct value.
-        if ( protocolVersion <= ProtocolConstants.MINECRAFT_1_10 && index >= 2 )
+        if ( ProtocolVersion.MINECRAFT_1_10.isAfterOrEq( protocolVersion ) && index >= 2 )
         {
             index++;
         }
@@ -63,9 +64,9 @@ public class Title extends DefinedPacket
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_17 )
+        if ( ProtocolVersion.MINECRAFT_1_17.isBeforeOrEq( protocolVersion ) )
         {
             writeString( text, buf );
             return;
@@ -74,7 +75,7 @@ public class Title extends DefinedPacket
         int index = action.ordinal();
 
         // If we're working on 1.10 or lower, increment the value of the index so we pull out the correct value.
-        if ( protocolVersion <= ProtocolConstants.MINECRAFT_1_10 && index >= 2 )
+        if ( ProtocolVersion.MINECRAFT_1_10.isAfterOrEq( protocolVersion ) && index >= 2 )
         {
             index--;
         }
@@ -101,7 +102,7 @@ public class Title extends DefinedPacket
         handler.handle( this );
     }
 
-    public static enum Action
+    public enum Action
     {
 
         TITLE,
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/TitleTimes.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/TitleTimes.java
index 4252c00f..35d860c3 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/TitleTimes.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/TitleTimes.java
@@ -1,12 +1,12 @@
 package net.md_5.bungee.protocol.packet;
 
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.NoArgsConstructor;
 import net.md_5.bungee.protocol.AbstractPacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 @Data
 @NoArgsConstructor
@@ -19,7 +19,7 @@ public class TitleTimes extends DefinedPacket
     private int fadeOut;
 
     @Override
-    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void read(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         fadeIn = buf.readInt();
         stay = buf.readInt();
@@ -27,7 +27,7 @@ public class TitleTimes extends DefinedPacket
     }
 
     @Override
-    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    public void write(ByteBuf buf, ProtocolDirection direction, int protocolVersion)
     {
         buf.writeInt( fadeIn );
         buf.writeInt( stay );
diff --git a/proxy/src/main/java/io/github/waterfallmc/waterfall/conf/WaterfallConfiguration.java b/proxy/src/main/java/io/github/waterfallmc/waterfall/conf/WaterfallConfiguration.java
index 32be5c3c..7d3220f9 100644
--- a/proxy/src/main/java/io/github/waterfallmc/waterfall/conf/WaterfallConfiguration.java
+++ b/proxy/src/main/java/io/github/waterfallmc/waterfall/conf/WaterfallConfiguration.java
@@ -1,9 +1,9 @@
 package io.github.waterfallmc.waterfall.conf;
 
 import com.google.common.base.Joiner;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import net.md_5.bungee.conf.Configuration;
 import net.md_5.bungee.conf.YamlConfig;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 import java.io.File;
 
@@ -69,7 +69,7 @@ public class WaterfallConfiguration extends Configuration {
         config.load(false); // Load, but no permissions
         logInitialHandlerConnections = config.getBoolean( "log_initial_handler_connections", logInitialHandlerConnections );
         // Amethyst - Make the version look better
-        gameVersion = config.getString("game_version", "").isEmpty() ? ProtocolConstants.SUPPORTED_VERSIONS.get(0) + "-" + ProtocolConstants.SUPPORTED_VERSIONS.get(ProtocolConstants.SUPPORTED_VERSIONS.size() - 1) : config.getString("game_version", "");
+        gameVersion = config.getString("game_version", "").isEmpty() ? ProtocolVersion.SUPPORTED_VERSION_STRING : config.getString("game_version", "");
         useNettyDnsResolver = config.getBoolean("use_netty_dns_resolver", useNettyDnsResolver);
         // Throttling options
         tabThrottle = config.getInt("throttling.tab_complete", tabThrottle);
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 64e771f8..982f540f 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -23,6 +23,7 @@ import io.netty.channel.EventLoopGroup;
 import io.netty.util.ResourceLeakDetector;
 import io.sapphiremc.amethyst.BuildData;
 import io.sapphiremc.amethyst.Amethyst;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
@@ -89,7 +90,6 @@ import net.md_5.bungee.forge.ForgeConstants;
 import net.md_5.bungee.module.ModuleManager;
 import net.md_5.bungee.netty.PipelineUtils;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.query.RemoteQuery;
 import net.md_5.bungee.scheduler.BungeeScheduler;
@@ -226,7 +226,9 @@ public class BungeeCord extends ProxyServer
         logger = io.github.waterfallmc.waterfall.log4j.WaterfallLogger.create();
         // Waterfall end
 
-        logger.info("Booting up proxy server for minecraft 1.8 - 1.18.1"); // Amethyst - add logging on startup
+        String min = ProtocolVersion.MINECRAFT_1_8.getVersionIntroducedIn();
+        String max = ProtocolVersion.values()[ProtocolVersion.values().length - 1].getMostRecentSupportedVersion();
+        logger.info("Booting up proxy server for minecraft " + min + " - " + max); // Amethyst - add logging on startup
         serverStartTime = System.nanoTime(); // Amethyst - add logging on startup
 
         pluginManager = new PluginManager( this );
@@ -702,7 +704,7 @@ public class BungeeCord extends ProxyServer
 
     public PluginMessage registerChannels(int protocolVersion)
     {
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 )
+        if ( protocolVersion >= ProtocolVersion.MINECRAFT_1_13.getProtocol() )
         {
             return new PluginMessage( "minecraft:register", Util.format( Iterables.transform( pluginChannels, PluginMessage.MODERNISE ), "\00" ).getBytes( Charsets.UTF_8 ), false );
         }
@@ -713,7 +715,7 @@ public class BungeeCord extends ProxyServer
     @Override
     public int getProtocolVersion()
     {
-        return ProtocolConstants.SUPPORTED_VERSION_IDS.get( ProtocolConstants.SUPPORTED_VERSION_IDS.size() - 1 );
+        return ProtocolVersion.MAXIMUM_VERSION.getProtocol();
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeTitle.java b/proxy/src/main/java/net/md_5/bungee/BungeeTitle.java
index 1d377a65..b47f3658 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeTitle.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeTitle.java
@@ -1,12 +1,12 @@
 package net.md_5.bungee;
 
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import lombok.Data;
 import net.md_5.bungee.api.Title;
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.chat.ComponentSerializer;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.ClearTitles;
 import net.md_5.bungee.protocol.packet.Subtitle;
 import net.md_5.bungee.protocol.packet.Title.Action;
@@ -170,7 +170,7 @@ public class BungeeTitle implements Title
     {
         if ( packet != null )
         {
-            if ( player.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_17 )
+            if (ProtocolVersion.MINECRAFT_1_17.isBeforeOrEq( player.getPendingConnection().getVersion() ) )
             {
                 player.unsafe().sendPacket( packet.newPacket );
             } else
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index e1c7879d..458b315c 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -4,6 +4,7 @@ import com.google.common.base.Joiner;
 import com.google.common.base.Preconditions;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.net.InetSocketAddress;
 import java.nio.charset.StandardCharsets;
 import java.util.Locale;
@@ -39,7 +40,6 @@ import net.md_5.bungee.protocol.DefinedPacket;
 import net.md_5.bungee.protocol.MinecraftDecoder;
 import net.md_5.bungee.protocol.PacketWrapper;
 import net.md_5.bungee.protocol.Protocol;
-import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.EncryptionRequest;
 import net.md_5.bungee.protocol.packet.EntityStatus;
 import net.md_5.bungee.protocol.packet.GameState;
@@ -237,7 +237,7 @@ public class ServerConnector extends PacketHandler
         Set<String> registeredChannels = user.getPendingConnection().getRegisteredChannels();
         if ( !registeredChannels.isEmpty() )
         {
-            ch.write( new PluginMessage( user.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_13 ? "minecraft:register" : "REGISTER", Joiner.on( "\0" ).join( registeredChannels ).getBytes( StandardCharsets.UTF_8 ), false ) );
+            ch.write( new PluginMessage( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( user.getPendingConnection().getVersion() ) ? "minecraft:register" : "REGISTER", Joiner.on( "\0" ).join( registeredChannels ).getBytes( StandardCharsets.UTF_8 ), false ) );
         }
 
         if (!user.isDisableEntityMetadataRewrite() && user.getSettings() != null )
@@ -282,7 +282,7 @@ public class ServerConnector extends PacketHandler
             {
                 ByteBuf brand = ByteBufAllocator.DEFAULT.heapBuffer();
                 DefinedPacket.writeString( bungee.getName() + " (" + bungee.getVersion() + ")", brand );
-                user.unsafe().sendPacket( new PluginMessage( user.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_13 ? "minecraft:brand" : "MC|Brand", brand, handshakeHandler.isServerForge() ) );
+                user.unsafe().sendPacket( new PluginMessage(  ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( user.getPendingConnection().getVersion() ) ? "minecraft:brand" : "MC|Brand", brand, handshakeHandler.isServerForge() ) );
                 brand.release();
             }
 
@@ -319,7 +319,7 @@ public class ServerConnector extends PacketHandler
             // Update debug info from login packet
             user.unsafe().sendPacket( new EntityStatus( user.getClientEntityId(), login.isReducedDebugInfo() ? EntityStatus.DEBUG_INFO_REDUCED : EntityStatus.DEBUG_INFO_NORMAL ) );
             // And immediate respawn
-            if ( user.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_15 )
+            if ( ProtocolVersion.MINECRAFT_1_15.isBeforeOrEq( user.getPendingConnection().getVersion() ) )
             {
                 user.unsafe().sendPacket( new GameState( GameState.IMMEDIATE_RESPAWN, login.isNormalRespawn() ? 0 : 1 ) );
             }
@@ -355,7 +355,7 @@ public class ServerConnector extends PacketHandler
             }
             // Waterfall end
             user.unsafe().sendPacket( new Respawn( login.getDimension(), login.getWorldName(), login.getSeed(), login.getDifficulty(), login.getGameMode(), login.getPreviousGameMode(), login.getLevelType(), login.isDebug(), login.isFlat(), false ) );
-            if ( user.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_14 )
+            if ( ProtocolVersion.MINECRAFT_1_14.isBeforeOrEq( user.getPendingConnection().getVersion() ) )
             {
                 user.unsafe().sendPacket( new ViewDistance( login.getViewDistance() ) );
             }
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 19940acc..a8215b7c 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -11,6 +11,7 @@ import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelOption;
 import io.netty.util.internal.PlatformDependent;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.util.Collection;
@@ -55,7 +56,6 @@ import net.md_5.bungee.protocol.MinecraftDecoder;
 import net.md_5.bungee.protocol.MinecraftEncoder;
 import net.md_5.bungee.protocol.PacketWrapper;
 import net.md_5.bungee.protocol.Protocol;
-import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.Chat;
 import net.md_5.bungee.protocol.packet.ClientSettings;
 import net.md_5.bungee.protocol.packet.Kick;
@@ -511,11 +511,11 @@ public final class UserConnection implements ProxiedPlayer
         // transform score components
         message = ChatComponentTransformer.getInstance().transform( this, true, message );
 
-        if ( position == ChatMessageType.ACTION_BAR && getPendingConnection().getVersion() < ProtocolConstants.MINECRAFT_1_17 )
+        if ( position == ChatMessageType.ACTION_BAR && ProtocolVersion.MINECRAFT_1_17.isAfter( getPendingConnection().getVersion() ) )
         {
             // Versions older than 1.11 cannot send the Action bar with the new JSON formattings
             // Fix by converting to a legacy message, see https://bugs.mojang.com/browse/MC-119145
-            if ( getPendingConnection().getVersion() <= ProtocolConstants.MINECRAFT_1_10 )
+            if ( ProtocolVersion.MINECRAFT_1_10.isAfterOrEq( getPendingConnection().getVersion() ) )
             {
                 sendMessage( position, sender, ComponentSerializer.toString( new TextComponent( BaseComponent.toLegacyText( message ) ) ) );
             } else
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index 97c4b210..dd1afc0d 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -16,6 +16,7 @@ import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.buffer.Unpooled;
 import io.netty.channel.unix.DomainSocketAddress;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.io.DataInput;
 import java.net.InetSocketAddress;
 import java.util.ArrayList;
@@ -50,7 +51,6 @@ import net.md_5.bungee.netty.ChannelWrapper;
 import net.md_5.bungee.netty.PacketHandler;
 import net.md_5.bungee.protocol.DefinedPacket;
 import net.md_5.bungee.protocol.PacketWrapper;
-import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.BossBar;
 import net.md_5.bungee.protocol.packet.Commands;
 import net.md_5.bungee.protocol.packet.EntityEffect;
@@ -290,7 +290,7 @@ public class DownstreamBridge extends PacketHandler
             throw CancelSendSignal.INSTANCE;
         }
 
-        if ( pluginMessage.getTag().equals( con.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_13 ? "minecraft:brand" : "MC|Brand" ) )
+        if ( pluginMessage.getTag().equals( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( con.getPendingConnection().getVersion() ) ? "minecraft:brand" : "MC|Brand" ) )
         {
             ByteBuf brand = Unpooled.wrappedBuffer( pluginMessage.getData() );
             String serverBrand = DefinedPacket.readString( brand );
@@ -754,6 +754,6 @@ public class DownstreamBridge extends PacketHandler
     @Override
     public String toString()
     {
-        return "[" + con.getAddress() + "|" + con.getName() + "] <-> DownstreamBridge <-> [" + server.getInfo().getName() + "]";
+        return "[" + con.getAddress() + "|" + con.getName() + "|" + con.getPendingConnection().getProtocol().getVersionIntroducedIn() + "] <-> DownstreamBridge <-> [" + server.getInfo().getName() + "]";
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 0babc2a5..c492bb08 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -3,6 +3,7 @@ package net.md_5.bungee.connection;
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
 import com.google.gson.Gson;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.math.BigInteger;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
@@ -52,7 +53,6 @@ import net.md_5.bungee.netty.cipher.CipherEncoder;
 import net.md_5.bungee.protocol.DefinedPacket;
 import net.md_5.bungee.protocol.PacketWrapper;
 import net.md_5.bungee.protocol.Protocol;
-import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.EncryptionRequest;
 import net.md_5.bungee.protocol.packet.EncryptionResponse;
 import net.md_5.bungee.protocol.packet.Handshake;
@@ -246,7 +246,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
 
         ServerInfo forced = AbstractReconnectHandler.getForcedHost( this );
         final String motd = ( forced != null ) ? forced.getMotd() : listener.getMotd();
-        final int protocol = ( ProtocolConstants.SUPPORTED_VERSION_IDS.contains( handshake.getProtocolVersion() ) ) ? handshake.getProtocolVersion() : bungee.getProtocolVersion();
+        final int protocol = ( ProtocolVersion.isSupported( handshake.getProtocolVersion() ) ) ? handshake.getProtocolVersion() : bungee.getProtocolVersion();
 
         Callback<ServerPing> pingBack = new Callback<ServerPing>()
         {
@@ -360,7 +360,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 thisState = State.USERNAME;
                 ch.setProtocol( Protocol.LOGIN );
 
-                if ( !ProtocolConstants.SUPPORTED_VERSION_IDS.contains( handshake.getProtocolVersion() ) )
+                if ( !ProtocolVersion.isSupported( handshake.getProtocolVersion() ) )
                 {
                     if ( handshake.getProtocolVersion() > bungee.getProtocolVersion() )
                     {
@@ -652,6 +652,11 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         return ( handshake == null ) ? -1 : handshake.getProtocolVersion();
     }
 
+    @Override
+    public ProtocolVersion getProtocol() {
+        return ProtocolVersion.getProtocolVersion(getVersion());
+    }
+
     @Override
     public InetSocketAddress getAddress()
     {
@@ -694,7 +699,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     @Override
     public String toString()
     {
-        return "[" + getSocketAddress() + ( getName() != null ? "|" + getName() : "" ) + "] <-> InitialHandler";
+        return "[" + getSocketAddress() + ( getName() != null ? "|" + getName() : "" ) + "|" + getProtocol().getVersionIntroducedIn() + "] <-> InitialHandler";
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index 9537208e..9002d79b 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -5,6 +5,7 @@ import com.mojang.brigadier.context.StringRange;
 import com.mojang.brigadier.suggestion.Suggestion;
 import com.mojang.brigadier.suggestion.Suggestions;
 import io.netty.channel.Channel;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
@@ -24,7 +25,6 @@ import net.md_5.bungee.forge.ForgeConstants;
 import net.md_5.bungee.netty.ChannelWrapper;
 import net.md_5.bungee.netty.PacketHandler;
 import net.md_5.bungee.protocol.PacketWrapper;
-import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.Chat;
 import net.md_5.bungee.protocol.packet.ClientSettings;
 import net.md_5.bungee.protocol.packet.KeepAlive;
@@ -178,7 +178,7 @@ public class UpstreamBridge extends PacketHandler
     {
         // Waterfall start - tab limiter
         if ( bungee.getConfig().getTabThrottle() > 0 &&
-                ( con.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_13
+                ( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( con.getPendingConnection().getVersion() )
                 && !bungee.getConfig().isDisableModernTabLimiter()))
         {
             long now = System.currentTimeMillis();
@@ -211,7 +211,7 @@ public class UpstreamBridge extends PacketHandler
         {
             // Unclear how to handle 1.13 commands at this point. Because we don't inject into the command packets we are unlikely to get this far unless
             // Bungee plugins are adding results for commands they don't own anyway
-            if ( con.getPendingConnection().getVersion() < ProtocolConstants.MINECRAFT_1_13 )
+            if ( ProtocolVersion.MINECRAFT_1_13.isAfter( con.getPendingConnection().getVersion() ) )
             {
                 con.unsafe().sendPacket( new TabCompleteResponse( results ) );
             } else
@@ -291,6 +291,6 @@ public class UpstreamBridge extends PacketHandler
     @Override
     public String toString()
     {
-        return "[" + con.getAddress() + "|" + con.getName() + "] -> UpstreamBridge";
+        return "[" + con.getAddress() + "|" + con.getName() + "|" + con.getPendingConnection().getProtocol().getVersionIntroducedIn() + "] -> UpstreamBridge";
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
index 99ad8b9c..fdfb8f4f 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
@@ -3,12 +3,13 @@ package net.md_5.bungee.entitymap;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufInputStream;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.io.DataInputStream;
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
 
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 import se.llbit.nbt.NamedTag;
 import se.llbit.nbt.Tag;
 
@@ -25,67 +26,77 @@ public abstract class EntityMap
     private final boolean[] serverboundInts = new boolean[ 256 ];
     private final boolean[] serverboundVarInts = new boolean[ 256 ];
 
-    // Returns the correct entity map for the protocol version
+    /**
+     * Returns the correct entity map for the protocol version
+     *
+     * @param version protocol version
+     * @return EntityMap for that protocol version
+     */
     public static EntityMap getEntityMap(int version)
+    {
+        return getEntityMap( ProtocolVersion.getProtocolVersion( version ) );
+    }
+
+    public static EntityMap getEntityMap(ProtocolVersion protocolVersion)
     {
         // Waterfall start
         if (net.md_5.bungee.api.ProxyServer.getInstance().getConfig().isDisableEntityMetadataRewrite()) {
             return EntityMap_Dummy.INSTANCE;
         }
         // Waterfall end
-        switch ( version )
+        switch ( protocolVersion )
         {
-            case ProtocolConstants.MINECRAFT_1_8:
+            case MINECRAFT_1_8:
                 return EntityMap_1_8.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_9:
-            case ProtocolConstants.MINECRAFT_1_9_1:
-            case ProtocolConstants.MINECRAFT_1_9_2:
+            case MINECRAFT_1_9:
+            case MINECRAFT_1_9_1:
+            case MINECRAFT_1_9_2:
                 return EntityMap_1_9.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_9_4:
+            case MINECRAFT_1_9_4:
                 return EntityMap_1_9_4.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_10:
+            case MINECRAFT_1_10:
                 return EntityMap_1_10.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_11:
-            case ProtocolConstants.MINECRAFT_1_11_1:
+            case MINECRAFT_1_11:
+            case MINECRAFT_1_11_1:
                 return EntityMap_1_11.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_12:
+            case MINECRAFT_1_12:
                 return EntityMap_1_12.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_12_1:
-            case ProtocolConstants.MINECRAFT_1_12_2:
+            case MINECRAFT_1_12_1:
+            case MINECRAFT_1_12_2:
                 return EntityMap_1_12_1.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_13:
-            case ProtocolConstants.MINECRAFT_1_13_1:
-            case ProtocolConstants.MINECRAFT_1_13_2:
+            case MINECRAFT_1_13:
+            case MINECRAFT_1_13_1:
+            case MINECRAFT_1_13_2:
                 return EntityMap_1_13.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_14:
-            case ProtocolConstants.MINECRAFT_1_14_1:
-            case ProtocolConstants.MINECRAFT_1_14_2:
-            case ProtocolConstants.MINECRAFT_1_14_3:
-            case ProtocolConstants.MINECRAFT_1_14_4:
+            case MINECRAFT_1_14:
+            case MINECRAFT_1_14_1:
+            case MINECRAFT_1_14_2:
+            case MINECRAFT_1_14_3:
+            case MINECRAFT_1_14_4:
                 return EntityMap_1_14.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_15:
-            case ProtocolConstants.MINECRAFT_1_15_1:
-            case ProtocolConstants.MINECRAFT_1_15_2:
+            case MINECRAFT_1_15:
+            case MINECRAFT_1_15_1:
+            case MINECRAFT_1_15_2:
                 return EntityMap_1_15.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_16:
-            case ProtocolConstants.MINECRAFT_1_16_1:
+            case MINECRAFT_1_16:
+            case MINECRAFT_1_16_1:
                 return EntityMap_1_16.INSTANCE;
-            case ProtocolConstants.MINECRAFT_1_16_2:
-            case ProtocolConstants.MINECRAFT_1_16_3:
-            case ProtocolConstants.MINECRAFT_1_16_4:
+            case MINECRAFT_1_16_2:
+            case MINECRAFT_1_16_3:
+            case MINECRAFT_1_16_4:
                 return EntityMap_1_16_2.INSTANCE_1_16_2;
-            case ProtocolConstants.MINECRAFT_1_17:
-            case ProtocolConstants.MINECRAFT_1_17_1:
+            case MINECRAFT_1_17:
+            case MINECRAFT_1_17_1:
                 return EntityMap_1_16_2.INSTANCE_1_17;
-            case ProtocolConstants.MINECRAFT_1_18:
+            case MINECRAFT_1_18:
                 return EntityMap_1_16_2.INSTANCE_1_18;
         }
-        throw new RuntimeException( "Version " + version + " has no entity map" );
+        throw new RuntimeException( "Version " + protocolVersion.getVersionIntroducedIn() + " with protocol " + protocolVersion.getProtocol() + " has no entity map" );
     }
 
-    protected void addRewrite(int id, ProtocolConstants.Direction direction, boolean varint)
+    protected void addRewrite(int id, ProtocolDirection direction, boolean varint)
     {
-        if ( direction == ProtocolConstants.Direction.TO_CLIENT )
+        if ( direction == ProtocolDirection.TO_CLIENT )
         {
             if ( varint )
             {
@@ -165,7 +176,7 @@ public abstract class EntityMap
         while ( ( index = packet.readUnsignedByte() ) != 0xFF )
         {
             int type = DefinedPacket.readVarInt( packet );
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 )
+            if ( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( protocolVersion ) )
             {
                 switch ( type )
                 {
@@ -178,7 +189,7 @@ public abstract class EntityMap
                     case 15: // particle
                         int particleId = DefinedPacket.readVarInt( packet );
 
-                        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_14 )
+                        if ( ProtocolVersion.MINECRAFT_1_14.isBeforeOrEq( protocolVersion ) )
                         {
                             switch ( particleId )
                             {
@@ -296,7 +307,7 @@ public abstract class EntityMap
                     break;
                 default:
                     // Waterfall start - Don't lie
-                    if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 )
+                    if ( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( protocolVersion ) )
                     {
                         type++;
                     }
@@ -310,13 +321,13 @@ public abstract class EntityMap
 
     private static void readSkipSlot(ByteBuf packet, int protocolVersion)
     {
-        if ( ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13_2 ) ? packet.readBoolean() : packet.readShort() != -1 )
+        if ( ( ProtocolVersion.MINECRAFT_1_13_2.isBeforeOrEq( protocolVersion ) ) ? packet.readBoolean() : packet.readShort() != -1 )
         {
-            if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13_2 )
+            if ( ProtocolVersion.MINECRAFT_1_13_2.isBeforeOrEq( protocolVersion ) )
             {
                 DefinedPacket.readVarInt( packet );
             }
-            packet.skipBytes( ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 ) ? 1 : 3 ); // byte vs byte, short
+            packet.skipBytes( ( ProtocolVersion.MINECRAFT_1_13.isBeforeOrEq( protocolVersion ) ) ? 1 : 3 ); // byte vs byte, short
 
             int position = packet.readerIndex();
             if ( packet.readByte() != 0 )
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_10.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_10.java
index 6db530c3..487957a9 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_10.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_10.java
@@ -2,12 +2,12 @@ package net.md_5.bungee.entitymap;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import java.util.UUID;
 import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 class EntityMap_1_10 extends EntityMap
 {
@@ -16,34 +16,34 @@ class EntityMap_1_10 extends EntityMap
 
     EntityMap_1_10()
     {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x25, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x26, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x27, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x2F, ProtocolConstants.Direction.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
-        addRewrite( 0x31, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x34, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x36, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x39, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x3A, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x3B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x3C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x40, ProtocolConstants.Direction.TO_CLIENT, true ); // Attach Entity : PacketPlayOutMount
-        addRewrite( 0x48, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x49, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x4A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x4B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
+        addRewrite( 0x00, ProtocolDirection.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
+        addRewrite( 0x01, ProtocolDirection.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
+        addRewrite( 0x03, ProtocolDirection.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
+        addRewrite( 0x04, ProtocolDirection.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
+        addRewrite( 0x05, ProtocolDirection.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
+        addRewrite( 0x06, ProtocolDirection.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
+        addRewrite( 0x08, ProtocolDirection.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
+        addRewrite( 0x1B, ProtocolDirection.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
+        addRewrite( 0x25, ProtocolDirection.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
+        addRewrite( 0x26, ProtocolDirection.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
+        addRewrite( 0x27, ProtocolDirection.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
+        addRewrite( 0x28, ProtocolDirection.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
+        addRewrite( 0x2F, ProtocolDirection.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
+        addRewrite( 0x31, ProtocolDirection.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
+        addRewrite( 0x34, ProtocolDirection.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
+        addRewrite( 0x36, ProtocolDirection.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
+        addRewrite( 0x39, ProtocolDirection.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
+        addRewrite( 0x3A, ProtocolDirection.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
+        addRewrite( 0x3B, ProtocolDirection.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
+        addRewrite( 0x3C, ProtocolDirection.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
+        addRewrite( 0x40, ProtocolDirection.TO_CLIENT, true ); // Attach Entity : PacketPlayOutMount
+        addRewrite( 0x48, ProtocolDirection.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
+        addRewrite( 0x49, ProtocolDirection.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
+        addRewrite( 0x4A, ProtocolDirection.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
+        addRewrite( 0x4B, ProtocolDirection.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
 
-        addRewrite( 0x0A, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x14, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
+        addRewrite( 0x0A, ProtocolDirection.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
+        addRewrite( 0x14, ProtocolDirection.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_11.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_11.java
index 36822127..29d83fdc 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_11.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_11.java
@@ -2,12 +2,12 @@ package net.md_5.bungee.entitymap;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import java.util.UUID;
 import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 class EntityMap_1_11 extends EntityMap
 {
@@ -16,34 +16,34 @@ class EntityMap_1_11 extends EntityMap
 
     EntityMap_1_11()
     {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x25, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x26, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x27, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x2F, ProtocolConstants.Direction.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
-        addRewrite( 0x31, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x34, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x36, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x39, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x3A, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x3B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x3C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x40, ProtocolConstants.Direction.TO_CLIENT, true ); // Attach Entity : PacketPlayOutMount
-        addRewrite( 0x48, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x49, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x4A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x4B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
+        addRewrite( 0x00, ProtocolDirection.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
+        addRewrite( 0x01, ProtocolDirection.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
+        addRewrite( 0x03, ProtocolDirection.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
+        addRewrite( 0x04, ProtocolDirection.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
+        addRewrite( 0x05, ProtocolDirection.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
+        addRewrite( 0x06, ProtocolDirection.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
+        addRewrite( 0x08, ProtocolDirection.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
+        addRewrite( 0x1B, ProtocolDirection.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
+        addRewrite( 0x25, ProtocolDirection.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
+        addRewrite( 0x26, ProtocolDirection.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
+        addRewrite( 0x27, ProtocolDirection.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
+        addRewrite( 0x28, ProtocolDirection.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
+        addRewrite( 0x2F, ProtocolDirection.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
+        addRewrite( 0x31, ProtocolDirection.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
+        addRewrite( 0x34, ProtocolDirection.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
+        addRewrite( 0x36, ProtocolDirection.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
+        addRewrite( 0x39, ProtocolDirection.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
+        addRewrite( 0x3A, ProtocolDirection.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
+        addRewrite( 0x3B, ProtocolDirection.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
+        addRewrite( 0x3C, ProtocolDirection.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
+        addRewrite( 0x40, ProtocolDirection.TO_CLIENT, true ); // Attach Entity : PacketPlayOutMount
+        addRewrite( 0x48, ProtocolDirection.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
+        addRewrite( 0x49, ProtocolDirection.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
+        addRewrite( 0x4A, ProtocolDirection.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
+        addRewrite( 0x4B, ProtocolDirection.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
 
-        addRewrite( 0x0A, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x14, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
+        addRewrite( 0x0A, ProtocolDirection.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
+        addRewrite( 0x14, ProtocolDirection.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_12.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_12.java
index 38e12ce4..ecc8113a 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_12.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_12.java
@@ -2,12 +2,12 @@ package net.md_5.bungee.entitymap;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import java.util.UUID;
 import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 class EntityMap_1_12 extends EntityMap
 {
@@ -16,34 +16,34 @@ class EntityMap_1_12 extends EntityMap
 
     EntityMap_1_12()
     {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x25, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x26, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x27, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x2F, ProtocolConstants.Direction.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
-        addRewrite( 0x32, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x35, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x38, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x3B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x3C, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x3D, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x3E, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x42, ProtocolConstants.Direction.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
-        addRewrite( 0x4A, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x4B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x4D, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x4E, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
+        addRewrite( 0x00, ProtocolDirection.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
+        addRewrite( 0x01, ProtocolDirection.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
+        addRewrite( 0x03, ProtocolDirection.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
+        addRewrite( 0x04, ProtocolDirection.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
+        addRewrite( 0x05, ProtocolDirection.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
+        addRewrite( 0x06, ProtocolDirection.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
+        addRewrite( 0x08, ProtocolDirection.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
+        addRewrite( 0x1B, ProtocolDirection.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
+        addRewrite( 0x25, ProtocolDirection.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
+        addRewrite( 0x26, ProtocolDirection.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
+        addRewrite( 0x27, ProtocolDirection.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
+        addRewrite( 0x28, ProtocolDirection.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
+        addRewrite( 0x2F, ProtocolDirection.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
+        addRewrite( 0x32, ProtocolDirection.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
+        addRewrite( 0x35, ProtocolDirection.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
+        addRewrite( 0x38, ProtocolDirection.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
+        addRewrite( 0x3B, ProtocolDirection.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
+        addRewrite( 0x3C, ProtocolDirection.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
+        addRewrite( 0x3D, ProtocolDirection.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
+        addRewrite( 0x3E, ProtocolDirection.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
+        addRewrite( 0x42, ProtocolDirection.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
+        addRewrite( 0x4A, ProtocolDirection.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
+        addRewrite( 0x4B, ProtocolDirection.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
+        addRewrite( 0x4D, ProtocolDirection.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
+        addRewrite( 0x4E, ProtocolDirection.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
 
-        addRewrite( 0x0B, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x15, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
+        addRewrite( 0x0B, ProtocolDirection.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
+        addRewrite( 0x15, ProtocolDirection.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_12_1.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_12_1.java
index 5f296839..d67166c1 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_12_1.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_12_1.java
@@ -2,12 +2,12 @@ package net.md_5.bungee.entitymap;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import java.util.UUID;
 import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 class EntityMap_1_12_1 extends EntityMap
 {
@@ -16,34 +16,34 @@ class EntityMap_1_12_1 extends EntityMap
 
     EntityMap_1_12_1()
     {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x25, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x26, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x27, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x30, ProtocolConstants.Direction.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
-        addRewrite( 0x33, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x36, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x39, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x3C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x3D, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x3E, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x3F, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x43, ProtocolConstants.Direction.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
-        addRewrite( 0x4B, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x4C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x4E, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x4F, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
+        addRewrite( 0x00, ProtocolDirection.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
+        addRewrite( 0x01, ProtocolDirection.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
+        addRewrite( 0x03, ProtocolDirection.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
+        addRewrite( 0x04, ProtocolDirection.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
+        addRewrite( 0x05, ProtocolDirection.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
+        addRewrite( 0x06, ProtocolDirection.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
+        addRewrite( 0x08, ProtocolDirection.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
+        addRewrite( 0x1B, ProtocolDirection.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
+        addRewrite( 0x25, ProtocolDirection.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
+        addRewrite( 0x26, ProtocolDirection.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
+        addRewrite( 0x27, ProtocolDirection.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
+        addRewrite( 0x28, ProtocolDirection.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
+        addRewrite( 0x30, ProtocolDirection.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
+        addRewrite( 0x33, ProtocolDirection.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
+        addRewrite( 0x36, ProtocolDirection.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
+        addRewrite( 0x39, ProtocolDirection.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
+        addRewrite( 0x3C, ProtocolDirection.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
+        addRewrite( 0x3D, ProtocolDirection.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
+        addRewrite( 0x3E, ProtocolDirection.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
+        addRewrite( 0x3F, ProtocolDirection.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
+        addRewrite( 0x43, ProtocolDirection.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
+        addRewrite( 0x4B, ProtocolDirection.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
+        addRewrite( 0x4C, ProtocolDirection.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
+        addRewrite( 0x4E, ProtocolDirection.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
+        addRewrite( 0x4F, ProtocolDirection.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
 
-        addRewrite( 0x0A, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x15, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
+        addRewrite( 0x0A, ProtocolDirection.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
+        addRewrite( 0x15, ProtocolDirection.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_13.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_13.java
index f3372f08..a126f2e0 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_13.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_13.java
@@ -2,12 +2,12 @@ package net.md_5.bungee.entitymap;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import java.util.UUID;
 import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 class EntityMap_1_13 extends EntityMap
 {
@@ -16,34 +16,34 @@ class EntityMap_1_13 extends EntityMap
 
     EntityMap_1_13()
     {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1C, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x27, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x29, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x2A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x33, ProtocolConstants.Direction.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
-        addRewrite( 0x36, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x39, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x3C, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x3F, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x40, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x41, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x42, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x46, ProtocolConstants.Direction.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
-        addRewrite( 0x4F, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x50, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x52, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x53, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
+        addRewrite( 0x00, ProtocolDirection.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
+        addRewrite( 0x01, ProtocolDirection.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
+        addRewrite( 0x03, ProtocolDirection.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
+        addRewrite( 0x04, ProtocolDirection.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
+        addRewrite( 0x05, ProtocolDirection.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
+        addRewrite( 0x06, ProtocolDirection.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
+        addRewrite( 0x08, ProtocolDirection.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
+        addRewrite( 0x1C, ProtocolDirection.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
+        addRewrite( 0x27, ProtocolDirection.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
+        addRewrite( 0x28, ProtocolDirection.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
+        addRewrite( 0x29, ProtocolDirection.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
+        addRewrite( 0x2A, ProtocolDirection.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
+        addRewrite( 0x33, ProtocolDirection.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
+        addRewrite( 0x36, ProtocolDirection.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
+        addRewrite( 0x39, ProtocolDirection.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
+        addRewrite( 0x3C, ProtocolDirection.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
+        addRewrite( 0x3F, ProtocolDirection.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
+        addRewrite( 0x40, ProtocolDirection.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
+        addRewrite( 0x41, ProtocolDirection.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
+        addRewrite( 0x42, ProtocolDirection.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
+        addRewrite( 0x46, ProtocolDirection.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
+        addRewrite( 0x4F, ProtocolDirection.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
+        addRewrite( 0x50, ProtocolDirection.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
+        addRewrite( 0x52, ProtocolDirection.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
+        addRewrite( 0x53, ProtocolDirection.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
 
-        addRewrite( 0x0D, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x19, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
+        addRewrite( 0x0D, ProtocolDirection.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
+        addRewrite( 0x19, ProtocolDirection.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_14.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_14.java
index 8210b0a7..01aa6d18 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_14.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_14.java
@@ -2,12 +2,12 @@ package net.md_5.bungee.entitymap;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import java.util.UUID;
 import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 class EntityMap_1_14 extends EntityMap
 {
@@ -16,33 +16,33 @@ class EntityMap_1_14 extends EntityMap
 
     EntityMap_1_14()
     {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x29, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x2A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x2B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x38, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x3B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x3E, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x43, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x44, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x45, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x46, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x4A, ProtocolConstants.Direction.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
-        addRewrite( 0x55, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x56, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x58, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x59, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
+        addRewrite( 0x00, ProtocolDirection.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
+        addRewrite( 0x01, ProtocolDirection.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
+        addRewrite( 0x03, ProtocolDirection.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
+        addRewrite( 0x04, ProtocolDirection.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
+        addRewrite( 0x05, ProtocolDirection.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
+        addRewrite( 0x06, ProtocolDirection.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
+        addRewrite( 0x08, ProtocolDirection.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
+        addRewrite( 0x1B, ProtocolDirection.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
+        addRewrite( 0x28, ProtocolDirection.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
+        addRewrite( 0x29, ProtocolDirection.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
+        addRewrite( 0x2A, ProtocolDirection.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
+        addRewrite( 0x2B, ProtocolDirection.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
+        addRewrite( 0x38, ProtocolDirection.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
+        addRewrite( 0x3B, ProtocolDirection.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
+        addRewrite( 0x3E, ProtocolDirection.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
+        addRewrite( 0x43, ProtocolDirection.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
+        addRewrite( 0x44, ProtocolDirection.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
+        addRewrite( 0x45, ProtocolDirection.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
+        addRewrite( 0x46, ProtocolDirection.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
+        addRewrite( 0x4A, ProtocolDirection.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
+        addRewrite( 0x55, ProtocolDirection.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
+        addRewrite( 0x56, ProtocolDirection.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
+        addRewrite( 0x58, ProtocolDirection.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
+        addRewrite( 0x59, ProtocolDirection.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
 
-        addRewrite( 0x0E, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
+        addRewrite( 0x0E, ProtocolDirection.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
+        addRewrite( 0x1B, ProtocolDirection.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_15.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_15.java
index c2cf810f..9f0fb564 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_15.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_15.java
@@ -2,12 +2,12 @@ package net.md_5.bungee.entitymap;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import java.util.UUID;
 import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 class EntityMap_1_15 extends EntityMap
 {
@@ -16,33 +16,33 @@ class EntityMap_1_15 extends EntityMap
 
     EntityMap_1_15()
     {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x09, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1C, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x29, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x2A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x2B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x2C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x39, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x3C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x3F, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x44, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x45, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x46, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x47, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x4B, ProtocolConstants.Direction.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
-        addRewrite( 0x56, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x57, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x59, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x5A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
+        addRewrite( 0x00, ProtocolDirection.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
+        addRewrite( 0x01, ProtocolDirection.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
+        addRewrite( 0x03, ProtocolDirection.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
+        addRewrite( 0x04, ProtocolDirection.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
+        addRewrite( 0x05, ProtocolDirection.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
+        addRewrite( 0x06, ProtocolDirection.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
+        addRewrite( 0x09, ProtocolDirection.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
+        addRewrite( 0x1C, ProtocolDirection.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
+        addRewrite( 0x29, ProtocolDirection.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
+        addRewrite( 0x2A, ProtocolDirection.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
+        addRewrite( 0x2B, ProtocolDirection.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
+        addRewrite( 0x2C, ProtocolDirection.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
+        addRewrite( 0x39, ProtocolDirection.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
+        addRewrite( 0x3C, ProtocolDirection.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
+        addRewrite( 0x3F, ProtocolDirection.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
+        addRewrite( 0x44, ProtocolDirection.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
+        addRewrite( 0x45, ProtocolDirection.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
+        addRewrite( 0x46, ProtocolDirection.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
+        addRewrite( 0x47, ProtocolDirection.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
+        addRewrite( 0x4B, ProtocolDirection.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
+        addRewrite( 0x56, ProtocolDirection.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
+        addRewrite( 0x57, ProtocolDirection.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
+        addRewrite( 0x59, ProtocolDirection.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
+        addRewrite( 0x5A, ProtocolDirection.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
 
-        addRewrite( 0x0E, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
+        addRewrite( 0x0E, ProtocolDirection.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
+        addRewrite( 0x1B, ProtocolDirection.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_16.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_16.java
index c8b06707..0ae65109 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_16.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_16.java
@@ -2,12 +2,12 @@ package net.md_5.bungee.entitymap;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import java.util.UUID;
 import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 class EntityMap_1_16 extends EntityMap
 {
@@ -16,33 +16,33 @@ class EntityMap_1_16 extends EntityMap
 
     EntityMap_1_16()
     {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x02, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x29, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x2A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x2B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x38, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x3B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x3E, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x44, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x45, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x46, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x47, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x4B, ProtocolConstants.Direction.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
-        addRewrite( 0x55, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x56, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x58, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x59, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
+        addRewrite( 0x00, ProtocolDirection.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
+        addRewrite( 0x01, ProtocolDirection.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
+        addRewrite( 0x02, ProtocolDirection.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
+        addRewrite( 0x03, ProtocolDirection.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
+        addRewrite( 0x04, ProtocolDirection.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
+        addRewrite( 0x05, ProtocolDirection.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
+        addRewrite( 0x08, ProtocolDirection.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
+        addRewrite( 0x1B, ProtocolDirection.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
+        addRewrite( 0x28, ProtocolDirection.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
+        addRewrite( 0x29, ProtocolDirection.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
+        addRewrite( 0x2A, ProtocolDirection.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
+        addRewrite( 0x2B, ProtocolDirection.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
+        addRewrite( 0x38, ProtocolDirection.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
+        addRewrite( 0x3B, ProtocolDirection.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
+        addRewrite( 0x3E, ProtocolDirection.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
+        addRewrite( 0x44, ProtocolDirection.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
+        addRewrite( 0x45, ProtocolDirection.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
+        addRewrite( 0x46, ProtocolDirection.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
+        addRewrite( 0x47, ProtocolDirection.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
+        addRewrite( 0x4B, ProtocolDirection.TO_CLIENT, true ); // Set Passengers : PacketPlayOutMount
+        addRewrite( 0x55, ProtocolDirection.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
+        addRewrite( 0x56, ProtocolDirection.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
+        addRewrite( 0x58, ProtocolDirection.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
+        addRewrite( 0x59, ProtocolDirection.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
 
-        addRewrite( 0x0E, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x1C, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
+        addRewrite( 0x0E, ProtocolDirection.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
+        addRewrite( 0x1C, ProtocolDirection.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_8.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_8.java
index 8e2dbe69..59ca08f9 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_8.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_8.java
@@ -2,12 +2,12 @@ package net.md_5.bungee.entitymap;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import java.util.UUID;
 import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 class EntityMap_1_8 extends EntityMap
 {
@@ -16,35 +16,35 @@ class EntityMap_1_8 extends EntityMap
 
     EntityMap_1_8()
     {
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment
-        addRewrite( 0x0A, ProtocolConstants.Direction.TO_CLIENT, true ); // Use bed
-        addRewrite( 0x0B, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation
-        addRewrite( 0x0C, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player
-        addRewrite( 0x0D, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item
-        addRewrite( 0x0E, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object
-        addRewrite( 0x0F, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob
-        addRewrite( 0x10, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting
-        addRewrite( 0x11, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb
-        addRewrite( 0x12, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity
-        addRewrite( 0x14, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity
-        addRewrite( 0x15, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move
-        addRewrite( 0x16, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look
-        addRewrite( 0x17, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move
-        addRewrite( 0x18, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport
-        addRewrite( 0x19, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look
-        addRewrite( 0x1A, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity
-        addRewrite( 0x1C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata
-        addRewrite( 0x1D, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect
-        addRewrite( 0x1E, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect
-        addRewrite( 0x20, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties
-        addRewrite( 0x25, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation
-        addRewrite( 0x2C, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Global Entity
-        addRewrite( 0x43, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera
-        addRewrite( 0x49, ProtocolConstants.Direction.TO_CLIENT, true ); // Update Entity NBT
+        addRewrite( 0x04, ProtocolDirection.TO_CLIENT, true ); // Entity Equipment
+        addRewrite( 0x0A, ProtocolDirection.TO_CLIENT, true ); // Use bed
+        addRewrite( 0x0B, ProtocolDirection.TO_CLIENT, true ); // Animation
+        addRewrite( 0x0C, ProtocolDirection.TO_CLIENT, true ); // Spawn Player
+        addRewrite( 0x0D, ProtocolDirection.TO_CLIENT, true ); // Collect Item
+        addRewrite( 0x0E, ProtocolDirection.TO_CLIENT, true ); // Spawn Object
+        addRewrite( 0x0F, ProtocolDirection.TO_CLIENT, true ); // Spawn Mob
+        addRewrite( 0x10, ProtocolDirection.TO_CLIENT, true ); // Spawn Painting
+        addRewrite( 0x11, ProtocolDirection.TO_CLIENT, true ); // Spawn Experience Orb
+        addRewrite( 0x12, ProtocolDirection.TO_CLIENT, true ); // Entity Velocity
+        addRewrite( 0x14, ProtocolDirection.TO_CLIENT, true ); // Entity
+        addRewrite( 0x15, ProtocolDirection.TO_CLIENT, true ); // Entity Relative Move
+        addRewrite( 0x16, ProtocolDirection.TO_CLIENT, true ); // Entity Look
+        addRewrite( 0x17, ProtocolDirection.TO_CLIENT, true ); // Entity Look and Relative Move
+        addRewrite( 0x18, ProtocolDirection.TO_CLIENT, true ); // Entity Teleport
+        addRewrite( 0x19, ProtocolDirection.TO_CLIENT, true ); // Entity Head Look
+        addRewrite( 0x1A, ProtocolDirection.TO_CLIENT, false ); // Entity Status
+        addRewrite( 0x1B, ProtocolDirection.TO_CLIENT, false ); // Attach Entity
+        addRewrite( 0x1C, ProtocolDirection.TO_CLIENT, true ); // Entity Metadata
+        addRewrite( 0x1D, ProtocolDirection.TO_CLIENT, true ); // Entity Effect
+        addRewrite( 0x1E, ProtocolDirection.TO_CLIENT, true ); // Remove Entity Effect
+        addRewrite( 0x20, ProtocolDirection.TO_CLIENT, true ); // Entity Properties
+        addRewrite( 0x25, ProtocolDirection.TO_CLIENT, true ); // Block Break Animation
+        addRewrite( 0x2C, ProtocolDirection.TO_CLIENT, true ); // Spawn Global Entity
+        addRewrite( 0x43, ProtocolDirection.TO_CLIENT, true ); // Camera
+        addRewrite( 0x49, ProtocolDirection.TO_CLIENT, true ); // Update Entity NBT
 
-        addRewrite( 0x02, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity
-        addRewrite( 0x0B, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action
+        addRewrite( 0x02, ProtocolDirection.TO_SERVER, true ); // Use Entity
+        addRewrite( 0x0B, ProtocolDirection.TO_SERVER, true ); // Entity Action
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_9.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_9.java
index d61dc0cb..3b41ca6c 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_9.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_9.java
@@ -2,12 +2,12 @@ package net.md_5.bungee.entitymap;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import java.util.UUID;
 import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 class EntityMap_1_9 extends EntityMap
 {
@@ -16,34 +16,34 @@ class EntityMap_1_9 extends EntityMap
 
     EntityMap_1_9()
     {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x25, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x26, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x27, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x2F, ProtocolConstants.Direction.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
-        addRewrite( 0x31, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x34, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x36, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x39, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x3A, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x3B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x3C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x40, ProtocolConstants.Direction.TO_CLIENT, true ); // Attach Entity : PacketPlayOutMount
-        addRewrite( 0x49, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x4A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x4B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x4C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
+        addRewrite( 0x00, ProtocolDirection.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
+        addRewrite( 0x01, ProtocolDirection.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
+        addRewrite( 0x03, ProtocolDirection.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
+        addRewrite( 0x04, ProtocolDirection.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
+        addRewrite( 0x05, ProtocolDirection.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
+        addRewrite( 0x06, ProtocolDirection.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
+        addRewrite( 0x08, ProtocolDirection.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
+        addRewrite( 0x1B, ProtocolDirection.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
+        addRewrite( 0x25, ProtocolDirection.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
+        addRewrite( 0x26, ProtocolDirection.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
+        addRewrite( 0x27, ProtocolDirection.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
+        addRewrite( 0x28, ProtocolDirection.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
+        addRewrite( 0x2F, ProtocolDirection.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
+        addRewrite( 0x31, ProtocolDirection.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
+        addRewrite( 0x34, ProtocolDirection.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
+        addRewrite( 0x36, ProtocolDirection.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
+        addRewrite( 0x39, ProtocolDirection.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
+        addRewrite( 0x3A, ProtocolDirection.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
+        addRewrite( 0x3B, ProtocolDirection.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
+        addRewrite( 0x3C, ProtocolDirection.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
+        addRewrite( 0x40, ProtocolDirection.TO_CLIENT, true ); // Attach Entity : PacketPlayOutMount
+        addRewrite( 0x49, ProtocolDirection.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
+        addRewrite( 0x4A, ProtocolDirection.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
+        addRewrite( 0x4B, ProtocolDirection.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
+        addRewrite( 0x4C, ProtocolDirection.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
 
-        addRewrite( 0x0A, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x14, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
+        addRewrite( 0x0A, ProtocolDirection.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
+        addRewrite( 0x14, ProtocolDirection.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_9_4.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_9_4.java
index bfbc8432..f133bda0 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_9_4.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_1_9_4.java
@@ -2,12 +2,12 @@ package net.md_5.bungee.entitymap;
 
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.netty.buffer.ByteBuf;
+import io.sapphiremc.amethyst.api.protocol.ProtocolDirection;
 import java.util.UUID;
 import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.UserConnection;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.protocol.DefinedPacket;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 class EntityMap_1_9_4 extends EntityMap
 {
@@ -16,34 +16,34 @@ class EntityMap_1_9_4 extends EntityMap
 
     EntityMap_1_9_4()
     {
-        addRewrite( 0x00, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
-        addRewrite( 0x01, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
-        addRewrite( 0x03, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
-        addRewrite( 0x04, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
-        addRewrite( 0x05, ProtocolConstants.Direction.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
-        addRewrite( 0x06, ProtocolConstants.Direction.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
-        addRewrite( 0x08, ProtocolConstants.Direction.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
-        addRewrite( 0x1B, ProtocolConstants.Direction.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
-        addRewrite( 0x25, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
-        addRewrite( 0x26, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
-        addRewrite( 0x27, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
-        addRewrite( 0x28, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
-        addRewrite( 0x2F, ProtocolConstants.Direction.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
-        addRewrite( 0x31, ProtocolConstants.Direction.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
-        addRewrite( 0x34, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
-        addRewrite( 0x36, ProtocolConstants.Direction.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
-        addRewrite( 0x39, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
-        addRewrite( 0x3A, ProtocolConstants.Direction.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
-        addRewrite( 0x3B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
-        addRewrite( 0x3C, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
-        addRewrite( 0x40, ProtocolConstants.Direction.TO_CLIENT, true ); // Attach Entity : PacketPlayOutMount
-        addRewrite( 0x48, ProtocolConstants.Direction.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
-        addRewrite( 0x49, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
-        addRewrite( 0x4A, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
-        addRewrite( 0x4B, ProtocolConstants.Direction.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
+        addRewrite( 0x00, ProtocolDirection.TO_CLIENT, true ); // Spawn Object : PacketPlayOutSpawnEntity
+        addRewrite( 0x01, ProtocolDirection.TO_CLIENT, true ); // Spawn Experience Orb : PacketPlayOutSpawnEntityExperienceOrb
+        addRewrite( 0x03, ProtocolDirection.TO_CLIENT, true ); // Spawn Mob : PacketPlayOutSpawnEntityLiving
+        addRewrite( 0x04, ProtocolDirection.TO_CLIENT, true ); // Spawn Painting : PacketPlayOutSpawnEntityPainting
+        addRewrite( 0x05, ProtocolDirection.TO_CLIENT, true ); // Spawn Player : PacketPlayOutNamedEntitySpawn
+        addRewrite( 0x06, ProtocolDirection.TO_CLIENT, true ); // Animation : PacketPlayOutAnimation
+        addRewrite( 0x08, ProtocolDirection.TO_CLIENT, true ); // Block Break Animation : PacketPlayOutBlockBreakAnimation
+        addRewrite( 0x1B, ProtocolDirection.TO_CLIENT, false ); // Entity Status : PacketPlayOutEntityStatus
+        addRewrite( 0x25, ProtocolDirection.TO_CLIENT, true ); // Entity Relative Move : PacketPlayOutRelEntityMove
+        addRewrite( 0x26, ProtocolDirection.TO_CLIENT, true ); // Entity Look and Relative Move : PacketPlayOutRelEntityMoveLook
+        addRewrite( 0x27, ProtocolDirection.TO_CLIENT, true ); // Entity Look : PacketPlayOutEntityLook
+        addRewrite( 0x28, ProtocolDirection.TO_CLIENT, true ); // Entity : PacketPlayOutEntity
+        addRewrite( 0x2F, ProtocolDirection.TO_CLIENT, true ); // Use bed : PacketPlayOutBed
+        addRewrite( 0x31, ProtocolDirection.TO_CLIENT, true ); // Remove Entity Effect : PacketPlayOutRemoveEntityEffect
+        addRewrite( 0x34, ProtocolDirection.TO_CLIENT, true ); // Entity Head Look : PacketPlayOutEntityHeadRotation
+        addRewrite( 0x36, ProtocolDirection.TO_CLIENT, true ); // Camera : PacketPlayOutCamera
+        addRewrite( 0x39, ProtocolDirection.TO_CLIENT, true ); // Entity Metadata : PacketPlayOutEntityMetadata
+        addRewrite( 0x3A, ProtocolDirection.TO_CLIENT, false ); // Attach Entity : PacketPlayOutAttachEntity
+        addRewrite( 0x3B, ProtocolDirection.TO_CLIENT, true ); // Entity Velocity : PacketPlayOutEntityVelocity
+        addRewrite( 0x3C, ProtocolDirection.TO_CLIENT, true ); // Entity Equipment : PacketPlayOutEntityEquipment
+        addRewrite( 0x40, ProtocolDirection.TO_CLIENT, true ); // Attach Entity : PacketPlayOutMount
+        addRewrite( 0x48, ProtocolDirection.TO_CLIENT, true ); // Collect Item : PacketPlayOutCollect
+        addRewrite( 0x49, ProtocolDirection.TO_CLIENT, true ); // Entity Teleport : PacketPlayOutEntityTeleport
+        addRewrite( 0x4A, ProtocolDirection.TO_CLIENT, true ); // Entity Properties : PacketPlayOutUpdateAttributes
+        addRewrite( 0x4B, ProtocolDirection.TO_CLIENT, true ); // Entity Effect : PacketPlayOutEntityEffect
 
-        addRewrite( 0x0A, ProtocolConstants.Direction.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
-        addRewrite( 0x14, ProtocolConstants.Direction.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
+        addRewrite( 0x0A, ProtocolDirection.TO_SERVER, true ); // Use Entity : PacketPlayInUseEntity
+        addRewrite( 0x14, ProtocolDirection.TO_SERVER, true ); // Entity Action : PacketPlayInEntityAction
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/forge/ForgeClientHandler.java b/proxy/src/main/java/net/md_5/bungee/forge/ForgeClientHandler.java
index bea2bbff..d33dc314 100644
--- a/proxy/src/main/java/net/md_5/bungee/forge/ForgeClientHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/forge/ForgeClientHandler.java
@@ -1,6 +1,7 @@
 package net.md_5.bungee.forge;
 
 import com.google.common.base.Preconditions;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.util.ArrayDeque;
 import java.util.Map;
 import lombok.AccessLevel;
@@ -9,7 +10,6 @@ import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
 import lombok.Setter;
 import net.md_5.bungee.UserConnection;
-import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.EntityRemoveEffect;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 
@@ -98,7 +98,7 @@ public class ForgeClientHandler
         state = ForgeClientHandshakeState.HELLO;
 
         // This issue only exists in Forge 1.8.9
-        if (this.con.getPendingConnection().getVersion() == ProtocolConstants.MINECRAFT_1_8) {
+        if (ProtocolVersion.MINECRAFT_1_8.isEquals(this.con.getPendingConnection().getVersion())) {
             this.resetAllThePotions(con);
         }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/util/ChatComponentTransformer.java b/proxy/src/main/java/net/md_5/bungee/util/ChatComponentTransformer.java
index faca17fa..25e167e8 100644
--- a/proxy/src/main/java/net/md_5/bungee/util/ChatComponentTransformer.java
+++ b/proxy/src/main/java/net/md_5/bungee/util/ChatComponentTransformer.java
@@ -2,6 +2,7 @@ package net.md_5.bungee.util;
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.Lists;
+import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.util.List;
 import java.util.regex.Pattern;
 import lombok.AccessLevel;
@@ -12,7 +13,6 @@ import net.md_5.bungee.api.chat.TextComponent;
 import net.md_5.bungee.api.chat.hover.content.Content;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.api.score.Score;
-import net.md_5.bungee.protocol.ProtocolConstants;
 
 /**
  * This class transforms chat components by attempting to replace transformable
@@ -36,7 +36,7 @@ public final class ChatComponentTransformer
 
     public BaseComponent[] legacyHoverTransform(ProxiedPlayer player, BaseComponent... components)
     {
-        if ( player.getPendingConnection().getVersion() < ProtocolConstants.MINECRAFT_1_16 )
+        if ( ProtocolVersion.MINECRAFT_1_16.isAfter( player.getPendingConnection().getVersion() ) )
         {
             for ( int i = 0; i < components.length; i++ )
             {
-- 
2.35.1.windows.2

