From e5cfa1c54306b455ea28806d1b6a25070b8af39d Mon Sep 17 00:00:00 2001
From: DenaryDev <denaryplanet@gmail.com>
Date: Thu, 6 Jan 2022 18:32:40 +0500
Subject: [PATCH] Amethyst message system


diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
index 0fa0c0dd..7c464176 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
@@ -59,7 +59,7 @@ public abstract class ProxyServer
     public abstract String getGitInfo();
 
     /**
-     * Gets a localized string from the .properties file.
+     * Gets a localized string from Amethyst messages.yml file.
      *
      * @param name translation name
      * @param args translation arguments
@@ -344,5 +344,14 @@ public abstract class ProxyServer
      * @see Amethyst
      */
     public abstract Amethyst getAmethyst();
+
+    /**
+     * Gets a localized {@link BaseComponent} from Amethyst messages.yml file.
+     *
+     * @param name translation name
+     * @param args translation arguments
+     * @return the localized {@link BaseComponent}
+     */
+    public abstract BaseComponent[] getTranslationComponent(String name, Object... args);
     // Amethyst end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
index 90031156..369ab407 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
@@ -193,7 +193,7 @@ public final class PluginManager
         {
             if ( tabResults == null )
             {
-                sender.sendMessage( ( command.getPermissionMessage() == null ) ? proxy.getTranslation( "no_permission" ) : command.getPermissionMessage() );
+                sender.sendMessage( ( command.getPermissionMessage() == null ) ? proxy.getTranslation( "error.no-perms.command" ) : command.getPermissionMessage() );
             }
             return true;
         }
@@ -212,7 +212,7 @@ public final class PluginManager
                 command.execute( sender, args );
         // Waterfall start - split command & tab complete exception handlers for exception event
         } catch ( Exception ex ) {
-            sender.sendMessage( ChatColor.RED + "An internal error occurred whilst executing this command, please check the console log for details." );
+            sender.sendMessage( proxy.getTranslationComponent( "error.command.internal" ) );
             ProxyServer.getInstance().getLogger().log( Level.WARNING, "Error in dispatching command", ex );
             this.callEvent( new ProxyExceptionEvent( new ProxyCommandException( ex, command, sender, args ) ) ); //Waterfall - throw error event
         }
diff --git a/flame/src/main/java/io/sapphiremc/amethyst/Amethyst.java b/flame/src/main/java/io/sapphiremc/amethyst/Amethyst.java
index aad66497..934c0ccf 100644
--- a/flame/src/main/java/io/sapphiremc/amethyst/Amethyst.java
+++ b/flame/src/main/java/io/sapphiremc/amethyst/Amethyst.java
@@ -1,6 +1,7 @@
 package io.sapphiremc.amethyst;
 
 import io.sapphiremc.amethyst.conf.AmethystConfig;
+import io.sapphiremc.amethyst.conf.MessagesConfig;
 import java.util.logging.Logger;
 import lombok.Getter;
 import net.md_5.bungee.config.ConfigurationProvider;
@@ -27,7 +28,7 @@ public class Amethyst {
      * @see YamlConfiguration
      */
     @Getter
-    private final ConfigurationProvider provider = ConfigurationProvider.getProvider(YamlConfiguration.class);
+    private ConfigurationProvider provider;
     /**
      * Proxy logger instance
      */
@@ -39,13 +40,21 @@ public class Amethyst {
      */
     @Getter
     private AmethystConfig config;
+    /**
+     * Amethyst messages config.
+     * @see MessagesConfig
+     */
+    @Getter
+    private MessagesConfig messages;
 
     /**
      * This method is used by the proxy to initialize this
      * Doesn't use this if you don't know what you are doing
      */
     public void load(Logger logger) {
+        this.provider = ConfigurationProvider.getProvider(YamlConfiguration.class);
         this.logger = logger;
         this.config = new AmethystConfig(provider);
+        this.messages = new MessagesConfig(provider);
     }
 }
diff --git a/flame/src/main/java/io/sapphiremc/amethyst/conf/MessagesConfig.java b/flame/src/main/java/io/sapphiremc/amethyst/conf/MessagesConfig.java
new file mode 100644
index 00000000..bf227f6d
--- /dev/null
+++ b/flame/src/main/java/io/sapphiremc/amethyst/conf/MessagesConfig.java
@@ -0,0 +1,83 @@
+package io.sapphiremc.amethyst.conf;
+
+import io.sapphiremc.amethyst.Amethyst;
+import java.text.MessageFormat;
+import java.util.HashMap;
+import java.util.Map;
+
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.config.ConfigurationProvider;
+
+public class MessagesConfig extends AbstractYamlConfig {
+
+    private final Map<String, String> formattedMessages = new HashMap<>();
+
+    public MessagesConfig(ConfigurationProvider provider) {
+        super(provider, "messages.yml");
+        init();
+        save();
+    }
+
+    @Override
+    public void loadContent() {
+        formattedMessages.put("command.alert.success", ChatColor.translateAlternateColorCodes('&', getString("command.alert.success", "8[&4Alert&8]&r ")));
+        formattedMessages.put("command.alert.error.message-needed", ChatColor.translateAlternateColorCodes('&', getString("command.alert.error.message-needed", "&cYou must supply a message.")));
+        formattedMessages.put("command.find.success", ChatColor.translateAlternateColorCodes('&', getString("command.find.success", "&a{0} &ris online at {1}")));
+        formattedMessages.put("command.ip.success", ChatColor.translateAlternateColorCodes('&', getString("command.ip.success", "&9IP of {0} is {1}")));
+        formattedMessages.put("command.kick.success", ChatColor.translateAlternateColorCodes('&', getString("command.kick.success", "&cYou have been kicked off the proxy.")));
+        formattedMessages.put("command.list.header", ChatColor.translateAlternateColorCodes('&', getString("command.list.header", "Available servers:")));
+        formattedMessages.put("command.list.entry", ChatColor.translateAlternateColorCodes('&', getString("command.list.entry", "&a[{0}] &e({1}): &r{2}")));
+        formattedMessages.put("command.list.total", ChatColor.translateAlternateColorCodes('&', getString("command.list.total", "Total players online: {0}")));
+        formattedMessages.put("command.perms.groups", ChatColor.translateAlternateColorCodes('&', getString("command.perms.groups", "&6You have the following groups: {0}")));
+        formattedMessages.put("command.perms.permissions", ChatColor.translateAlternateColorCodes('&', getString("command.perms.permissions", "=&9- {0}")));
+        formattedMessages.put("command.reload.success", ChatColor.translateAlternateColorCodes('&', getString("command.reload.success", "&c&lAmethyst has been reloaded. This is NOT advisable and you will not be supported with any issues that arise! Please restart Amethyst ASAP.")));
+        formattedMessages.put("command.send.result", ChatColor.translateAlternateColorCodes('&', getString("command.send.result", "Send results:")));
+        formattedMessages.put("command.send.target", ChatColor.translateAlternateColorCodes('&', getString("command.send.target", "&6Summoned to {0} by {1}")));
+        formattedMessages.put("command.send.usage", ChatColor.translateAlternateColorCodes('&', getString("command.send.usage", "&cNot enough arguments, usage: /send <server|player|all|current> <target>")));
+        formattedMessages.put("command.server.curren", ChatColor.translateAlternateColorCodes('&', getString("command.server.current", "&6You are currently connected to {0}.")));
+        formattedMessages.put("command.server.available", ChatColor.translateAlternateColorCodes('&', getString("command.server.available", "&6You may connect to the following servers at this time: ")));
+        formattedMessages.put("command.server.hover", ChatColor.translateAlternateColorCodes('&', getString("command.server.hover", "{0} players online\nClick to connect to this server")));
+
+        formattedMessages.put("event.fallback.kick", ChatColor.translateAlternateColorCodes('&', getString("event.fallback.kick", "&cCould not connect to a default or fallback server. Incorrectly configured address/port/firewall? {0}")));
+        formattedMessages.put("event.fallback.lobby", ChatColor.translateAlternateColorCodes('&', getString("event.fallback.lobby", "&cCould not connect to target server, you have been moved to a fallback server.")));
+        formattedMessages.put("event.restart", ChatColor.translateAlternateColorCodes('&', getString("event.restart", "[Proxy] Proxy restarting.")));
+        formattedMessages.put("event.server-down", ChatColor.translateAlternateColorCodes('&', getString("event.server-down", "&cThe server you were previously on went down, you have been connected to a fallback server")));
+
+        formattedMessages.put("error.already.connected", ChatColor.translateAlternateColorCodes('&', getString("error.already.connected", "&cYou are already connected to this server!")));
+        formattedMessages.put("error.already.connected-proxy", ChatColor.translateAlternateColorCodes('&', getString("error.already.connected-proxy", "&cYou are already connected to this proxy")));
+        formattedMessages.put("error.already.connecting", ChatColor.translateAlternateColorCodes('&', getString("error.already.connecting", "&cAlready connecting to this server!")));
+        formattedMessages.put("error.command.internal", ChatColor.translateAlternateColorCodes('&', getString("error.command.internal", "&cAn internal error occurred whilst executing this command, please check the console log for details.")));
+        formattedMessages.put("error.command.not-found", ChatColor.translateAlternateColorCodes('&', getString("error.command.not-found", "&cCommand not found!")));
+        formattedMessages.put("error.json.player", ChatColor.translateAlternateColorCodes('&', getString("error.json.player", "&cAn error occurred while parsing your message. (Hover for details)")));
+        formattedMessages.put("error.json.console", ChatColor.translateAlternateColorCodes('&', getString("error.json.console", "&cAn error occurred while parsing your message: {0}")));
+        formattedMessages.put("error.no-perms.command", ChatColor.translateAlternateColorCodes('&', getString("error.no-perms.command", "&cYou do not have permission to execute this command!")));
+        formattedMessages.put("error.no-perms.server", ChatColor.translateAlternateColorCodes('&', getString("error.no-perms.server", "&cYou don't have permission to access this server.")));
+        formattedMessages.put("error.outdated.client", ChatColor.translateAlternateColorCodes('&', getString("error.outdated.client", "Outdated client! Please use {0}")));
+        formattedMessages.put("error.outdated.server", ChatColor.translateAlternateColorCodes('&', getString("error.outdated.server", "Outdated server! I'm still on {0}")));
+        formattedMessages.put("error.connect-kick", ChatColor.translateAlternateColorCodes('&', getString("error.connect-kick", "&cKicked whilst connecting to {0}: {1}")));
+        formattedMessages.put("error.illegal-chat-characters", ChatColor.translateAlternateColorCodes('&', getString("error.illegal-chat-characters", "&cIllegal characters in chat ({0})")));
+        formattedMessages.put("error.lost-connection", ChatColor.translateAlternateColorCodes('&', getString("error.lost-connection", "[Proxy] Lost connection to server.")));
+        formattedMessages.put("error.mojang-fail", ChatColor.translateAlternateColorCodes('&', getString("error.mojang-fail", "Error occurred while contacting login servers, are they down?")));
+        formattedMessages.put("error.name-invalid", ChatColor.translateAlternateColorCodes('&', getString("error.name-invalid", "Username contains invalid characters.")));
+        formattedMessages.put("error.no-server", ChatColor.translateAlternateColorCodes('&', getString("error.no-server", "&cThe specified server does not exist.")));
+        formattedMessages.put("error.not-authenticated", ChatColor.translateAlternateColorCodes('&', getString("error.not-authenticated", "Not authenticated with Minecraft.net")));
+        formattedMessages.put("error.not-online", ChatColor.translateAlternateColorCodes('&', getString("error.not-online", "&cThat user is not online.")));
+        formattedMessages.put("error.ping-cannot-connect", ChatColor.translateAlternateColorCodes('&', getString("error.ping-cannot-connect", "&c[Bungee] Can't connect to server.")));
+        formattedMessages.put("error.players-only", ChatColor.translateAlternateColorCodes('&', getString("error.players-only", "&cOnly in game players can use this command")));
+        formattedMessages.put("error.proxy-full", ChatColor.translateAlternateColorCodes('&', getString("error.proxy-full", "Server is full!")));
+        formattedMessages.put("error.secure-profile.required", ChatColor.translateAlternateColorCodes('&', getString("error.secure-profile.required", "A secure profile is required to join this server.")));
+        formattedMessages.put("error.secure-profile.expired", ChatColor.translateAlternateColorCodes('&', getString("error.secure-profile.expired", "Secure profile expired.")));
+        formattedMessages.put("error.secure-profile.invalid", ChatColor.translateAlternateColorCodes('&', getString("error.secure-profile.invalid", "Secure profile invalid.")));
+        formattedMessages.put("error.username-needed", ChatColor.translateAlternateColorCodes('&', getString("error.username-needed", "&cPlease follow this command by a user name.")));
+    }
+
+    public String getTranslation(final String name, final Object... args) {
+        if (!formattedMessages.containsKey(name) && !config.contains(name)) {
+            Amethyst.getInstance().getLogger().warning("Tried to get translation '" + name
+                    + "' from messages.yml file but wasn't found. Please try resetting this file or report to a developer.");
+            return "<translation '" + name + "' missing>";
+        }
+
+        return MessageFormat.format(formattedMessages.get(name), args);
+    }
+}
diff --git a/proxy/src/main/java/io/github/waterfallmc/waterfall/console/WaterfallConsole.java b/proxy/src/main/java/io/github/waterfallmc/waterfall/console/WaterfallConsole.java
index 6cec0b5a..588f6c6b 100644
--- a/proxy/src/main/java/io/github/waterfallmc/waterfall/console/WaterfallConsole.java
+++ b/proxy/src/main/java/io/github/waterfallmc/waterfall/console/WaterfallConsole.java
@@ -28,7 +28,7 @@ public final class WaterfallConsole extends SimpleTerminalConsole {
     protected void runCommand(String command) {
         ProxyServer proxy = ProxyServer.getInstance();
         if (!proxy.getPluginManager().dispatchCommand(proxy.getConsole(), command)) {
-            proxy.getConsole().sendMessage(new ComponentBuilder("Command not found").color(ChatColor.RED).create());
+            proxy.getConsole().sendMessage(proxy.getTranslationComponent("error.command.not-found"));
         }
     }
 
diff --git a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandAlert.java b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandAlert.java
index 5f242e36..e9ac88be 100644
--- a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandAlert.java
+++ b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandAlert.java
@@ -20,7 +20,7 @@ public class CommandAlert extends Command
         ProxyServer proxy = ProxyServer.getInstance();
         if ( args.length == 0 )
         {
-            sender.sendMessage( proxy.getTranslation( "message_needed" ) );
+            sender.sendMessage( proxy.getTranslationComponent( "command.alert.error.message-needed" ) );
         } else
         {
             StringBuilder builder = new StringBuilder();
@@ -30,7 +30,7 @@ public class CommandAlert extends Command
                 args[0] = args[0].substring( 2, args[0].length() );
             } else
             {
-                builder.append( proxy.getTranslation( "alert" ) );
+                builder.append( proxy.getTranslation( "command.alert.success" ) );
             }
 
             for ( String s : args )
diff --git a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandAlertRaw.java b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandAlertRaw.java
index 78c9a129..50340c12 100644
--- a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandAlertRaw.java
+++ b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandAlertRaw.java
@@ -24,7 +24,7 @@ public class CommandAlertRaw extends Command
         ProxyServer proxy = ProxyServer.getInstance();
         if ( args.length == 0 )
         {
-            sender.sendMessage( proxy.getTranslation( "message_needed" ) );
+            sender.sendMessage( proxy.getTranslationComponent( "command.alert.error.message-needed" ) );
         } else
         {
             String message = Joiner.on( ' ' ).join( args );
@@ -41,7 +41,7 @@ public class CommandAlertRaw extends Command
                 }
                 if ( sender instanceof ProxiedPlayer )
                 {
-                    sender.sendMessage( new ComponentBuilder( proxy.getTranslation( "error_occurred_player" ) )
+                    sender.sendMessage( new ComponentBuilder( proxy.getTranslation( "error.json.player" ) )
                             .event( new HoverEvent( HoverEvent.Action.SHOW_TEXT, new ComponentBuilder( error.getMessage() )
                                     .color( ChatColor.RED )
                                     .create() ) )
@@ -49,7 +49,7 @@ public class CommandAlertRaw extends Command
                     );
                 } else
                 {
-                    sender.sendMessage( proxy.getTranslation( "error_occurred_console", error.getMessage() ) );
+                    sender.sendMessage( proxy.getTranslationComponent( "error.json.console", error.getMessage() ) );
                 }
             }
         }
diff --git a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandFind.java b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandFind.java
index bba4be04..513fd79d 100644
--- a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandFind.java
+++ b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandFind.java
@@ -19,16 +19,16 @@ public class CommandFind extends PlayerCommand
         ProxyServer proxy = ProxyServer.getInstance();
         if ( args.length != 1 )
         {
-            sender.sendMessage( proxy.getTranslation( "username_needed" ) );
+            sender.sendMessage( proxy.getTranslationComponent( "error.username-needed" ) );
         } else
         {
             ProxiedPlayer player = proxy.getPlayer( args[0] );
             if ( player == null || player.getServer() == null )
             {
-                sender.sendMessage( proxy.getTranslation( "user_not_online" ) );
+                sender.sendMessage( proxy.getTranslationComponent( "error.not-online" ) );
             } else
             {
-                sender.sendMessage( proxy.getTranslation( "user_online_at", player.getName(), player.getServer().getInfo().getName() ) );
+                sender.sendMessage( proxy.getTranslationComponent( "command.find.success", player.getName(), player.getServer().getInfo().getName() ) );
             }
         }
     }
diff --git a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandIP.java b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandIP.java
index c6edd492..03b4a5d9 100644
--- a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandIP.java
+++ b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandIP.java
@@ -19,16 +19,16 @@ public class CommandIP extends PlayerCommand
         ProxyServer proxy = ProxyServer.getInstance();
         if ( args.length < 1 )
         {
-            sender.sendMessage( proxy.getTranslation( "username_needed" ) );
+            sender.sendMessage( proxy.getTranslationComponent( "error.username-needed" ) );
             return;
         }
         ProxiedPlayer user = proxy.getPlayer( args[0] );
         if ( user == null )
         {
-            sender.sendMessage( proxy.getTranslation( "user_not_online" ) );
+            sender.sendMessage( proxy.getTranslationComponent( "error.not-online" ) );
         } else
         {
-            sender.sendMessage( proxy.getTranslation( "command_ip", args[0], user.getSocketAddress() ) );
+            sender.sendMessage( proxy.getTranslationComponent( "command.ip.success", args[0], user.getSocketAddress() ) );
         }
     }
 }
diff --git a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandKick.java b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandKick.java
index 74fa8281..86c3eb0c 100644
--- a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandKick.java
+++ b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandKick.java
@@ -27,20 +27,20 @@ public class CommandKick extends Command implements TabExecutor
         ProxyServer proxy = ProxyServer.getInstance();
         if ( args.length == 0 )
         {
-            sender.sendMessage( ProxyServer.getInstance().getTranslation( "username_needed" ) );
+            sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "error.username-needed" ) );
         } else
         {
             ProxiedPlayer player = proxy.getPlayer( args[0] );
 
             if ( player == null )
             {
-                sender.sendMessage( TextComponent.fromLegacyText( ProxyServer.getInstance().getTranslation( "user_not_online" ) ) );
+                sender.sendMessage( ProxyServer.getInstance().getTranslationComponent( "error.not-online" ) );
                 return;
             }
 
             if ( args.length == 1 )
             {
-                player.disconnect( TextComponent.fromLegacyText( ProxyServer.getInstance().getTranslation( "kick_message" ) ) );
+                player.disconnect( ProxyServer.getInstance().getTranslationComponent( "command.kick.success" ) );
             } else
             {
                 String[] reason = new String[ args.length - 1 ];
diff --git a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandList.java b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandList.java
index a7b85178..c6918cab 100644
--- a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandList.java
+++ b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandList.java
@@ -26,6 +26,7 @@ public class CommandList extends Command
     public void execute(CommandSender sender, String[] args)
     {
         ProxyServer proxy = ProxyServer.getInstance();
+        sender.sendMessage( proxy.getTranslationComponent( "command.list.header" ) );
         for ( ServerInfo server : proxy.getServers().values() )
         {
             if ( !server.canAccess( sender ) )
@@ -40,9 +41,9 @@ public class CommandList extends Command
             }
             Collections.sort( players, String.CASE_INSENSITIVE_ORDER );
 
-            sender.sendMessage( proxy.getTranslation( "command_list", server.getName(), server.getPlayers().size(), Util.format( players, ChatColor.RESET + ", " ) ) );
+            sender.sendMessage( proxy.getTranslationComponent( "command.list.entry", server.getName(), server.getPlayers().size(), Util.format( players, ", " ) ) );
         }
 
-        sender.sendMessage( proxy.getTranslation( "total_players", proxy.getOnlineCount() ) );
+        sender.sendMessage( proxy.getTranslationComponent( "command.list.total", proxy.getOnlineCount() ) );
     }
 }
diff --git a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandPerms.java b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandPerms.java
index f7a0d4f6..f1a12da7 100644
--- a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandPerms.java
+++ b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandPerms.java
@@ -24,11 +24,11 @@ public class CommandPerms extends Command
         {
             permissions.addAll( proxy.getConfigurationAdapter().getPermissions( group ) );
         }
-        sender.sendMessage( proxy.getTranslation( "command_perms_groups", Util.csv( sender.getGroups() ) ) );
+        sender.sendMessage( proxy.getTranslationComponent( "command.perms.groups", Util.csv( sender.getGroups() ) ) );
 
         for ( String permission : permissions )
         {
-            sender.sendMessage( proxy.getTranslation( "command_perms_permission", permission ) );
+            sender.sendMessage( proxy.getTranslationComponent( "command.perms.permission", permission ) );
         }
     }
 }
diff --git a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandSend.java b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandSend.java
index e12c1f65..6724fb6a 100644
--- a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandSend.java
+++ b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandSend.java
@@ -45,7 +45,7 @@ public class CommandSend extends Command implements TabExecutor
 
         public void lastEntryDone()
         {
-            sender.sendMessage( ChatColor.GREEN.toString() + ChatColor.BOLD + "Send Results:" );
+            sender.sendMessage( proxy.getTranslationComponent( "command.send.result" ) );
             for ( Map.Entry<ServerConnectRequest.Result, List<String>> entry : results.entrySet() )
             {
                 ComponentBuilder builder = new ComponentBuilder( "" );
@@ -81,7 +81,7 @@ public class CommandSend extends Command implements TabExecutor
                 callback.results.get( result ).add( player.getName() );
                 if ( result == ServerConnectRequest.Result.SUCCESS )
                 {
-                    player.sendMessage( proxy.getTranslation( "you_got_summoned", target.getName(), callback.sender.getName() ) );
+                    player.sendMessage( proxy.getTranslationComponent( "command.send.target", target.getName(), callback.sender.getName() ) );
                 }
 
                 if ( --callback.count == 0 )
@@ -103,13 +103,13 @@ public class CommandSend extends Command implements TabExecutor
         proxy = ProxyServer.getInstance();
         if ( args.length != 2 )
         {
-            sender.sendMessage( proxy.getTranslation( "send_cmd_usage" ) );
+            sender.sendMessage( proxy.getTranslationComponent( "command.send.usage" ) );
             return;
         }
         ServerInfo server = proxy.getServerInfo( args[1] );
         if ( server == null )
         {
-            sender.sendMessage( proxy.getTranslation( "no_server" ) );
+            sender.sendMessage( proxy.getTranslationComponent( "error.no-server" ) );
             return;
         }
 
@@ -121,7 +121,7 @@ public class CommandSend extends Command implements TabExecutor
         {
             if ( !( sender instanceof ProxiedPlayer ) )
             {
-                sender.sendMessage( proxy.getTranslation( "player_only" ) );
+                sender.sendMessage( proxy.getTranslationComponent( "players-only" ) );
                 return;
             }
             ProxiedPlayer player = (ProxiedPlayer) sender;
@@ -138,7 +138,7 @@ public class CommandSend extends Command implements TabExecutor
                 ProxiedPlayer player = proxy.getPlayer( args[0] );
                 if ( player == null )
                 {
-                    sender.sendMessage( proxy.getTranslation( "user_not_online" ) );
+                    sender.sendMessage( proxy.getTranslationComponent( "error.not-online" ) );
                     return;
                 }
                 targets = Collections.singletonList( player );
@@ -156,7 +156,7 @@ public class CommandSend extends Command implements TabExecutor
             player.connect( request );
         }
 
-        sender.sendMessage( ChatColor.DARK_GREEN + "Attempting to send " + targets.size() + " players to " + server.getName() );
+        sender.sendMessage( proxy.getTranslationComponent( "command.send.attempt", targets.size(), server.getName() ) );
     }
 
     @Override
diff --git a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandServer.java b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandServer.java
index c3116ac0..23ae15bb 100644
--- a/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandServer.java
+++ b/proxy/src/main/java/io/sapphiremc/amethyst/module/CommandServer.java
@@ -33,15 +33,20 @@ public class CommandServer extends Command implements TabExecutor
     public void execute(CommandSender sender, String[] args)
     {
         ProxyServer proxy = ProxyServer.getInstance();
+
+        if ( !( sender instanceof ProxiedPlayer ) )
+        {
+            sender.sendMessage( proxy.getTranslationComponent( "error.players-only" ) );
+            return;
+        }
+        ProxiedPlayer player = (ProxiedPlayer) sender;
+
         Map<String, ServerInfo> servers = proxy.getServers();
         if ( args.length == 0 )
         {
-            if ( sender instanceof ProxiedPlayer )
-            {
-                sender.sendMessage( proxy.getTranslation( "current_server", ( (ProxiedPlayer) sender ).getServer().getInfo().getName() ) );
-            }
+            sender.sendMessage( proxy.getTranslationComponent( "command.server.current", player.getServer().getInfo().getName() ) );
 
-            ComponentBuilder serverList = new ComponentBuilder().appendLegacy( proxy.getTranslation( "server_list" ) );
+            ComponentBuilder serverList = new ComponentBuilder().append( proxy.getTranslationComponent( "command.server.available" ) );
             boolean first = true;
             for ( ServerInfo server : servers.values() )
             {
@@ -51,7 +56,7 @@ public class CommandServer extends Command implements TabExecutor
                     int count = server.getPlayers().size();
                     serverTextComponent.setHoverEvent( new HoverEvent(
                             HoverEvent.Action.SHOW_TEXT,
-                            new ComponentBuilder( count + ( count == 1 ? " player" : " players" ) + "\n" ).appendLegacy( proxy.getTranslation( "click_to_connect" ) ).create() )
+                            proxy.getTranslationComponent( "command.server.hover", count ) )
                     );
                     serverTextComponent.setClickEvent( new ClickEvent( ClickEvent.Action.RUN_COMMAND, "/server " + server.getName() ) );
                     serverList.append( serverTextComponent );
@@ -61,19 +66,13 @@ public class CommandServer extends Command implements TabExecutor
             sender.sendMessage( serverList.create() );
         } else
         {
-            if ( !( sender instanceof ProxiedPlayer ) )
-            {
-                return;
-            }
-            ProxiedPlayer player = (ProxiedPlayer) sender;
-
             ServerInfo server = servers.get( args[0] );
             if ( server == null )
             {
-                player.sendMessage( proxy.getTranslation( "no_server" ) );
+                player.sendMessage( proxy.getTranslationComponent( "error.no-server" ) );
             } else if ( !server.canAccess( player ) )
             {
-                player.sendMessage( proxy.getTranslation( "no_server_permission" ) );
+                player.sendMessage( proxy.getTranslationComponent( "error.no-perms.server" ) );
             } else
             {
                 player.connect( server, ServerConnectEvent.Reason.COMMAND );
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index b0a20273..167603de 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -111,8 +111,8 @@ public class BungeeCord extends ProxyServer
     /**
      * Localization bundle.
      */
-    private ResourceBundle baseBundle;
-    private ResourceBundle customBundle;
+   // private ResourceBundle baseBundle; // Amethyst
+   // private ResourceBundle customBundle; // Amethyst
     public EventLoopGroup bossEventLoopGroup, workerEventLoopGroup;
     /**
      * locations.yml save thread.
@@ -190,6 +190,8 @@ public class BungeeCord extends ProxyServer
         // Java uses ! to indicate a resource inside of a jar/zip/other container. Running Bungee from within a directory that has a ! will cause this to muck up.
         // Preconditions.checkState( new File( "." ).getAbsolutePath().indexOf( '!' ) == -1, "Cannot use Amethyst in directory with ! in path." ); // Amethyst - move this to bootstrap
 
+        // Amethyst start - New messages system
+        /*
         try
         {
             baseBundle = ResourceBundle.getBundle( "messages" );
@@ -198,6 +200,8 @@ public class BungeeCord extends ProxyServer
             baseBundle = ResourceBundle.getBundle( "messages", Locale.ENGLISH );
         }
         reloadMessages();
+        */
+        // Amethyst end
 
         // This is a workaround for quite possibly the weirdest bug I have ever encountered in my life!
         // When jansi attempts to extract its natives, by default it tries to extract a specific version,
@@ -328,7 +332,7 @@ public class BungeeCord extends ProxyServer
             @Override
             public void run()
             {
-                independentThreadStop( getTranslation( "restart" ), false );
+                independentThreadStop( getTranslation( "event.restart" ), false );
             }
         } );
 
@@ -418,7 +422,7 @@ public class BungeeCord extends ProxyServer
     @Override
     public void stop()
     {
-        stop( getTranslation( "restart" ) );
+        stop( getTranslation( "event.restart" ) );
     }
 
     @Override
@@ -569,6 +573,8 @@ public class BungeeCord extends ProxyServer
         return ( BungeeCord.class.getPackage().getImplementationVersion() == null ) ? "git-Amethyst-unknown" : BungeeCord.class.getPackage().getImplementationVersion(); // Amethyst
     }
 
+    // Amethyst start - New messages system
+   /*
     public void reloadMessages()
     {
         File file = new File( "messages.properties" );
@@ -583,10 +589,15 @@ public class BungeeCord extends ProxyServer
             }
         }
     }
+    */
+    // Amethyst end
 
     @Override
     public String getTranslation(String name, Object... args)
     {
+        // Amethyst start - New messages system
+        return getAmethyst().getMessages().getTranslation( name, args );
+       /*
         String translation = "<translation '" + name + "' missing>";
         try
         {
@@ -597,6 +608,8 @@ public class BungeeCord extends ProxyServer
         {
         }
         return translation;
+        */
+        // Amethyst end
     }
 
     @Override
@@ -841,5 +854,11 @@ public class BungeeCord extends ProxyServer
     {
         return Amethyst.getInstance();
     }
+
+    @Override
+    public BaseComponent[] getTranslationComponent(String name, Object... args)
+    {
+        return TextComponent.fromLegacyText( getTranslation( name, args ) );
+    }
     // Amethyst end
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index ee951574..e33b4b82 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -16,6 +16,7 @@ import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import net.md_5.bungee.api.ChatColor;
 import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.api.config.ServerInfo;
 import net.md_5.bungee.api.event.ServerConnectEvent;
 import net.md_5.bungee.api.event.ServerConnectedEvent;
@@ -417,7 +418,7 @@ public class ServerConnector extends PacketHandler
             throw CancelSendSignal.INSTANCE;
         }
 
-        String message = bungee.getTranslation( "connect_kick", target.getName(), event.getKickReason() );
+        BaseComponent[] message = bungee.getTranslationComponent( "error.connect-kick", target.getName(), event.getKickReason() );
         if ( user.isDimensionChange() )
         {
             user.disconnect( message );
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 4196bdf4..5beb295e 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -329,7 +329,7 @@ public final class UserConnection implements ProxiedPlayer
                 callback.done( ServerConnectRequest.Result.ALREADY_CONNECTED, null );
             }
 
-            if (request.isSendFeedback()) sendMessage( bungee.getTranslation( "already_connected" ) ); // Waterfall
+            if (request.isSendFeedback()) sendMessage( bungee.getTranslationComponent( "error.already.connected" ) ); // Waterfall
             return;
         }
         if ( pendingConnects.contains( target ) )
@@ -339,7 +339,7 @@ public final class UserConnection implements ProxiedPlayer
                 callback.done( ServerConnectRequest.Result.ALREADY_CONNECTING, null );
             }
 
-            if (request.isSendFeedback()) sendMessage( bungee.getTranslation( "already_connecting" ) ); // Waterfall
+            if (request.isSendFeedback()) sendMessage( bungee.getTranslationComponent( "error.already.connecting" ) ); // Waterfall
             return;
         }
 
@@ -375,14 +375,14 @@ public final class UserConnection implements ProxiedPlayer
                     ServerInfo def = updateAndGetNextServer( target );
                     if ( request.isRetry() && def != null && ( getServer() == null || def != getServer().getInfo() ) )
                     {
-                        if (request.isSendFeedback()) sendMessage( bungee.getTranslation( "fallback_lobby" ) ); // Waterfall
+                        if (request.isSendFeedback()) sendMessage( bungee.getTranslation( "event.fallback.lobby" ) ); // Waterfall
                         connect( def, null, true, ServerConnectEvent.Reason.LOBBY_FALLBACK, request.getConnectTimeout(), request.isSendFeedback() ); // Waterfall
                     } else if ( dimensionChange )
                     {
-                        disconnect( bungee.getTranslation( "fallback_kick", connectionFailMessage( future.cause() ) ) );
+                        disconnect( bungee.getTranslationComponent( "event.fallback.kick", connectionFailMessage( future.cause() ) ) );
                     } else
                     {
-                        if (request.isSendFeedback()) sendMessage( bungee.getTranslation( "fallback_kick", connectionFailMessage( future.cause() ) ) );
+                        if (request.isSendFeedback()) sendMessage( bungee.getTranslationComponent( "event.fallback.kick", connectionFailMessage( future.cause() ) ) );
                     }
                 }
             }
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java b/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
index 9915b800..7887c5e6 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandReload.java
@@ -4,7 +4,6 @@ import io.sapphiremc.amethyst.Amethyst;
 import io.sapphiremc.amethyst.AmethystModulesManager;
 import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import net.md_5.bungee.BungeeCord;
-import net.md_5.bungee.api.ChatColor;
 import net.md_5.bungee.api.CommandSender;
 import net.md_5.bungee.api.connection.PendingConnection;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
@@ -24,7 +23,7 @@ public class CommandReload extends Command
     {
         BungeeCord proxy = BungeeCord.getInstance();
         proxy.config.load();
-        proxy.reloadMessages();
+       // proxy.reloadMessages(); // Amethyst
         proxy.stopListeners();
         proxy.startListeners();
         proxy.getPluginManager().callEvent( new ProxyReloadEvent( sender ) );
@@ -40,16 +39,15 @@ public class CommandReload extends Command
                 PendingConnection connection = player.getPendingConnection();
                 if ( connection.getProtocol().isAfter( ProtocolVersion.MAXIMUM_VERSION.getProtocol() ) )
                 {
-                    connection.disconnect( proxy.getTranslation( "outdated_server", proxy.getGameVersion() ) );
+                    connection.disconnect( proxy.getTranslationComponent( "error.outdated.server", proxy.getGameVersion() ) );
                 } else if ( connection.getProtocol().isBefore( ProtocolVersion.MINIMUM_VERSION.getProtocol() ) )
                 {
-                    connection.disconnect( proxy.getTranslation( "outdated_client", proxy.getGameVersion() ) );
+                    connection.disconnect( proxy.getTranslationComponent( "error.outdated.client", proxy.getGameVersion() ) );
                 }
             }
         }
         // Amethyst end
 
-        sender.sendMessage( ChatColor.BOLD.toString() + ChatColor.RED.toString() + "Amethyst has been reloaded."
-                + " This is NOT advisable and you will not be supported with any issues that arise! Please restart Amethyst ASAP." );
+        sender.sendMessage( proxy.getTranslationComponent( "command.reload.success" ) );
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
index 76677c35..05bd02e7 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
@@ -137,13 +137,13 @@ public abstract class Configuration implements ProxyConfig
                         ServerInfo destination = newServers.get(destinationName);
                         if (destination == null) {
                             BungeeCord.getInstance().getLogger().severe("Couldn't find server " + listener.getDefaultServer() + " or " + listener.getFallbackServer() + " to put player " + player.getName() + " on");
-                            player.disconnect(BungeeCord.getInstance().getTranslation("fallback_kick", "Not found on reload"));
+                            player.disconnect(BungeeCord.getInstance().getTranslationComponent("event.fallback.kick", "Not found on reload"));
                             continue;
                         }
                         player.connect(destination, (success, cause) -> {
                             if (!success) {
                                 BungeeCord.getInstance().getLogger().log(Level.WARNING, "Failed to connect " + player.getName() + " to " + destination.getName(), cause);
-                                player.disconnect(BungeeCord.getInstance().getTranslation("fallback_kick", cause.getCause().getClass().getName()));
+                                player.disconnect(BungeeCord.getInstance().getTranslationComponent("event.fallback.kick", cause.getCause().getClass().getName()));
                             }
                         });
                     }
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index dd1afc0d..a5ae8ebc 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -93,7 +93,7 @@ public class DownstreamBridge extends PacketHandler
 
         // Waterfall start
         ServerInfo def = con.updateAndGetNextServer( server.getInfo() );
-        ServerKickEvent event = bungee.getPluginManager().callEvent( new ServerKickEvent( con, server.getInfo(), TextComponent.fromLegacyText( bungee.getTranslation( "server_went_down" ) ), def, ServerKickEvent.State.CONNECTED, ServerKickEvent.Cause.EXCEPTION ) );
+        ServerKickEvent event = bungee.getPluginManager().callEvent( new ServerKickEvent( con, server.getInfo(), bungee.getTranslationComponent( "event.server-down" ) , def, ServerKickEvent.State.CONNECTED, ServerKickEvent.Cause.EXCEPTION ) );
         if ( event.isCancelled() && event.getCancelServer() != null )
         {
             server.setObsolete( true );
@@ -120,7 +120,7 @@ public class DownstreamBridge extends PacketHandler
         {
             // Waterfall start
             ServerInfo def = con.updateAndGetNextServer( server.getInfo() );
-            ServerKickEvent event = bungee.getPluginManager().callEvent( new ServerKickEvent( con, server.getInfo(), TextComponent.fromLegacyText( bungee.getTranslation( "lost_connection" ) ), def, ServerKickEvent.State.CONNECTED, ServerKickEvent.Cause.LOST_CONNECTION ) );
+            ServerKickEvent event = bungee.getPluginManager().callEvent( new ServerKickEvent( con, server.getInfo(), bungee.getTranslationComponent( "error.lost-connection" ) , def, ServerKickEvent.State.CONNECTED, ServerKickEvent.Cause.LOST_CONNECTION ) );
             if ( event.isCancelled() && event.getCancelServer() != null )
             {
                 server.setObsolete( true );
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index f14faaef..1f53e2f8 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -169,7 +169,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     public void handle(LegacyHandshake legacyHandshake) throws Exception
     {
         this.legacy = true;
-        ch.close( bungee.getTranslation( "outdated_client", bungee.getGameVersion() ) );
+        ch.close( bungee.getTranslationComponent( "error.outdated.client", bungee.getGameVersion() ) );
     }
 
     @Override
@@ -277,7 +277,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             {
                 if ( error != null )
                 {
-                    result = getPingInfo( bungee.getTranslation( "ping_cannot_connect" ), protocol );
+                    result = getPingInfo( bungee.getTranslation( "error.ping-cannot-connect" ), protocol );
                     bungee.getLogger().log( Level.WARNING, "Error pinging remote server", error );
                 }
 
@@ -386,10 +386,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 {
                     if ( handshake.getProtocolVersion() > bungee.getProtocolVersion() )
                     {
-                        disconnect( bungee.getTranslation( "outdated_server", bungee.getGameVersion() ) );
+                        disconnect( bungee.getTranslationComponent( "error.outdated.server", bungee.getGameVersion() ) );
                     } else
                     {
-                        disconnect( bungee.getTranslation( "outdated_client", bungee.getGameVersion() ) );
+                        disconnect( bungee.getTranslationComponent( "error.outdated.client", bungee.getGameVersion() ) );
                     }
                     return;
                 }
@@ -406,7 +406,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
 
         if ( !AllowedCharacters.isValidName( loginRequest.getData(), onlineMode ) )
         {
-            disconnect( bungee.getTranslation( "name_invalid" ) );
+            disconnect( bungee.getTranslationComponent( "error.name-invalid" ) );
             return;
         }
 
@@ -415,19 +415,19 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             PlayerPublicKey publicKey = loginRequest.getPublicKey();
             if ( publicKey == null )
             {
-                disconnect( bungee.getTranslation( "secure_profile_required" ) );
+                disconnect( bungee.getTranslationComponent( "error.secure-profile.required" ) );
                 return;
             }
 
             if ( Instant.ofEpochMilli( publicKey.getExpiry() ).isBefore( Instant.now() ) )
             {
-                disconnect( bungee.getTranslation( "secure_profile_expired" ) );
+                disconnect( bungee.getTranslationComponent( "error.secure-profile.expired" ) );
                 return;
             }
 
             if ( !EncryptionUtil.check( publicKey ) )
             {
-                disconnect( bungee.getTranslation( "secure_profile_invalid" ) );
+                disconnect( bungee.getTranslationComponent( "error.secure-profile.invalid" ) );
                 return;
             }
         }
@@ -437,7 +437,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         int limit = BungeeCord.getInstance().config.getPlayerLimit();
         if ( limit > 0 && bungee.getOnlineCount() >= limit )
         {
-            disconnect( bungee.getTranslation( "proxy_full" ) );
+            disconnect( bungee.getTranslationComponent( "error.proxy-full" ) );
             return;
         }
 
@@ -445,7 +445,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         // We can just check by UUID here as names are based on UUID
         if ( !isOnlineMode() && bungee.getPlayer( getUniqueId() ) != null )
         {
-            disconnect( bungee.getTranslation( "already_connected_proxy" ) );
+            disconnect( bungee.getTranslationComponent( "error.already.connected-proxy" ) );
             return;
         }
 
@@ -538,10 +538,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                         finish();
                         return;
                     }
-                    disconnect( bungee.getTranslation( "offline_mode_player" ) );
+                    disconnect( bungee.getTranslationComponent( "error.not-authenticated" ) );
                 } else
                 {
-                    disconnect( bungee.getTranslation( "mojang_fail" ) );
+                    disconnect( bungee.getTranslationComponent( "error.mojang_fail" ) );
                     bungee.getLogger().log( Level.SEVERE, "Error authenticating " + getName() + " with minecraft.net", error );
                 }
             }
@@ -560,14 +560,14 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             if ( oldName != null )
             {
                 // TODO See #1218
-                oldName.disconnect( bungee.getTranslation( "already_connected_proxy" ) );
+                oldName.disconnect( bungee.getTranslationComponent( "error.already.connected-proxy" ) );
             }
             // And then also for their old UUID
             ProxiedPlayer oldID = bungee.getPlayer( getUniqueId() );
             if ( oldID != null )
             {
                 // TODO See #1218
-                oldID.disconnect( bungee.getTranslation( "already_connected_proxy" ) );
+                oldID.disconnect( bungee.getTranslationComponent( "error.already.connected-proxy" ) );
             }
         } else
         {
@@ -576,7 +576,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             if ( oldName != null )
             {
                 // TODO See #1218
-                disconnect( bungee.getTranslation( "already_connected_proxy" ) );
+                disconnect( bungee.getTranslationComponent( "error.already.connected-proxy" ) );
                 return;
             }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index ae81595d..0336ff9a 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -179,7 +179,7 @@ public class UpstreamBridge extends PacketHandler
             char c = message.charAt( index );
             if ( !AllowedCharacters.isChatAllowedCharacter( c ) )
             {
-                con.disconnect( bungee.getTranslation( "illegal_chat_characters", Util.unicode( c ) ) );
+                con.disconnect( bungee.getTranslation( "error.illegal-chat-characters", Util.unicode( c ) ) );
                 throw CancelSendSignal.INSTANCE;
             } else if (empty && !Character.isWhitespace(c)) {
                 empty = false;
diff --git a/proxy/src/main/resources/messages.properties b/proxy/src/main/resources/messages.properties
deleted file mode 100644
index 58380d4a..00000000
--- a/proxy/src/main/resources/messages.properties
+++ /dev/null
@@ -1,42 +0,0 @@
-alert=\u00a78[\u00a74Alert\u00a78]\u00a7r 
-already_connected=\u00a7cYou are already connected to this server!
-already_connected_proxy=\u00a7cYou are already connected to this proxy!
-already_connecting=\u00a7cAlready connecting to this server!
-command_list=\u00a7a[{0}] \u00a7e({1}): \u00a7r{2}
-connect_kick=\u00a7cKicked whilst connecting to {0}: {1}
-current_server=\u00a76You are currently connected to {0}.
-fallback_kick=\u00a7cCould not connect to a default or fallback server. Incorrectly configured address/port/firewall? {0}
-fallback_lobby=\u00a7cCould not connect to target server, you have been moved to a fallback server.
-lost_connection=[Proxy] Lost connection to server.
-mojang_fail=Error occurred while contacting login servers, are they down?
-no_permission=\u00a7cYou do not have permission to execute this command!
-no_server=\u00a7cThe specified server does not exist.
-no_server_permission=\u00a7cYou don''t have permission to access this server.
-outdated_client=Outdated client! Please use {0}
-outdated_server=Outdated server! I''m still on {0}
-proxy_full=Server is full!
-restart=[Proxy] Proxy restarting.
-server_list=\u00a76You may connect to the following servers at this time: 
-server_went_down=\u00a7cThe server you were previously on went down, you have been connected to a fallback server
-total_players=Total players online: {0}
-name_invalid=Username contains invalid characters.
-ping_cannot_connect=\u00a7c[Bungee] Can''t connect to server.
-offline_mode_player=Not authenticated with Minecraft.net
-secure_profile_required=A secure profile is required to join this server.
-secure_profile_expired=Secure profile expired.
-secure_profile_invalid=Secure profile invalid.
-message_needed=\u00a7cYou must supply a message.
-error_occurred_player=\u00a7cAn error occurred while parsing your message. (Hover for details)
-error_occurred_console=\u00a7cAn error occurred while parsing your message: {0}
-click_to_connect=Click to connect to the server
-username_needed=\u00a7cPlease follow this command by a user name.
-user_not_online=\u00a7cThat user is not online.
-user_online_at=\u00a7a{0} \u00a7ris online at {1}
-send_cmd_usage=\u00a7cNot enough arguments, usage: /send <server|player|all|current> <target>
-player_only=\u00a7cOnly in game players can use this command
-you_got_summoned=\u00a76Summoned to {0} by {1}
-command_perms_groups=\u00a76You have the following groups: {0}
-command_perms_permission=\u00a79- {0}
-command_ip=\u00a79IP of {0} is {1}
-illegal_chat_characters=\u00a7cillegal characters in chat ({0})
-kick_message=\u00a7cYou have been kicked off the proxy.
-- 
2.37.1.windows.1

