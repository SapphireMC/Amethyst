From 016658cc3bf32f3348d81acfeeb5cc51a4fcfeb5 Mon Sep 17 00:00:00 2001
From: DenaryDev <denaryplanet@gmail.com>
Date: Sun, 2 Jan 2022 16:15:48 +0500
Subject: [PATCH] Use pipeline to reduce redundancy


diff --git a/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java b/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
index c3b69cef..2832cf62 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
@@ -5,6 +5,7 @@ import io.netty.channel.Channel;
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelPipeline;
 import java.net.SocketAddress;
 import java.util.concurrent.TimeUnit;
 import lombok.Getter;
@@ -37,14 +38,28 @@ public class ChannelWrapper
 
     public void setProtocol(Protocol protocol)
     {
+        // Amethyst start - Use local variable pipeline to reduce redundancy
+        /*
         ch.pipeline().get( MinecraftDecoder.class ).setProtocol( protocol );
         ch.pipeline().get( MinecraftEncoder.class ).setProtocol( protocol );
+        */
+        final ChannelPipeline pipeline = ch.pipeline();
+        pipeline.get( MinecraftDecoder.class ).setProtocol( protocol );
+        pipeline.get( MinecraftEncoder.class ).setProtocol( protocol );
+        // Amethyst end
     }
 
     public void setVersion(int protocol)
     {
+        // Amethyst start - Use local variable pipeline to reduce redundancy
+        /*
         ch.pipeline().get( MinecraftDecoder.class ).setProtocolVersion( protocol );
         ch.pipeline().get( MinecraftEncoder.class ).setProtocolVersion( protocol );
+        */
+        final ChannelPipeline pipeline = ch.pipeline();
+        pipeline.get( MinecraftDecoder.class ).setProtocolVersion( protocol );
+        pipeline.get( MinecraftEncoder.class ).setProtocolVersion( protocol );
+        // Amethyst end
     }
 
     public void write(Object packet)
@@ -133,25 +148,26 @@ public class ChannelWrapper
 
     public void setCompressionThreshold(int compressionThreshold)
     {
-        if ( ch.pipeline().get( PacketCompressor.class ) == null && compressionThreshold != -1 )
+        final ChannelPipeline pipeline = ch.pipeline(); // Amethyst - use local variable to reduce redundancy
+        if ( pipeline.get( PacketCompressor.class ) == null && compressionThreshold != -1 ) // Amethyst
         {
             addBefore( PipelineUtils.PACKET_ENCODER, "compress", new PacketCompressor() );
         }
         if ( compressionThreshold != -1 )
         {
-            ch.pipeline().get( PacketCompressor.class ).setThreshold( compressionThreshold );
+            pipeline.get( PacketCompressor.class ).setThreshold( compressionThreshold ); // Amethyst
         } else
         {
-            ch.pipeline().remove( "compress" );
+            pipeline.remove( "compress" ); // Amethyst
         }
 
-        if ( ch.pipeline().get( PacketDecompressor.class ) == null && compressionThreshold != -1 )
+        if ( pipeline.get( PacketDecompressor.class ) == null && compressionThreshold != -1 ) // Amethyst
         {
             addBefore( PipelineUtils.PACKET_DECODER, "decompress", new PacketDecompressor(compressionThreshold) );
         }
         if ( compressionThreshold == -1 )
         {
-            ch.pipeline().remove( "decompress" );
+            pipeline.remove( "decompress" ); // Amethyst
         }
     }
 }
-- 
2.34.1.windows.1

