From 6ffa5a48ee908c37f4c8eac1facada6c304f12f5 Mon Sep 17 00:00:00 2001
From: DenaryDev <denaryplanet@gmail.com>
Date: Sun, 6 Mar 2022 23:35:34 +0500
Subject: [PATCH] More user-friendly connection fails messages


diff --git a/flame/src/main/java/io/sapphiremc/amethyst/conf/AmethystConfig.java b/flame/src/main/java/io/sapphiremc/amethyst/conf/AmethystConfig.java
index b67b2aab..c3c12a4f 100644
--- a/flame/src/main/java/io/sapphiremc/amethyst/conf/AmethystConfig.java
+++ b/flame/src/main/java/io/sapphiremc/amethyst/conf/AmethystConfig.java
@@ -78,6 +78,10 @@ public class AmethystConfig extends AbstractYamlConfig {
      * Enable or disable HaProxy logging.
      */
     public boolean logHaProxy = false;
+    /**
+     * Log exception when connection to backend server failed
+     */
+    public boolean logBackendConnectionFailed = true;
 
     /**
      * Enable or disable custom motd.
@@ -173,6 +177,7 @@ public class AmethystConfig extends AbstractYamlConfig {
         logInitialHandler = getBoolean("logger.initialHandler", logInitialHandler);
         logExceptions = getBoolean("logger.exceptions", logExceptions);
         logHaProxy = getBoolean("logger.haProxy", logHaProxy);
+        logBackendConnectionFailed = getBoolean("logger.backendConnectionFailed", logBackendConnectionFailed);
 
         alertEnabled = getBoolean( "modules.alert", alertEnabled );
         findEnabled = getBoolean( "modules.find", findEnabled );
diff --git a/flame/src/main/java/io/sapphiremc/amethyst/conf/MessagesConfig.java b/flame/src/main/java/io/sapphiremc/amethyst/conf/MessagesConfig.java
index 39425bde..318b7c6d 100644
--- a/flame/src/main/java/io/sapphiremc/amethyst/conf/MessagesConfig.java
+++ b/flame/src/main/java/io/sapphiremc/amethyst/conf/MessagesConfig.java
@@ -45,7 +45,7 @@ public class MessagesConfig extends AbstractYamlConfig {
         getString("event.antibot.rate-limit", "&cYou are connecting too fast! ({0})");
         getString("event.antibot.reconnect", "&cReconnect {0} more times to enter!");
 
-        getString("event.fallback.kick", "&cCould not connect to a default or fallback server. Incorrectly configured address/port/firewall? {0}");
+        getString("event.fallback.kick", "&cCould not connect to a default or fallback server. Please try again later: {0}");
         getString("event.fallback.lobby", "&cCould not connect to target server, you have been moved to a fallback server.");
         getString("event.restart", "[Proxy] Proxy restarting.");
         getString("event.server-down", "&cThe server you were previously on went down, you have been connected to a fallback server");
@@ -72,6 +72,8 @@ public class MessagesConfig extends AbstractYamlConfig {
         getString("error.ping-cannot-connect", "&c[Bungee] Can't connect to server.");
         getString("error.players-only", "&cOnly in game players can use this command");
         getString("error.proxy-full", "Server is full!");
+        getString("error.timeout", "Server not reachable (timeout). Offline? Incorrectly configured address/port/firewall?");
+        getString("error.server-unavailable", "This server is unavailable");
         getString("error.username-needed", "&cPlease follow this command by a user name.");
     }
 
diff --git a/flame/src/main/resources/amethyst.yml b/flame/src/main/resources/amethyst.yml
index 90e3a6a4..883b3999 100644
--- a/flame/src/main/resources/amethyst.yml
+++ b/flame/src/main/resources/amethyst.yml
@@ -91,6 +91,9 @@ logger:
   # Enable or disable HaProxy logging.
   haProxy: false
 
+  # Enable or disable logging when connection to any backend server failed.
+  backendConnectionFailed: true
+
 # Modules configuration
 # In this section you can enable or disable certain proxy modules
 modules:
diff --git a/flame/src/main/resources/messages.yml b/flame/src/main/resources/messages.yml
index 6fbac725..57641e87 100644
--- a/flame/src/main/resources/messages.yml
+++ b/flame/src/main/resources/messages.yml
@@ -69,7 +69,7 @@ event:
 
   # Fallback
   fallback:
-    kick: "&cCould not connect to a default or fallback server. Incorrectly configured address/port/firewall? {0}"
+    kick: "&cCould not connect to a default or fallback server. Please try again later: {0}"
     lobby: "&cCould not connect to target server, you have been moved to a fallback server."
 
   # Restart
@@ -116,4 +116,6 @@ error:
   ping-cannot-connect: "&c[Bungee] Can't connect to server."
   players-only: "&cOnly in game players can use this command"
   proxy-full: "Server is full!"
+  timeout: "Server not reachable (timeout). Offline? Incorrectly configured address/port/firewall?"
+  server-unavailable: "This server is unavailable"
   username-needed: "&cPlease follow this command by a user name."
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 319a9f15..7166e683 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -10,6 +10,7 @@ import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelOption;
+import io.netty.channel.ConnectTimeoutException;
 import io.netty.util.internal.PlatformDependent;
 import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.net.InetSocketAddress;
@@ -378,10 +379,10 @@ public final class UserConnection implements ProxiedPlayer
                         connect( def, null, true, ServerConnectEvent.Reason.LOBBY_FALLBACK, request.getConnectTimeout(), request.isSendFeedback() ); // Waterfall
                     } else if ( dimensionChange )
                     {
-                        disconnect( bungee.getTranslationComponent( "event.fallback.kick", connectionFailMessage( future.cause() ) ) );
+                        disconnect( bungee.getTranslationComponent( "event.fallback.kick", connectionFailMessage( future.cause(), target.getName() ) ) ); // Amethyst - More user-friendly connection fail messages
                     } else
                     {
-                        if (request.isSendFeedback()) sendMessage( bungee.getTranslationComponent( "event.fallback.kick", connectionFailMessage( future.cause() ) ) );
+                        if (request.isSendFeedback()) sendMessage( bungee.getTranslationComponent( "event.fallback.kick", connectionFailMessage( future.cause(), target.getName() ) ) ); // Amethyst - More user-friendly connection fail messages
                     }
                 }
             }
@@ -401,13 +402,25 @@ public final class UserConnection implements ProxiedPlayer
         b.connect().addListener( listener );
     }
 
-    private String connectionFailMessage(Throwable cause)
+    private String connectionFailMessage(Throwable cause, String server) // Amethyst - More user-friendly connection fail messages
     {
-        // Waterfall start
-        cause.printStackTrace();
-        return "";
-        //return Util.exception( cause, false );
-        // Waterfall end
+        // Amethyst start - More user-friendly connection fail messages
+        if ( bungee.getAmethyst().getConfig().logBackendConnectionFailed )
+        {
+            bungee.getLogger().log( Level.WARNING, "[" + pendingConnection.getName() + "|" + pendingConnection.getAddress() + "] Unable to connect to server " + server, cause );
+        }
+
+        if ( cause instanceof ConnectTimeoutException )
+        {
+            return bungee.getTranslation( "error.timeout" );
+        } else if ( cause.getClass().getName().contains( "AnnotatedConnectException" ) )
+        {
+            return bungee.getTranslation( "error.server-unavailable" );
+        } else
+        {
+            return cause.getClass().getName();
+        }
+        // Amethyst end
     }
 
     @Override
-- 
2.36.0

