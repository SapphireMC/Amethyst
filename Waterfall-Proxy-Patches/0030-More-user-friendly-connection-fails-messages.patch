From f09f6ff4c29f71b8e8ba55dd423885d02e8946da Mon Sep 17 00:00:00 2001
From: DenaryDev <denaryplanet@gmail.com>
Date: Sun, 6 Mar 2022 23:35:34 +0500
Subject: [PATCH] More user-friendly connection fails messages


diff --git a/flame/src/main/java/io/sapphiremc/amethyst/conf/AmethystConfig.java b/flame/src/main/java/io/sapphiremc/amethyst/conf/AmethystConfig.java
index 05addf5a..5d5cabd5 100644
--- a/flame/src/main/java/io/sapphiremc/amethyst/conf/AmethystConfig.java
+++ b/flame/src/main/java/io/sapphiremc/amethyst/conf/AmethystConfig.java
@@ -110,6 +110,10 @@ public class AmethystConfig extends AbstractYamlConfig {
      * Enable or disable HaProxy logging.
      */
     public boolean logHaProxy = false;
+    /**
+     * Log exception when connection to backend server failed
+     */
+    public boolean logBackendConnectionFailed = true;
 
     /**
      * A module that provides the /alert and /alertraw commands.
@@ -179,6 +183,7 @@ public class AmethystConfig extends AbstractYamlConfig {
         logInitialHandler = getBoolean("logger.initialHandler", logInitialHandler);
         logExceptions = getBoolean("logger.exceptions", logExceptions);
         logHaProxy = getBoolean("logger.haProxy", logHaProxy);
+        logBackendConnectionFailed = getBoolean("logger.backendConnectionFailed", logBackendConnectionFailed);
 
         alertEnabled = getBoolean( "modules.alert", alertEnabled );
         findEnabled = getBoolean( "modules.find", findEnabled );
diff --git a/flame/src/main/java/io/sapphiremc/amethyst/conf/MessagesConfig.java b/flame/src/main/java/io/sapphiremc/amethyst/conf/MessagesConfig.java
index 046d80a8..615f75b9 100644
--- a/flame/src/main/java/io/sapphiremc/amethyst/conf/MessagesConfig.java
+++ b/flame/src/main/java/io/sapphiremc/amethyst/conf/MessagesConfig.java
@@ -81,6 +81,8 @@ public class MessagesConfig extends AbstractYamlConfig {
         formattedMessages.put("error.secure-profile.expired", ChatColor.translateAlternateColorCodes('&', getString("error.secure-profile.expired", "Secure profile expired.")));
         formattedMessages.put("error.secure-profile.invalid", ChatColor.translateAlternateColorCodes('&', getString("error.secure-profile.invalid", "Secure profile invalid.")));
         formattedMessages.put("error.username-needed", ChatColor.translateAlternateColorCodes('&', getString("error.username-needed", "&cPlease follow this command by a user name.")));
+        formattedMessages.put("error.timeout", ChatColor.translateAlternateColorCodes('&', getString("error.timeout", "Server not reachable (timeout). Offline? Incorrectly configured address/port/firewall?")));
+        formattedMessages.put("error.server-unavailable", ChatColor.translateAlternateColorCodes('&', getString("error.server-unavailable", "This server is unavailable")));
     }
 
     public String getTranslation(final String name, final Object... args) {
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 5beb295e..679fe5cd 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -10,6 +10,7 @@ import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelOption;
+import io.netty.channel.ConnectTimeoutException;
 import io.netty.util.internal.PlatformDependent;
 import io.sapphiremc.amethyst.api.protocol.ProtocolVersion;
 import java.net.InetSocketAddress;
@@ -379,10 +380,10 @@ public final class UserConnection implements ProxiedPlayer
                         connect( def, null, true, ServerConnectEvent.Reason.LOBBY_FALLBACK, request.getConnectTimeout(), request.isSendFeedback() ); // Waterfall
                     } else if ( dimensionChange )
                     {
-                        disconnect( bungee.getTranslationComponent( "event.fallback.kick", connectionFailMessage( future.cause() ) ) );
+                        disconnect( bungee.getTranslationComponent( "event.fallback.kick", connectionFailMessage( future.cause(), target.getName() ) ) ); // Amethyst - More user-friendly connection fail messages
                     } else
                     {
-                        if (request.isSendFeedback()) sendMessage( bungee.getTranslationComponent( "event.fallback.kick", connectionFailMessage( future.cause() ) ) );
+                        if (request.isSendFeedback()) sendMessage( bungee.getTranslationComponent( "event.fallback.kick", connectionFailMessage( future.cause(), target.getName() ) ) ); // Amethyst - More user-friendly connection fail messages
                     }
                 }
             }
@@ -402,10 +403,25 @@ public final class UserConnection implements ProxiedPlayer
         b.connect().addListener( listener );
     }
 
-    private String connectionFailMessage(Throwable cause)
+    private String connectionFailMessage(Throwable cause, String server) // Amethyst - More user-friendly connection fail messages
     {
-        bungee.getLogger().log(Level.WARNING, "Error occurred processing connection for " + this.name + " " + Util.exception( cause, false )); // Waterfall
-        return ""; // Waterfall
+        // Amethyst start - More user-friendly connection fail messages
+        if ( bungee.getAmethyst().getConfig().logBackendConnectionFailed )
+        {
+            bungee.getLogger().log( Level.WARNING, "[" + pendingConnection.getName() + "|" + pendingConnection.getAddress() + "] Unable to connect to server " + server, cause );
+        }
+
+        if ( cause instanceof ConnectTimeoutException )
+        {
+            return bungee.getTranslation( "error.timeout" );
+        } else if ( cause.getClass().getName().contains( "AnnotatedConnectException" ) )
+        {
+            return bungee.getTranslation( "error.server-unavailable" );
+        } else
+        {
+            return cause.getClass().getName();
+        }
+        // Amethyst end
     }
 
     @Override
-- 
2.37.1.windows.1

